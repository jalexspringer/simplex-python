{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SimplexPython SDK A type-safe, async-first Python SDK for interacting with the SimpleX Chat server. Overview SimplexPython provides a comprehensive and strongly-typed interface to the SimpleX Chat protocol. The SDK is designed with modern Python features and follows best practices for Python 3.13. Key Features Async-first design for efficient network operations Strong typing with PEP 695 generics and comprehensive type hints Fluent API with domain-specific clients Clean separation of concerns between transport, commands, and responses Extensive error handling with detailed error messages Installation pip install simplex-python Quick Start import asyncio from simplex_python.client import SimplexClient async def main(): async with SimplexClient(\"ws://localhost:5225\") as client: # Get the active user active_user = await client.users.get_active() print(f\"Active user: {active_user.display_name}\") # List all users users = await client.users.list_users() print(f\"Found {len(users)} users\") # Create a new user with auto-created profile address new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) print(f\"Created user: {new_user.display_name}\") if __name__ == \"__main__\": asyncio.run(main()) API Documentation The SDK is organized into domain-specific clients: Client API - Main client interface Users API - User management operations","title":"Home"},{"location":"#simplexpython-sdk","text":"A type-safe, async-first Python SDK for interacting with the SimpleX Chat server.","title":"SimplexPython SDK"},{"location":"#overview","text":"SimplexPython provides a comprehensive and strongly-typed interface to the SimpleX Chat protocol. The SDK is designed with modern Python features and follows best practices for Python 3.13.","title":"Overview"},{"location":"#key-features","text":"Async-first design for efficient network operations Strong typing with PEP 695 generics and comprehensive type hints Fluent API with domain-specific clients Clean separation of concerns between transport, commands, and responses Extensive error handling with detailed error messages","title":"Key Features"},{"location":"#installation","text":"pip install simplex-python","title":"Installation"},{"location":"#quick-start","text":"import asyncio from simplex_python.client import SimplexClient async def main(): async with SimplexClient(\"ws://localhost:5225\") as client: # Get the active user active_user = await client.users.get_active() print(f\"Active user: {active_user.display_name}\") # List all users users = await client.users.list_users() print(f\"Found {len(users)} users\") # Create a new user with auto-created profile address new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) print(f\"Created user: {new_user.display_name}\") if __name__ == \"__main__\": asyncio.run(main())","title":"Quick Start"},{"location":"#api-documentation","text":"The SDK is organized into domain-specific clients: Client API - Main client interface Users API - User management operations","title":"API Documentation"},{"location":"api/client/","text":"Client API The Client API provides the main entry point for interacting with the SimpleX Chat server. SimplexClient simplex_python.client.SimplexClient High-level async client for the Simplex chat protocol with domain-specific clients. Example usage async with SimplexClient(server_or_url) as client: # User operations user = await client.users.get_active() # Group operations group = await client.groups.create(\"Project Team\") # Chat operations await client.chats.send_message(456, \"Hello, world!\") # File operations await client.files.set_files_folder(\"/path/to/downloads\") # Database operations await client.database.export_archive(\"/path/to/backup.simplex\") # Connection operations await client.connections.accept_contact(123) # Listen for events async for event in client.events(): handle_event(event) Source code in simplex_python/client.pyclass SimplexClient : \"\"\" High-level async client for the Simplex chat protocol with domain-specific clients. Example usage: async with SimplexClient(server_or_url) as client: # User operations user = await client.users.get_active() # Group operations group = await client.groups.create(\"Project Team\") # Chat operations await client.chats.send_message(456, \"Hello, world!\") # File operations await client.files.set_files_folder(\"/path/to/downloads\") # Database operations await client.database.export_archive(\"/path/to/backup.simplex\") # Connection operations await client.connections.accept_contact(123) # Listen for events async for event in client.events(): handle_event(event) \"\"\" def __init__ ( self , server : Union [ ChatServer , str ], timeout : float = 10.0 , qsize : int = 100 ): \"\"\" Args: server: ChatServer object or WebSocket URL to connect to. timeout: Connection and command timeout in seconds. qsize: Max size of the event queue. \"\"\" self . _server = server self . _timeout = timeout self . _qsize = qsize self . _transport : Optional [ ChatTransport ] = None self . _event_q : Optional [ ABQueue [ CommandResponse ]] = None self . _pending : OrderedDict [ str , asyncio . Future ] = OrderedDict () self . _recv_task : Optional [ asyncio . Task ] = None self . _connected = False self . _client_corr_id = 0 # Sequential ID counter # Lazy-loaded domain-specific client instances self . _users_client = None self . _groups_client = None self . _chats_client = None self . _files_client = None self . _database_client = None self . _connections_client = None async def __aenter__ ( self ) -> \"SimplexClient\" : await self . connect () return self async def __aexit__ ( self , exc_type , exc , tb ): await self . disconnect () async def connect ( self ) -> None : \"\"\"Establish a connection to the chat server.\"\"\" if self . _connected : return try : self . _transport = await ChatTransport . connect ( self . _server , timeout = self . _timeout , qsize = self . _qsize ) self . _event_q = ABQueue [ CommandResponse ]( self . _qsize ) self . _recv_task = asyncio . create_task ( self . _recv_loop ()) self . _connected = True logger . info ( \"Connected to chat server\" ) except OSError as e : # This is likely a connection error - provide helpful information if \"Connect call failed\" in str ( e ): raise SimplexConnectionError ( \"Connection refused\" , self . _server , e ) elif \"Name or service not known\" in str ( e ): raise SimplexConnectionError ( \"Host not found\" , self . _server , e ) else : raise SimplexConnectionError ( \"Connection error\" , self . _server , e ) except Exception as e : # For other errors, still use our custom error but with the original exception raise SimplexConnectionError ( \"Unexpected error while connecting\" , self . _server , e ) async def disconnect ( self ) -> None : \"\"\"Disconnect from the chat server and clean up resources.\"\"\" if not self . _connected : return self . _connected = False if self . _recv_task : self . _recv_task . cancel () with contextlib . suppress ( asyncio . CancelledError ): await self . _recv_task if self . _transport : await self . _transport . close () if self . _event_q : await self . _event_q . close () self . _pending . clear () logger . info ( \"Disconnected from chat server\" ) async def send_command ( self , cmd : Union [ SimplexCommand , Dict [ str , Any ]], expect_response : bool = True , ) -> Optional [ CommandResponse ]: \"\"\" Send a command to the chat server and optionally await a response. Args: cmd: The command object to send (SimplexCommand or compatible dict). expect_response: If True, await and return the response matching the corr_id. Returns: The response data, or None if not expecting a response. Raises: SimplexClientError: If not connected or timeout waiting for response. SimplexCommandError: If the command results in an error response. \"\"\" if not self . _transport or not self . _connected : raise SimplexClientError ( \"Not connected to chat server. Use `async with SimplexClient(...)`\" ) # Generate sequential numeric ID self . _client_corr_id += 1 corr_id = str ( self . _client_corr_id ) logger . debug ( f \"Generated correlation ID: { corr_id } \" ) # Create a command string using the command's to_cmd_string method if hasattr ( cmd , \"to_cmd_string\" ): cmd_str = cmd . to_cmd_string () else : cmd_str = str ( cmd ) logger . debug ( f \"Sending command: { cmd_str } \" ) # Create a ChatSrvRequest with the correlation ID and command string request = ChatSrvRequest ( corr_id = corr_id , cmd = cmd_str ) if expect_response : fut = asyncio . get_running_loop () . create_future () self . _pending [ corr_id ] = fut await self . _transport . write ( request ) if expect_response : try : raw_resp = await asyncio . wait_for ( fut , self . _timeout ) # Handle error responses if raw_resp . get ( \"type\" ) == \"chatCmdError\" : error_info = raw_resp . get ( \"chatError\" , {}) error_type = error_info . get ( \"type\" , \"unknown\" ) print ( \"ERROR: \" , error_info ) # Provide more specific error information for store errors if error_type == \"errorStore\" and isinstance ( error_info . get ( \"storeError\" ), dict ): store_error = error_info . get ( \"storeError\" , {}) store_error_type = store_error . get ( \"type\" ) # Convert raw response to a StoreErrorType for enhanced detection from .responses.base import StoreErrorType store_error_obj = StoreErrorType ( type = \"errorStore\" , storeError = store_error ) # For certain error types, return a response object instead of raising an exception # This allows domain-specific clients to handle these errors in a custom way if ( store_error_obj . is_contact_link_not_found_error () or store_error_obj . is_duplicate_contact_link_error () ): logger . debug ( f \"Returning store error as response: { store_error_type } \" ) return store_error_obj # Check for specific store error types and provide helpful suggestions if store_error_obj . is_contact_link_not_found_error (): error_msg = \"Command error: No chat address exists. Create one first with client.users.create_profile_address()\" elif store_error_obj . is_duplicate_contact_link_error (): error_msg = \"Command error: Chat address already exists. Use client.users.show_profile_address() to view it\" elif store_error_type : error_msg = ( f \"Command error: { error_type } - { store_error_type } \" ) else : error_msg = f \"Command error: { error_type } \" elif error_type == \"error\" : error_msg = f \"ChatError: { error_info [ 'errorType' ][ 'type' ] } \" else : error_msg = f \"Command error: { error_type } \" raise SimplexCommandError ( error_msg , raw_resp ) # Use ResponseFactory to create the appropriate response object typed_resp = ResponseFactory . create ( raw_resp ) return typed_resp except asyncio . TimeoutError : error_msg = f \"Timeout waiting for response to command: { cmd_str } \" raise SimplexClientError ( error_msg ) finally : self . _pending . pop ( corr_id , None ) return None async def _recv_loop ( self ): \"\"\"Background task that processes incoming messages from the transport.\"\"\" assert self . _transport is not None and self . _event_q is not None try : async for resp in self . _transport : # Extract the correlation ID and response data resp_corr_id = getattr ( resp , \"corr_id\" , None ) resp_data = getattr ( resp , \"resp\" , resp ) logger . debug ( f \"Received response with correlation ID: { resp_corr_id } \" ) # If response has a correlation ID and matches a pending request if resp_corr_id and resp_corr_id in self . _pending : fut = self . _pending [ resp_corr_id ] if not fut . done (): logger . debug ( f \"Resolving future for correlation ID: { resp_corr_id } \" ) fut . set_result ( resp_data ) else : # No matching future found, treat as an event logger . debug ( \"No matching future found, enqueuing as event\" ) await self . _event_q . enqueue ( resp_data ) except Exception as e : logger . exception ( f \"Exception in recv_loop: { e } \" ) self . _connected = False async def events ( self ) -> AsyncGenerator [ CommandResponse , None ]: \"\"\" Async generator yielding server events (responses not matched to a request). Usage: async for event in client.events(): # Process event \"\"\" if not self . _event_q or not self . _connected : raise SimplexClientError ( \"Not connected to chat server\" ) while self . _connected : try : evt = await self . _event_q . dequeue () if evt : yield evt except Exception as e : logger . error ( f \"Error in events generator: { e } \" ) if not self . _connected : break @property def connected ( self ) -> bool : \"\"\"Whether the client is currently connected.\"\"\" return self . _connected @property def users ( self ) -> \"UsersClient\" : \"\"\"Access user-related operations with a fluent API.\"\"\" if self . _users_client is None : from .clients.users import UsersClient self . _users_client = UsersClient ( self ) return self . _users_client @property def groups ( self ) -> \"GroupsClient\" : \"\"\"Access group-related operations with a fluent API.\"\"\" if self . _groups_client is None : from .clients.groups import GroupsClient self . _groups_client = GroupsClient ( self ) return self . _groups_client @property def chats ( self ) -> \"ChatsClient\" : \"\"\"Access chat-related operations with a fluent API.\"\"\" if self . _chats_client is None : from .clients.chats import ChatsClient self . _chats_client = ChatsClient ( self ) return self . _chats_client @property def files ( self ) -> \"FilesClient\" : \"\"\"Access file-related operations with a fluent API.\"\"\" if self . _files_client is None : from .clients.files import FilesClient self . _files_client = FilesClient ( self ) return self . _files_client @property def database ( self ) -> \"DatabaseClient\" : \"\"\"Access database-related operations with a fluent API.\"\"\" if self . _database_client is None : from .clients.database import DatabaseClient self . _database_client = DatabaseClient ( self ) return self . _database_client @property def connections ( self ) -> \"ConnectionsClient\" : \"\"\"Access connection-related operations with a fluent API.\"\"\" if self . _connections_client is None : from .clients.connections import ConnectionsClient self . _connections_client = ConnectionsClient ( self ) return self . _connections_client chats : ChatsClient property Access chat-related operations with a fluent API. connected : bool property Whether the client is currently connected. connections : ConnectionsClient property Access connection-related operations with a fluent API. database : DatabaseClient property Access database-related operations with a fluent API. files : FilesClient property Access file-related operations with a fluent API. groups : GroupsClient property Access group-related operations with a fluent API. users : UsersClient property Access user-related operations with a fluent API. __init__ ( server : Union [ ChatServer , str ], timeout : float = 10.0 , qsize : int = 100 ) Parameters: Name Type Description Default server Union [ ChatServer , str ] ChatServer object or WebSocket URL to connect to. required timeout float Connection and command timeout in seconds. 10.0 qsize int Max size of the event queue. 100 Source code in simplex_python/client.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def __init__ ( self , server : Union [ ChatServer , str ], timeout : float = 10.0 , qsize : int = 100 ): \"\"\" Args: server: ChatServer object or WebSocket URL to connect to. timeout: Connection and command timeout in seconds. qsize: Max size of the event queue. \"\"\" self . _server = server self . _timeout = timeout self . _qsize = qsize self . _transport : Optional [ ChatTransport ] = None self . _event_q : Optional [ ABQueue [ CommandResponse ]] = None self . _pending : OrderedDict [ str , asyncio . Future ] = OrderedDict () self . _recv_task : Optional [ asyncio . Task ] = None self . _connected = False self . _client_corr_id = 0 # Sequential ID counter # Lazy-loaded domain-specific client instances self . _users_client = None self . _groups_client = None self . _chats_client = None self . _files_client = None self . _database_client = None self . _connections_client = None connect () -> None async Establish a connection to the chat server. Source code in simplex_python/client.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 async def connect ( self ) -> None : \"\"\"Establish a connection to the chat server.\"\"\" if self . _connected : return try : self . _transport = await ChatTransport . connect ( self . _server , timeout = self . _timeout , qsize = self . _qsize ) self . _event_q = ABQueue [ CommandResponse ]( self . _qsize ) self . _recv_task = asyncio . create_task ( self . _recv_loop ()) self . _connected = True logger . info ( \"Connected to chat server\" ) except OSError as e : # This is likely a connection error - provide helpful information if \"Connect call failed\" in str ( e ): raise SimplexConnectionError ( \"Connection refused\" , self . _server , e ) elif \"Name or service not known\" in str ( e ): raise SimplexConnectionError ( \"Host not found\" , self . _server , e ) else : raise SimplexConnectionError ( \"Connection error\" , self . _server , e ) except Exception as e : # For other errors, still use our custom error but with the original exception raise SimplexConnectionError ( \"Unexpected error while connecting\" , self . _server , e ) disconnect () -> None async Disconnect from the chat server and clean up resources. Source code in simplex_python/client.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 async def disconnect ( self ) -> None : \"\"\"Disconnect from the chat server and clean up resources.\"\"\" if not self . _connected : return self . _connected = False if self . _recv_task : self . _recv_task . cancel () with contextlib . suppress ( asyncio . CancelledError ): await self . _recv_task if self . _transport : await self . _transport . close () if self . _event_q : await self . _event_q . close () self . _pending . clear () logger . info ( \"Disconnected from chat server\" ) events () -> AsyncGenerator [ CommandResponse , None ] async Async generator yielding server events (responses not matched to a request). Usage async for event in client.events(): # Process event Source code in simplex_python/client.py 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 async def events ( self ) -> AsyncGenerator [ CommandResponse , None ]: \"\"\" Async generator yielding server events (responses not matched to a request). Usage: async for event in client.events(): # Process event \"\"\" if not self . _event_q or not self . _connected : raise SimplexClientError ( \"Not connected to chat server\" ) while self . _connected : try : evt = await self . _event_q . dequeue () if evt : yield evt except Exception as e : logger . error ( f \"Error in events generator: { e } \" ) if not self . _connected : break send_command ( cmd : Union [ SimplexCommand , Dict [ str , Any ]], expect_response : bool = True ) -> Optional [ CommandResponse ] async Send a command to the chat server and optionally await a response. Parameters: Name Type Description Default cmd Union [ SimplexCommand , Dict [ str , Any ]] The command object to send (SimplexCommand or compatible dict). required expect_response bool If True, await and return the response matching the corr_id. True Returns: Type Description Optional [ CommandResponse ] The response data, or None if not expecting a response. Raises: Type Description SimplexClientError If not connected or timeout waiting for response. SimplexCommandError If the command results in an error response. Source code in simplex_python/client.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 async def send_command ( self , cmd : Union [ SimplexCommand , Dict [ str , Any ]], expect_response : bool = True , ) -> Optional [ CommandResponse ]: \"\"\" Send a command to the chat server and optionally await a response. Args: cmd: The command object to send (SimplexCommand or compatible dict). expect_response: If True, await and return the response matching the corr_id. Returns: The response data, or None if not expecting a response. Raises: SimplexClientError: If not connected or timeout waiting for response. SimplexCommandError: If the command results in an error response. \"\"\" if not self . _transport or not self . _connected : raise SimplexClientError ( \"Not connected to chat server. Use `async with SimplexClient(...)`\" ) # Generate sequential numeric ID self . _client_corr_id += 1 corr_id = str ( self . _client_corr_id ) logger . debug ( f \"Generated correlation ID: { corr_id } \" ) # Create a command string using the command's to_cmd_string method if hasattr ( cmd , \"to_cmd_string\" ): cmd_str = cmd . to_cmd_string () else : cmd_str = str ( cmd ) logger . debug ( f \"Sending command: { cmd_str } \" ) # Create a ChatSrvRequest with the correlation ID and command string request = ChatSrvRequest ( corr_id = corr_id , cmd = cmd_str ) if expect_response : fut = asyncio . get_running_loop () . create_future () self . _pending [ corr_id ] = fut await self . _transport . write ( request ) if expect_response : try : raw_resp = await asyncio . wait_for ( fut , self . _timeout ) # Handle error responses if raw_resp . get ( \"type\" ) == \"chatCmdError\" : error_info = raw_resp . get ( \"chatError\" , {}) error_type = error_info . get ( \"type\" , \"unknown\" ) print ( \"ERROR: \" , error_info ) # Provide more specific error information for store errors if error_type == \"errorStore\" and isinstance ( error_info . get ( \"storeError\" ), dict ): store_error = error_info . get ( \"storeError\" , {}) store_error_type = store_error . get ( \"type\" ) # Convert raw response to a StoreErrorType for enhanced detection from .responses.base import StoreErrorType store_error_obj = StoreErrorType ( type = \"errorStore\" , storeError = store_error ) # For certain error types, return a response object instead of raising an exception # This allows domain-specific clients to handle these errors in a custom way if ( store_error_obj . is_contact_link_not_found_error () or store_error_obj . is_duplicate_contact_link_error () ): logger . debug ( f \"Returning store error as response: { store_error_type } \" ) return store_error_obj # Check for specific store error types and provide helpful suggestions if store_error_obj . is_contact_link_not_found_error (): error_msg = \"Command error: No chat address exists. Create one first with client.users.create_profile_address()\" elif store_error_obj . is_duplicate_contact_link_error (): error_msg = \"Command error: Chat address already exists. Use client.users.show_profile_address() to view it\" elif store_error_type : error_msg = ( f \"Command error: { error_type } - { store_error_type } \" ) else : error_msg = f \"Command error: { error_type } \" elif error_type == \"error\" : error_msg = f \"ChatError: { error_info [ 'errorType' ][ 'type' ] } \" else : error_msg = f \"Command error: { error_type } \" raise SimplexCommandError ( error_msg , raw_resp ) # Use ResponseFactory to create the appropriate response object typed_resp = ResponseFactory . create ( raw_resp ) return typed_resp except asyncio . TimeoutError : error_msg = f \"Timeout waiting for response to command: { cmd_str } \" raise SimplexClientError ( error_msg ) finally : self . _pending . pop ( corr_id , None ) return None ChatTransport The transport layer handles the low-level connection details for communication with the SimpleX server. simplex_python.transport.ChatTransport Bases: Transport [ ChatSrvRequest , ChatSrvResponse ] High-level transport abstraction for Simplex chat protocol. Wraps a WSTransport and provides protocol-aware send/receive methods. Uses ChatCommand and CommandResponse for type safety. Source code in simplex_python/transport.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 class ChatTransport ( Transport [ ChatSrvRequest , ChatSrvResponse ]): \"\"\"High-level transport abstraction for Simplex chat protocol. Wraps a WSTransport and provides protocol-aware send/receive methods. Uses ChatCommand and CommandResponse for type safety. \"\"\" def __init__ ( self , ws_transport : WSTransport , timeout : float , qsize : int ): super () . __init__ ( qsize ) self . _ws = ws_transport self . timeout = timeout @classmethod async def connect ( cls , server : ChatServer | str , timeout : float = 10.0 , qsize : int = 100 ) -> \"ChatTransport\" : \"\"\"Establish a connection to the given ChatServer or URL.\"\"\" if isinstance ( server , str ): url = server else : url = ( f \"ws:// { server . host } : { server . port } \" if server . port else f \"ws:// { server . host } \" ) ws = await WSTransport . connect ( url , timeout = timeout , qsize = qsize ) return cls ( ws , timeout , qsize ) async def close ( self ) -> None : await self . _ws . close () await self . queue . close () async def write ( self , req : ChatSrvRequest ) -> None : \"\"\" Serialize and send the command envelope. Args: req: A ChatSrvRequest with corrId and cmd \"\"\" # Convert to JSON and send data = json . dumps ({ \"corrId\" : req . corr_id , \"cmd\" : req . cmd }) # print(f\"[DEBUG] Sending command envelope: {data}\") await self . _ws . write ( data ) async def read ( self ) -> ChatSrvResponse : # Deserialize response as needed msg = await self . _ws . read () # print(f\"[DEBUG] Received raw message: {msg}\") if isinstance ( msg , bytes ): msg = msg . decode ( \"utf-8\" ) obj = json . loads ( msg ) # Create the response object with proper typing corr_id = obj . get ( \"corrId\" ) resp_data = obj . get ( \"resp\" ) # Create a proper ChatSrvResponse object return ChatSrvResponse ( corr_id = corr_id , resp = resp_data ) async def __anext__ ( self ): return await self . read () connect ( server : ChatServer | str , timeout : float = 10.0 , qsize : int = 100 ) -> 'ChatTransport' async classmethod Establish a connection to the given ChatServer or URL. Source code in simplex_python/transport.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 @classmethod async def connect ( cls , server : ChatServer | str , timeout : float = 10.0 , qsize : int = 100 ) -> \"ChatTransport\" : \"\"\"Establish a connection to the given ChatServer or URL.\"\"\" if isinstance ( server , str ): url = server else : url = ( f \"ws:// { server . host } : { server . port } \" if server . port else f \"ws:// { server . host } \" ) ws = await WSTransport . connect ( url , timeout = timeout , qsize = qsize ) return cls ( ws , timeout , qsize ) write ( req : ChatSrvRequest ) -> None async Serialize and send the command envelope. Args: req: A ChatSrvRequest with corrId and cmd Source code in simplex_python/transport.py 205 206 207 208 209 210 211 212 213 214 async def write ( self , req : ChatSrvRequest ) -> None : \"\"\" Serialize and send the command envelope. Args: req: A ChatSrvRequest with corrId and cmd \"\"\" # Convert to JSON and send data = json . dumps ({ \"corrId\" : req . corr_id , \"cmd\" : req . cmd }) # print(f\"[DEBUG] Sending command envelope: {data}\") await self . _ws . write ( data ) Error Types simplex_python.client_errors Error handling for the Simplex chat client. This module provides structured error handling for the Simplex chat client, allowing for more specific error details and response context when operations fail. SimplexClientError Bases: Exception Exception raised for client-level errors in SimplexClient. Used for connection, transport, and general client operation errors. Source code in simplex_python/client_errors.py 34 35 36 37 38 39 40 41 class SimplexClientError ( Exception ): \"\"\" Exception raised for client-level errors in SimplexClient. Used for connection, transport, and general client operation errors. \"\"\" pass SimplexCommandError Bases: Exception Exception raised for errors in SimplexClient command execution. Provides details about the specific error and includes the original response for further inspection when available. Source code in simplex_python/client_errors.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class SimplexCommandError ( Exception ): \"\"\" Exception raised for errors in SimplexClient command execution. Provides details about the specific error and includes the original response for further inspection when available. \"\"\" def __init__ ( self , message : str , response : Optional [ CommandResponse ] = None ): \"\"\" Initialize a new SimplexCommandError. Args: message: Human-readable error description response: Optional original response object that triggered the error \"\"\" self . message = message self . response = response super () . __init__ ( message ) __init__ ( message : str , response : Optional [ CommandResponse ] = None ) Initialize a new SimplexCommandError. Parameters: Name Type Description Default message str Human-readable error description required response Optional [ CommandResponse ] Optional original response object that triggered the error None Source code in simplex_python/client_errors.py 21 22 23 24 25 26 27 28 29 30 31 def __init__ ( self , message : str , response : Optional [ CommandResponse ] = None ): \"\"\" Initialize a new SimplexCommandError. Args: message: Human-readable error description response: Optional original response object that triggered the error \"\"\" self . message = message self . response = response super () . __init__ ( message ) SimplexConnectionError Bases: SimplexClientError Exception raised for connection errors in SimplexClient. Provides detailed information about connection issues, including suggestions for common problems like server not running. Source code in simplex_python/client_errors.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class SimplexConnectionError ( SimplexClientError ): \"\"\" Exception raised for connection errors in SimplexClient. Provides detailed information about connection issues, including suggestions for common problems like server not running. \"\"\" def __init__ ( self , message : str , url : str , original_error : Optional [ Exception ] = None ): \"\"\" Initialize a new SimplexConnectionError. Args: message: Human-readable error description url: The URL that failed to connect original_error: The original exception that caused the connection failure \"\"\" self . url = url self . original_error = original_error # Build a detailed error message with helpful suggestions detailed_message = f \"Failed to connect to SimpleX server at { url } : { message } \" # Add common troubleshooting tips detailed_message += \" \\n\\n Possible causes:\" detailed_message += \" \\n - SimpleX Chat server is not running at the specified address and port\" detailed_message += \" \\n - Network connectivity issues\" detailed_message += \" \\n - Incorrect host or port in the URL\" detailed_message += \" \\n\\n Troubleshooting steps:\" detailed_message += \" \\n 1. Verify the SimpleX Chat server is running\" detailed_message += \" \\n 2. Check the host and port in your connection URL\" detailed_message += \" \\n 3. Ensure there are no firewall or network restrictions\" if original_error : detailed_message += f \" \\n\\n Original error: { original_error } \" super () . __init__ ( detailed_message ) __init__ ( message : str , url : str , original_error : Optional [ Exception ] = None ) Initialize a new SimplexConnectionError. Parameters: Name Type Description Default message str Human-readable error description required url str The URL that failed to connect required original_error Optional [ Exception ] The original exception that caused the connection failure None Source code in simplex_python/client_errors.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def __init__ ( self , message : str , url : str , original_error : Optional [ Exception ] = None ): \"\"\" Initialize a new SimplexConnectionError. Args: message: Human-readable error description url: The URL that failed to connect original_error: The original exception that caused the connection failure \"\"\" self . url = url self . original_error = original_error # Build a detailed error message with helpful suggestions detailed_message = f \"Failed to connect to SimpleX server at { url } : { message } \" # Add common troubleshooting tips detailed_message += \" \\n\\n Possible causes:\" detailed_message += \" \\n - SimpleX Chat server is not running at the specified address and port\" detailed_message += \" \\n - Network connectivity issues\" detailed_message += \" \\n - Incorrect host or port in the URL\" detailed_message += \" \\n\\n Troubleshooting steps:\" detailed_message += \" \\n 1. Verify the SimpleX Chat server is running\" detailed_message += \" \\n 2. Check the host and port in your connection URL\" detailed_message += \" \\n 3. Ensure there are no firewall or network restrictions\" if original_error : detailed_message += f \" \\n\\n Original error: { original_error } \" super () . __init__ ( detailed_message )","title":"Client"},{"location":"api/client/#client-api","text":"The Client API provides the main entry point for interacting with the SimpleX Chat server.","title":"Client API"},{"location":"api/client/#simplexclient","text":"","title":"SimplexClient"},{"location":"api/client/#simplex_python.client.SimplexClient","text":"High-level async client for the Simplex chat protocol with domain-specific clients. Example usage async with SimplexClient(server_or_url) as client: # User operations user = await client.users.get_active() # Group operations group = await client.groups.create(\"Project Team\") # Chat operations await client.chats.send_message(456, \"Hello, world!\") # File operations await client.files.set_files_folder(\"/path/to/downloads\") # Database operations await client.database.export_archive(\"/path/to/backup.simplex\") # Connection operations await client.connections.accept_contact(123) # Listen for events async for event in client.events(): handle_event(event) Source code in simplex_python/client.pyclass SimplexClient : \"\"\" High-level async client for the Simplex chat protocol with domain-specific clients. Example usage: async with SimplexClient(server_or_url) as client: # User operations user = await client.users.get_active() # Group operations group = await client.groups.create(\"Project Team\") # Chat operations await client.chats.send_message(456, \"Hello, world!\") # File operations await client.files.set_files_folder(\"/path/to/downloads\") # Database operations await client.database.export_archive(\"/path/to/backup.simplex\") # Connection operations await client.connections.accept_contact(123) # Listen for events async for event in client.events(): handle_event(event) \"\"\" def __init__ ( self , server : Union [ ChatServer , str ], timeout : float = 10.0 , qsize : int = 100 ): \"\"\" Args: server: ChatServer object or WebSocket URL to connect to. timeout: Connection and command timeout in seconds. qsize: Max size of the event queue. \"\"\" self . _server = server self . _timeout = timeout self . _qsize = qsize self . _transport : Optional [ ChatTransport ] = None self . _event_q : Optional [ ABQueue [ CommandResponse ]] = None self . _pending : OrderedDict [ str , asyncio . Future ] = OrderedDict () self . _recv_task : Optional [ asyncio . Task ] = None self . _connected = False self . _client_corr_id = 0 # Sequential ID counter # Lazy-loaded domain-specific client instances self . _users_client = None self . _groups_client = None self . _chats_client = None self . _files_client = None self . _database_client = None self . _connections_client = None async def __aenter__ ( self ) -> \"SimplexClient\" : await self . connect () return self async def __aexit__ ( self , exc_type , exc , tb ): await self . disconnect () async def connect ( self ) -> None : \"\"\"Establish a connection to the chat server.\"\"\" if self . _connected : return try : self . _transport = await ChatTransport . connect ( self . _server , timeout = self . _timeout , qsize = self . _qsize ) self . _event_q = ABQueue [ CommandResponse ]( self . _qsize ) self . _recv_task = asyncio . create_task ( self . _recv_loop ()) self . _connected = True logger . info ( \"Connected to chat server\" ) except OSError as e : # This is likely a connection error - provide helpful information if \"Connect call failed\" in str ( e ): raise SimplexConnectionError ( \"Connection refused\" , self . _server , e ) elif \"Name or service not known\" in str ( e ): raise SimplexConnectionError ( \"Host not found\" , self . _server , e ) else : raise SimplexConnectionError ( \"Connection error\" , self . _server , e ) except Exception as e : # For other errors, still use our custom error but with the original exception raise SimplexConnectionError ( \"Unexpected error while connecting\" , self . _server , e ) async def disconnect ( self ) -> None : \"\"\"Disconnect from the chat server and clean up resources.\"\"\" if not self . _connected : return self . _connected = False if self . _recv_task : self . _recv_task . cancel () with contextlib . suppress ( asyncio . CancelledError ): await self . _recv_task if self . _transport : await self . _transport . close () if self . _event_q : await self . _event_q . close () self . _pending . clear () logger . info ( \"Disconnected from chat server\" ) async def send_command ( self , cmd : Union [ SimplexCommand , Dict [ str , Any ]], expect_response : bool = True , ) -> Optional [ CommandResponse ]: \"\"\" Send a command to the chat server and optionally await a response. Args: cmd: The command object to send (SimplexCommand or compatible dict). expect_response: If True, await and return the response matching the corr_id. Returns: The response data, or None if not expecting a response. Raises: SimplexClientError: If not connected or timeout waiting for response. SimplexCommandError: If the command results in an error response. \"\"\" if not self . _transport or not self . _connected : raise SimplexClientError ( \"Not connected to chat server. Use `async with SimplexClient(...)`\" ) # Generate sequential numeric ID self . _client_corr_id += 1 corr_id = str ( self . _client_corr_id ) logger . debug ( f \"Generated correlation ID: { corr_id } \" ) # Create a command string using the command's to_cmd_string method if hasattr ( cmd , \"to_cmd_string\" ): cmd_str = cmd . to_cmd_string () else : cmd_str = str ( cmd ) logger . debug ( f \"Sending command: { cmd_str } \" ) # Create a ChatSrvRequest with the correlation ID and command string request = ChatSrvRequest ( corr_id = corr_id , cmd = cmd_str ) if expect_response : fut = asyncio . get_running_loop () . create_future () self . _pending [ corr_id ] = fut await self . _transport . write ( request ) if expect_response : try : raw_resp = await asyncio . wait_for ( fut , self . _timeout ) # Handle error responses if raw_resp . get ( \"type\" ) == \"chatCmdError\" : error_info = raw_resp . get ( \"chatError\" , {}) error_type = error_info . get ( \"type\" , \"unknown\" ) print ( \"ERROR: \" , error_info ) # Provide more specific error information for store errors if error_type == \"errorStore\" and isinstance ( error_info . get ( \"storeError\" ), dict ): store_error = error_info . get ( \"storeError\" , {}) store_error_type = store_error . get ( \"type\" ) # Convert raw response to a StoreErrorType for enhanced detection from .responses.base import StoreErrorType store_error_obj = StoreErrorType ( type = \"errorStore\" , storeError = store_error ) # For certain error types, return a response object instead of raising an exception # This allows domain-specific clients to handle these errors in a custom way if ( store_error_obj . is_contact_link_not_found_error () or store_error_obj . is_duplicate_contact_link_error () ): logger . debug ( f \"Returning store error as response: { store_error_type } \" ) return store_error_obj # Check for specific store error types and provide helpful suggestions if store_error_obj . is_contact_link_not_found_error (): error_msg = \"Command error: No chat address exists. Create one first with client.users.create_profile_address()\" elif store_error_obj . is_duplicate_contact_link_error (): error_msg = \"Command error: Chat address already exists. Use client.users.show_profile_address() to view it\" elif store_error_type : error_msg = ( f \"Command error: { error_type } - { store_error_type } \" ) else : error_msg = f \"Command error: { error_type } \" elif error_type == \"error\" : error_msg = f \"ChatError: { error_info [ 'errorType' ][ 'type' ] } \" else : error_msg = f \"Command error: { error_type } \" raise SimplexCommandError ( error_msg , raw_resp ) # Use ResponseFactory to create the appropriate response object typed_resp = ResponseFactory . create ( raw_resp ) return typed_resp except asyncio . TimeoutError : error_msg = f \"Timeout waiting for response to command: { cmd_str } \" raise SimplexClientError ( error_msg ) finally : self . _pending . pop ( corr_id , None ) return None async def _recv_loop ( self ): \"\"\"Background task that processes incoming messages from the transport.\"\"\" assert self . _transport is not None and self . _event_q is not None try : async for resp in self . _transport : # Extract the correlation ID and response data resp_corr_id = getattr ( resp , \"corr_id\" , None ) resp_data = getattr ( resp , \"resp\" , resp ) logger . debug ( f \"Received response with correlation ID: { resp_corr_id } \" ) # If response has a correlation ID and matches a pending request if resp_corr_id and resp_corr_id in self . _pending : fut = self . _pending [ resp_corr_id ] if not fut . done (): logger . debug ( f \"Resolving future for correlation ID: { resp_corr_id } \" ) fut . set_result ( resp_data ) else : # No matching future found, treat as an event logger . debug ( \"No matching future found, enqueuing as event\" ) await self . _event_q . enqueue ( resp_data ) except Exception as e : logger . exception ( f \"Exception in recv_loop: { e } \" ) self . _connected = False async def events ( self ) -> AsyncGenerator [ CommandResponse , None ]: \"\"\" Async generator yielding server events (responses not matched to a request). Usage: async for event in client.events(): # Process event \"\"\" if not self . _event_q or not self . _connected : raise SimplexClientError ( \"Not connected to chat server\" ) while self . _connected : try : evt = await self . _event_q . dequeue () if evt : yield evt except Exception as e : logger . error ( f \"Error in events generator: { e } \" ) if not self . _connected : break @property def connected ( self ) -> bool : \"\"\"Whether the client is currently connected.\"\"\" return self . _connected @property def users ( self ) -> \"UsersClient\" : \"\"\"Access user-related operations with a fluent API.\"\"\" if self . _users_client is None : from .clients.users import UsersClient self . _users_client = UsersClient ( self ) return self . _users_client @property def groups ( self ) -> \"GroupsClient\" : \"\"\"Access group-related operations with a fluent API.\"\"\" if self . _groups_client is None : from .clients.groups import GroupsClient self . _groups_client = GroupsClient ( self ) return self . _groups_client @property def chats ( self ) -> \"ChatsClient\" : \"\"\"Access chat-related operations with a fluent API.\"\"\" if self . _chats_client is None : from .clients.chats import ChatsClient self . _chats_client = ChatsClient ( self ) return self . _chats_client @property def files ( self ) -> \"FilesClient\" : \"\"\"Access file-related operations with a fluent API.\"\"\" if self . _files_client is None : from .clients.files import FilesClient self . _files_client = FilesClient ( self ) return self . _files_client @property def database ( self ) -> \"DatabaseClient\" : \"\"\"Access database-related operations with a fluent API.\"\"\" if self . _database_client is None : from .clients.database import DatabaseClient self . _database_client = DatabaseClient ( self ) return self . _database_client @property def connections ( self ) -> \"ConnectionsClient\" : \"\"\"Access connection-related operations with a fluent API.\"\"\" if self . _connections_client is None : from .clients.connections import ConnectionsClient self . _connections_client = ConnectionsClient ( self ) return self . _connections_client","title":"SimplexClient"},{"location":"api/client/#simplex_python.client.SimplexClient.chats","text":"Access chat-related operations with a fluent API.","title":"chats"},{"location":"api/client/#simplex_python.client.SimplexClient.connected","text":"Whether the client is currently connected.","title":"connected"},{"location":"api/client/#simplex_python.client.SimplexClient.connections","text":"Access connection-related operations with a fluent API.","title":"connections"},{"location":"api/client/#simplex_python.client.SimplexClient.database","text":"Access database-related operations with a fluent API.","title":"database"},{"location":"api/client/#simplex_python.client.SimplexClient.files","text":"Access file-related operations with a fluent API.","title":"files"},{"location":"api/client/#simplex_python.client.SimplexClient.groups","text":"Access group-related operations with a fluent API.","title":"groups"},{"location":"api/client/#simplex_python.client.SimplexClient.users","text":"Access user-related operations with a fluent API.","title":"users"},{"location":"api/client/#simplex_python.client.SimplexClient.__init__","text":"Parameters: Name Type Description Default server Union [ ChatServer , str ] ChatServer object or WebSocket URL to connect to. required timeout float Connection and command timeout in seconds. 10.0 qsize int Max size of the event queue. 100 Source code in simplex_python/client.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def __init__ ( self , server : Union [ ChatServer , str ], timeout : float = 10.0 , qsize : int = 100 ): \"\"\" Args: server: ChatServer object or WebSocket URL to connect to. timeout: Connection and command timeout in seconds. qsize: Max size of the event queue. \"\"\" self . _server = server self . _timeout = timeout self . _qsize = qsize self . _transport : Optional [ ChatTransport ] = None self . _event_q : Optional [ ABQueue [ CommandResponse ]] = None self . _pending : OrderedDict [ str , asyncio . Future ] = OrderedDict () self . _recv_task : Optional [ asyncio . Task ] = None self . _connected = False self . _client_corr_id = 0 # Sequential ID counter # Lazy-loaded domain-specific client instances self . _users_client = None self . _groups_client = None self . _chats_client = None self . _files_client = None self . _database_client = None self . _connections_client = None","title":"__init__"},{"location":"api/client/#simplex_python.client.SimplexClient.connect","text":"Establish a connection to the chat server. Source code in simplex_python/client.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 async def connect ( self ) -> None : \"\"\"Establish a connection to the chat server.\"\"\" if self . _connected : return try : self . _transport = await ChatTransport . connect ( self . _server , timeout = self . _timeout , qsize = self . _qsize ) self . _event_q = ABQueue [ CommandResponse ]( self . _qsize ) self . _recv_task = asyncio . create_task ( self . _recv_loop ()) self . _connected = True logger . info ( \"Connected to chat server\" ) except OSError as e : # This is likely a connection error - provide helpful information if \"Connect call failed\" in str ( e ): raise SimplexConnectionError ( \"Connection refused\" , self . _server , e ) elif \"Name or service not known\" in str ( e ): raise SimplexConnectionError ( \"Host not found\" , self . _server , e ) else : raise SimplexConnectionError ( \"Connection error\" , self . _server , e ) except Exception as e : # For other errors, still use our custom error but with the original exception raise SimplexConnectionError ( \"Unexpected error while connecting\" , self . _server , e )","title":"connect"},{"location":"api/client/#simplex_python.client.SimplexClient.disconnect","text":"Disconnect from the chat server and clean up resources. Source code in simplex_python/client.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 async def disconnect ( self ) -> None : \"\"\"Disconnect from the chat server and clean up resources.\"\"\" if not self . _connected : return self . _connected = False if self . _recv_task : self . _recv_task . cancel () with contextlib . suppress ( asyncio . CancelledError ): await self . _recv_task if self . _transport : await self . _transport . close () if self . _event_q : await self . _event_q . close () self . _pending . clear () logger . info ( \"Disconnected from chat server\" )","title":"disconnect"},{"location":"api/client/#simplex_python.client.SimplexClient.events","text":"Async generator yielding server events (responses not matched to a request). Usage async for event in client.events(): # Process event Source code in simplex_python/client.py 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 async def events ( self ) -> AsyncGenerator [ CommandResponse , None ]: \"\"\" Async generator yielding server events (responses not matched to a request). Usage: async for event in client.events(): # Process event \"\"\" if not self . _event_q or not self . _connected : raise SimplexClientError ( \"Not connected to chat server\" ) while self . _connected : try : evt = await self . _event_q . dequeue () if evt : yield evt except Exception as e : logger . error ( f \"Error in events generator: { e } \" ) if not self . _connected : break","title":"events"},{"location":"api/client/#simplex_python.client.SimplexClient.send_command","text":"Send a command to the chat server and optionally await a response. Parameters: Name Type Description Default cmd Union [ SimplexCommand , Dict [ str , Any ]] The command object to send (SimplexCommand or compatible dict). required expect_response bool If True, await and return the response matching the corr_id. True Returns: Type Description Optional [ CommandResponse ] The response data, or None if not expecting a response. Raises: Type Description SimplexClientError If not connected or timeout waiting for response. SimplexCommandError If the command results in an error response. Source code in simplex_python/client.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 async def send_command ( self , cmd : Union [ SimplexCommand , Dict [ str , Any ]], expect_response : bool = True , ) -> Optional [ CommandResponse ]: \"\"\" Send a command to the chat server and optionally await a response. Args: cmd: The command object to send (SimplexCommand or compatible dict). expect_response: If True, await and return the response matching the corr_id. Returns: The response data, or None if not expecting a response. Raises: SimplexClientError: If not connected or timeout waiting for response. SimplexCommandError: If the command results in an error response. \"\"\" if not self . _transport or not self . _connected : raise SimplexClientError ( \"Not connected to chat server. Use `async with SimplexClient(...)`\" ) # Generate sequential numeric ID self . _client_corr_id += 1 corr_id = str ( self . _client_corr_id ) logger . debug ( f \"Generated correlation ID: { corr_id } \" ) # Create a command string using the command's to_cmd_string method if hasattr ( cmd , \"to_cmd_string\" ): cmd_str = cmd . to_cmd_string () else : cmd_str = str ( cmd ) logger . debug ( f \"Sending command: { cmd_str } \" ) # Create a ChatSrvRequest with the correlation ID and command string request = ChatSrvRequest ( corr_id = corr_id , cmd = cmd_str ) if expect_response : fut = asyncio . get_running_loop () . create_future () self . _pending [ corr_id ] = fut await self . _transport . write ( request ) if expect_response : try : raw_resp = await asyncio . wait_for ( fut , self . _timeout ) # Handle error responses if raw_resp . get ( \"type\" ) == \"chatCmdError\" : error_info = raw_resp . get ( \"chatError\" , {}) error_type = error_info . get ( \"type\" , \"unknown\" ) print ( \"ERROR: \" , error_info ) # Provide more specific error information for store errors if error_type == \"errorStore\" and isinstance ( error_info . get ( \"storeError\" ), dict ): store_error = error_info . get ( \"storeError\" , {}) store_error_type = store_error . get ( \"type\" ) # Convert raw response to a StoreErrorType for enhanced detection from .responses.base import StoreErrorType store_error_obj = StoreErrorType ( type = \"errorStore\" , storeError = store_error ) # For certain error types, return a response object instead of raising an exception # This allows domain-specific clients to handle these errors in a custom way if ( store_error_obj . is_contact_link_not_found_error () or store_error_obj . is_duplicate_contact_link_error () ): logger . debug ( f \"Returning store error as response: { store_error_type } \" ) return store_error_obj # Check for specific store error types and provide helpful suggestions if store_error_obj . is_contact_link_not_found_error (): error_msg = \"Command error: No chat address exists. Create one first with client.users.create_profile_address()\" elif store_error_obj . is_duplicate_contact_link_error (): error_msg = \"Command error: Chat address already exists. Use client.users.show_profile_address() to view it\" elif store_error_type : error_msg = ( f \"Command error: { error_type } - { store_error_type } \" ) else : error_msg = f \"Command error: { error_type } \" elif error_type == \"error\" : error_msg = f \"ChatError: { error_info [ 'errorType' ][ 'type' ] } \" else : error_msg = f \"Command error: { error_type } \" raise SimplexCommandError ( error_msg , raw_resp ) # Use ResponseFactory to create the appropriate response object typed_resp = ResponseFactory . create ( raw_resp ) return typed_resp except asyncio . TimeoutError : error_msg = f \"Timeout waiting for response to command: { cmd_str } \" raise SimplexClientError ( error_msg ) finally : self . _pending . pop ( corr_id , None ) return None","title":"send_command"},{"location":"api/client/#chattransport","text":"The transport layer handles the low-level connection details for communication with the SimpleX server.","title":"ChatTransport"},{"location":"api/client/#simplex_python.transport.ChatTransport","text":"Bases: Transport [ ChatSrvRequest , ChatSrvResponse ] High-level transport abstraction for Simplex chat protocol. Wraps a WSTransport and provides protocol-aware send/receive methods. Uses ChatCommand and CommandResponse for type safety. Source code in simplex_python/transport.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 class ChatTransport ( Transport [ ChatSrvRequest , ChatSrvResponse ]): \"\"\"High-level transport abstraction for Simplex chat protocol. Wraps a WSTransport and provides protocol-aware send/receive methods. Uses ChatCommand and CommandResponse for type safety. \"\"\" def __init__ ( self , ws_transport : WSTransport , timeout : float , qsize : int ): super () . __init__ ( qsize ) self . _ws = ws_transport self . timeout = timeout @classmethod async def connect ( cls , server : ChatServer | str , timeout : float = 10.0 , qsize : int = 100 ) -> \"ChatTransport\" : \"\"\"Establish a connection to the given ChatServer or URL.\"\"\" if isinstance ( server , str ): url = server else : url = ( f \"ws:// { server . host } : { server . port } \" if server . port else f \"ws:// { server . host } \" ) ws = await WSTransport . connect ( url , timeout = timeout , qsize = qsize ) return cls ( ws , timeout , qsize ) async def close ( self ) -> None : await self . _ws . close () await self . queue . close () async def write ( self , req : ChatSrvRequest ) -> None : \"\"\" Serialize and send the command envelope. Args: req: A ChatSrvRequest with corrId and cmd \"\"\" # Convert to JSON and send data = json . dumps ({ \"corrId\" : req . corr_id , \"cmd\" : req . cmd }) # print(f\"[DEBUG] Sending command envelope: {data}\") await self . _ws . write ( data ) async def read ( self ) -> ChatSrvResponse : # Deserialize response as needed msg = await self . _ws . read () # print(f\"[DEBUG] Received raw message: {msg}\") if isinstance ( msg , bytes ): msg = msg . decode ( \"utf-8\" ) obj = json . loads ( msg ) # Create the response object with proper typing corr_id = obj . get ( \"corrId\" ) resp_data = obj . get ( \"resp\" ) # Create a proper ChatSrvResponse object return ChatSrvResponse ( corr_id = corr_id , resp = resp_data ) async def __anext__ ( self ): return await self . read ()","title":"ChatTransport"},{"location":"api/client/#simplex_python.transport.ChatTransport.connect","text":"Establish a connection to the given ChatServer or URL. Source code in simplex_python/transport.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 @classmethod async def connect ( cls , server : ChatServer | str , timeout : float = 10.0 , qsize : int = 100 ) -> \"ChatTransport\" : \"\"\"Establish a connection to the given ChatServer or URL.\"\"\" if isinstance ( server , str ): url = server else : url = ( f \"ws:// { server . host } : { server . port } \" if server . port else f \"ws:// { server . host } \" ) ws = await WSTransport . connect ( url , timeout = timeout , qsize = qsize ) return cls ( ws , timeout , qsize )","title":"connect"},{"location":"api/client/#simplex_python.transport.ChatTransport.write","text":"Serialize and send the command envelope. Args: req: A ChatSrvRequest with corrId and cmd Source code in simplex_python/transport.py 205 206 207 208 209 210 211 212 213 214 async def write ( self , req : ChatSrvRequest ) -> None : \"\"\" Serialize and send the command envelope. Args: req: A ChatSrvRequest with corrId and cmd \"\"\" # Convert to JSON and send data = json . dumps ({ \"corrId\" : req . corr_id , \"cmd\" : req . cmd }) # print(f\"[DEBUG] Sending command envelope: {data}\") await self . _ws . write ( data )","title":"write"},{"location":"api/client/#error-types","text":"","title":"Error Types"},{"location":"api/client/#simplex_python.client_errors","text":"Error handling for the Simplex chat client. This module provides structured error handling for the Simplex chat client, allowing for more specific error details and response context when operations fail.","title":"client_errors"},{"location":"api/client/#simplex_python.client_errors.SimplexClientError","text":"Bases: Exception Exception raised for client-level errors in SimplexClient. Used for connection, transport, and general client operation errors. Source code in simplex_python/client_errors.py 34 35 36 37 38 39 40 41 class SimplexClientError ( Exception ): \"\"\" Exception raised for client-level errors in SimplexClient. Used for connection, transport, and general client operation errors. \"\"\" pass","title":"SimplexClientError"},{"location":"api/client/#simplex_python.client_errors.SimplexCommandError","text":"Bases: Exception Exception raised for errors in SimplexClient command execution. Provides details about the specific error and includes the original response for further inspection when available. Source code in simplex_python/client_errors.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class SimplexCommandError ( Exception ): \"\"\" Exception raised for errors in SimplexClient command execution. Provides details about the specific error and includes the original response for further inspection when available. \"\"\" def __init__ ( self , message : str , response : Optional [ CommandResponse ] = None ): \"\"\" Initialize a new SimplexCommandError. Args: message: Human-readable error description response: Optional original response object that triggered the error \"\"\" self . message = message self . response = response super () . __init__ ( message )","title":"SimplexCommandError"},{"location":"api/client/#simplex_python.client_errors.SimplexCommandError.__init__","text":"Initialize a new SimplexCommandError. Parameters: Name Type Description Default message str Human-readable error description required response Optional [ CommandResponse ] Optional original response object that triggered the error None Source code in simplex_python/client_errors.py 21 22 23 24 25 26 27 28 29 30 31 def __init__ ( self , message : str , response : Optional [ CommandResponse ] = None ): \"\"\" Initialize a new SimplexCommandError. Args: message: Human-readable error description response: Optional original response object that triggered the error \"\"\" self . message = message self . response = response super () . __init__ ( message )","title":"__init__"},{"location":"api/client/#simplex_python.client_errors.SimplexConnectionError","text":"Bases: SimplexClientError Exception raised for connection errors in SimplexClient. Provides detailed information about connection issues, including suggestions for common problems like server not running. Source code in simplex_python/client_errors.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class SimplexConnectionError ( SimplexClientError ): \"\"\" Exception raised for connection errors in SimplexClient. Provides detailed information about connection issues, including suggestions for common problems like server not running. \"\"\" def __init__ ( self , message : str , url : str , original_error : Optional [ Exception ] = None ): \"\"\" Initialize a new SimplexConnectionError. Args: message: Human-readable error description url: The URL that failed to connect original_error: The original exception that caused the connection failure \"\"\" self . url = url self . original_error = original_error # Build a detailed error message with helpful suggestions detailed_message = f \"Failed to connect to SimpleX server at { url } : { message } \" # Add common troubleshooting tips detailed_message += \" \\n\\n Possible causes:\" detailed_message += \" \\n - SimpleX Chat server is not running at the specified address and port\" detailed_message += \" \\n - Network connectivity issues\" detailed_message += \" \\n - Incorrect host or port in the URL\" detailed_message += \" \\n\\n Troubleshooting steps:\" detailed_message += \" \\n 1. Verify the SimpleX Chat server is running\" detailed_message += \" \\n 2. Check the host and port in your connection URL\" detailed_message += \" \\n 3. Ensure there are no firewall or network restrictions\" if original_error : detailed_message += f \" \\n\\n Original error: { original_error } \" super () . __init__ ( detailed_message )","title":"SimplexConnectionError"},{"location":"api/client/#simplex_python.client_errors.SimplexConnectionError.__init__","text":"Initialize a new SimplexConnectionError. Parameters: Name Type Description Default message str Human-readable error description required url str The URL that failed to connect required original_error Optional [ Exception ] The original exception that caused the connection failure None Source code in simplex_python/client_errors.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def __init__ ( self , message : str , url : str , original_error : Optional [ Exception ] = None ): \"\"\" Initialize a new SimplexConnectionError. Args: message: Human-readable error description url: The URL that failed to connect original_error: The original exception that caused the connection failure \"\"\" self . url = url self . original_error = original_error # Build a detailed error message with helpful suggestions detailed_message = f \"Failed to connect to SimpleX server at { url } : { message } \" # Add common troubleshooting tips detailed_message += \" \\n\\n Possible causes:\" detailed_message += \" \\n - SimpleX Chat server is not running at the specified address and port\" detailed_message += \" \\n - Network connectivity issues\" detailed_message += \" \\n - Incorrect host or port in the URL\" detailed_message += \" \\n\\n Troubleshooting steps:\" detailed_message += \" \\n 1. Verify the SimpleX Chat server is running\" detailed_message += \" \\n 2. Check the host and port in your connection URL\" detailed_message += \" \\n 3. Ensure there are no firewall or network restrictions\" if original_error : detailed_message += f \" \\n\\n Original error: { original_error } \" super () . __init__ ( detailed_message )","title":"__init__"},{"location":"api/users/","text":"Users API The Users API provides comprehensive functionality for managing user profiles, identities, and connections in the SimpleX Chat system. UsersClient The UsersClient class is accessible as a property of the main SimplexClient object via client.users . simplex_python.clients.users.UsersClient Client for user-related operations in SimplexClient. This client is accessed via the users property of SimplexClient and provides methods for managing user profiles and contact addresses. Source code in simplex_python/clients/users.pyclass UsersClient : \"\"\" Client for user-related operations in SimplexClient. This client is accessed via the `users` property of SimplexClient and provides methods for managing user profiles and contact addresses. \"\"\" def __init__ ( self , client : \"SimplexClient\" ): \"\"\" Args: client: The parent SimplexClient instance. \"\"\" self . _client = client async def get_active ( self , include_contact_link : bool = True ) -> Optional [ ActiveUserResponse ]: \"\"\" Get the currently active user profile. Args: include_contact_link: Whether to check and include the user's contact link if it exists (default: True) Returns: ActiveUserResponse containing the user profile object, or None if no active user exists. If include_contact_link is True and the user has a contact link, it will be included in the response. Raises: SimplexCommandError: If there was an error executing the command. \"\"\" cmd = ShowActiveUser ( type = \"showActiveUser\" ) resp = await self . _client . send_command ( cmd ) # If we got None back, it means there's no active user if resp is None : return None # Handle special case where we get a \"no active user\" error if hasattr ( resp , \"type\" ) and resp . type == \"chatCmdError\" : # Check if it's specifically the \"no active user\" error if ( hasattr ( resp , \"chatError\" ) and resp . chatError . get ( \"type\" ) == \"error\" and resp . chatError . get ( \"errorType\" , {}) . get ( \"type\" ) == \"noActiveUser\" ): return None # If we got back a proper ActiveUserResponse, process it if isinstance ( resp , ActiveUserResponse ): # If requested, try to get the contact link for the user if include_contact_link and \"contactLink\" not in resp . profile : try : # Check if the user has a contact link from ..commands.users import ShowMyAddress address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : # Update the profile to include the contact link resp . profile [ \"contactLink\" ] = contact_link # Also update the original user data for backward compatibility if \"profile\" in resp . user : resp . user [ \"profile\" ][ \"contactLink\" ] = contact_link except Exception as e : # Don't fail the whole operation if we can't get the contact link logger . debug ( f \"Failed to get contact link for active user: { e } \" ) return resp # If we received some other type, raise an error error_msg = f \"Failed to get active user: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) async def list_users ( self , include_contact_links : bool = False ) -> UsersListResponse : \"\"\" List all users in the SimpleX Chat system. This method retrieves information about all users configured in the system, including their profiles, unread counts, and active status. Args: include_contact_links: Whether to fetch and include contact links for each user (default: False). Note that enabling this option will switch to each user to fetch their contact link, which could be slower with many users. Returns: UsersListResponse containing a list of user items with detailed information. The response is iterable and supports indexing to access individual UserItem objects. If include_contact_links is True, each user's profile will include their contact link if available. Example: ```python # Get all users without contact links (faster) users = await client.users.list_users() # Get all users with their contact links (slower but more complete) users_with_links = await client.users.list_users(include_contact_links=True) # Print number of users print(f\"Found {len(users)} users\") # Iterate through users for user in users: print(f\"User: {user.display_name} (ID: {user.user_id})\") print(f\"Active: {user.active_user}\") print(f\"Unread messages: {user.unread_count}\") if 'contactLink' in user.profile: print(f\"Contact Link: {user.profile.get('contactLink')}\") # Access by index first_user = users[0] ``` Raises: SimplexCommandError: If there was an error executing the command. \"\"\" cmd = ListUsers ( type = \"listUsers\" ) resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = \"Failed to list users: No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper UsersListResponse, process it if isinstance ( resp , UsersListResponse ): # If requested, fetch contact links for each user if include_contact_links : # Remember the current active user ID to restore later current_active = await self . get_active ( include_contact_link = False ) current_active_id = current_active . user_id if current_active else None try : # Import here to avoid circular imports from ..commands.users import ShowMyAddress # For each user in the list, switch to them and get their contact link for user_item in resp : if user_item . user_id == current_active_id : # For the already active user, we can just get their contact link directly try : address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if ( \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ) ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : user_item . profile [ \"contactLink\" ] = contact_link if \"profile\" in user_item . user : user_item . user [ \"profile\" ][ \"contactLink\" ] = ( contact_link ) except Exception as e : logger . debug ( f \"Failed to get contact link for active user { user_item . display_name } : { e } \" ) else : # For other users, we need to switch to them first try : # Switch to this user await self . set_active ( user_item . user_id ) # Get their contact link address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if ( \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ) ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : user_item . profile [ \"contactLink\" ] = contact_link if \"profile\" in user_item . user : user_item . user [ \"profile\" ][ \"contactLink\" ] = ( contact_link ) except Exception as e : logger . debug ( f \"Failed to get contact link for user { user_item . display_name } : { e } \" ) # Restore the original active user if current_active_id is not None : await self . set_active ( current_active_id ) except Exception as e : logger . warning ( f \"Failed to include contact links for users: { e } \" ) # If we switch users but fail, try to restore the original active user if current_active_id is not None : try : await self . set_active ( current_active_id ) except Exception as restore_error : logger . error ( f \"Failed to restore original active user: { restore_error } \" ) return resp # If we received some other type, raise an error error_msg = f \"Failed to list users: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) async def set_active ( self , user_id : int , view_pwd : Optional [ str ] = None ) -> ActiveUserResponse : \"\"\" Set the active user. Changes the current active user in the SimpleX Chat system to the user with the specified ID. If the user is hidden, the view password must be provided. Args: user_id: The ID of the user to set as active view_pwd: Optional view password for hidden users Returns: ActiveUserResponse containing information about the newly activated user Example: ```python # Switch to user with ID 2 active_user = await client.users.set_active(2) print(f\"Switched to user: {active_user.display_name}\") # Switch to a hidden user active_user = await client.users.set_active(3, view_pwd=\"password123\") ``` Raises: SimplexCommandError: If there was an error executing the command or the user ID is invalid \"\"\" cmd = APISetActiveUser ( type = \"apiSetActiveUser\" , userId = user_id , viewPwd = view_pwd ) resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to set active user { user_id } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse, return it if isinstance ( resp , ActiveUserResponse ): return resp # If we received some other type, raise an error error_msg = f \"Failed to set active user { user_id } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) async def create_active_user ( self , display_name : str , full_name : str , same_servers : bool = True , past_timestamp : bool = False , create_profile_address : bool = True , ) -> ActiveUserResponse : \"\"\" Create a new user profile and set it as active. This method creates a new user with the specified profile information and sets it as the active user. If a user with the specified display name already exists, a SimplexCommandError will be raised with a userExists error type. Args: display_name: The display name for the new user full_name: The full name for the new user same_servers: Whether to use the same servers as existing users (default: True) past_timestamp: Whether to use a past timestamp for the user (default: False) create_profile_address: Whether to automatically create a profile address for the user (default: True) Returns: ActiveUserResponse containing information about the newly created user Example: ```python try: # Create a new user new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) print(f\"Created user: {new_user.display_name} (ID: {new_user.user_id})\") except SimplexCommandError as e: if hasattr(e, 'error_type') and e.error_type.get('type') == 'userExists': print(f\"User already exists: {e.error_type.get('contactName')}\") else: raise ``` Raises: SimplexCommandError: If there was an error creating the user, including if the user already exists \"\"\" # Create profile for the new user using our strongly-typed Profile class profile = Profile ( displayName = display_name , fullName = full_name ) # Create the command with the typed profile object # The profile is properly serialized by the command formatter # using the to_dict method we've defined cmd = CreateActiveUser ( type = \"createActiveUser\" , profile = profile , sameServers = same_servers , pastTimestamp = past_timestamp , ) # Send the command resp = await self . _client . send_command ( cmd ) print ( resp ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to create user { display_name } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse, store it if not isinstance ( resp , ActiveUserResponse ): # If we received some other type, raise an error error_msg = f \"Failed to create user { display_name } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) user_resp = resp # Create profile address if requested if create_profile_address : try : # First, create the contact address create_cmd = CreateMyAddress ( type = \"createMyAddress\" ) await self . _client . send_command ( create_cmd ) # Then, include it in the profile await self . set_profile_address ( enabled = True ) logger . info ( f \"Successfully created profile address for new user { display_name } \" ) except SimplexCommandError as e : # Log the error but don't fail the whole operation logger . warning ( f \"Failed to create profile address for user { display_name } : { e } \" ) # We don't re-raise the exception since the user was created successfully return user_resp async def set_profile_address ( self , enabled : bool = True , create_if_missing : bool = True ) -> Union [ UserProfileUpdatedResponse , UserProfileNoChangeResponse ]: \"\"\" Enable or disable the contact address in the active user's profile. When enabled, this creates a shareable contact address that others can use to connect with the user. The address will be included in the user's profile and can be shared with others. Args: enabled: Whether to enable (True) or disable (False) the profile address create_if_missing: Whether to create the contact address if it doesn't exist (default: True) Returns: UserProfileUpdatedResponse containing the updated profile information when there's a change, or UserProfileNoChangeResponse when there's no change to be made. Example: ```python # Enable profile address profile_update = await client.users.set_profile_address(enabled=True) if isinstance(profile_update, UserProfileUpdatedResponse): print(f\"Profile address enabled: {profile_update.toProfile.get('contactLink')}\") # Disable profile address profile_update = await client.users.set_profile_address(enabled=False) if isinstance(profile_update, UserProfileNoChangeResponse): print(\"No change needed to profile address\") ``` Raises: SimplexCommandError: If there was an error updating the profile \"\"\" # Create the command cmd = SetProfileAddress ( type = \"setProfileAddress\" , includeInProfile = enabled ) # Send the command resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : action = \"enable\" if enabled else \"disable\" error_msg = f \"Failed to { action } profile address: No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper response, return it if isinstance ( resp , ( UserProfileUpdatedResponse , UserProfileNoChangeResponse )): return resp # Special handling for store errors when working with profile addresses if isinstance ( resp , StoreErrorType ): if enabled : # When enabling: Handle both duplicate and not found cases if resp . is_duplicate_contact_link_error (): logger . info ( \"Profile address already exists, returning no change response\" ) return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) # When 'contact link not found' error happens, it means the user doesn't have one # Attempt to create it first if requested if resp . is_contact_link_not_found_error () and create_if_missing : try : # First, create the contact address logger . info ( \"Profile address not found, creating one\" ) create_cmd = CreateMyAddress ( type = \"createMyAddress\" ) await self . _client . send_command ( create_cmd ) # Then, try to include it in the profile again logger . info ( \"Retrying profile address inclusion\" ) return await self . set_profile_address ( enabled = True , create_if_missing = False ) except SimplexCommandError as e : # If we failed to create the address, include that in the error error_msg = f \"Failed to create profile address: { e } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) if resp . is_contact_link_not_found_error (): error_msg = \"Cannot enable profile address: User doesn't have a contact link\" logger . info ( error_msg ) # This is a valid error case, but we choose to create a UserProfileNoChangeResponse # to maintain consistency with how we handle other cases return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) else : # When disabling: We treat 'contact link not found' as a no-change situation # (can't disable what doesn't exist) if resp . is_contact_link_not_found_error (): logger . info ( \"Profile address doesn't exist, returning no change response\" ) return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) # If we received some other type, raise an error action = \"enable\" if enabled else \"disable\" error_msg = f \"Failed to { action } profile address: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) async def delete_user ( self , user_id : int , delete_smp_queues : bool = True , view_pwd : Optional [ str ] = None ) -> Union [ ActiveUserResponse , \"CmdOkResponse\" ]: \"\"\" Delete a user from the SimpleX Chat system. This permanently removes the user account and optionally its associated SMP queues. If the user is hidden, the view password must be provided. IMPORTANT: You cannot delete the currently active user. You must first switch to another user with set_active() before deleting a user. Attempting to delete the active user will result in a SimplexCommandError with 'cantDeleteActiveUser' error. Args: user_id: The ID of the user to delete delete_smp_queues: Whether to delete the user's SMP queues (default: True) view_pwd: Optional view password for hidden users Returns: ActiveUserResponse containing information about the new active user (if deletion caused a switch) or CmdOkResponse if the deletion was successful but no user switch occurred Example: ```python # Get current user before deletion to ensure we're not deleting the active user active_user = await client.users.get_active() # Only proceed if we're attempting to delete a different user if active_user.user_id != user_id_to_delete: result = await client.users.delete_user(user_id_to_delete) if isinstance(result, ActiveUserResponse): print(f\"Deleted user, now active user is: {result.display_name}\") else: print(\"User deleted successfully\") else: # Switch to another user first users = await client.users.list_users() for user in users: if user.user_id != active_user.user_id: await client.users.set_active(user.user_id) await client.users.delete_user(user_id_to_delete) break ``` Raises: SimplexCommandError: If there was an error executing the command (e.g., user ID is invalid) or if attempting to delete the currently active user. \"\"\" from ..responses.base import CmdOkResponse # Check if we're trying to delete the active user - this will fail with an error # but we can provide a better error message by checking first active_user = await self . get_active ( include_contact_link = False ) if active_user and active_user . user_id == user_id : error_msg = f \"Cannot delete the active user (ID: { user_id } ). Switch to a different user first with set_active().\" logger . error ( error_msg ) raise ValueError ( error_msg ) # Create the command cmd = APIDeleteUser ( type = \"apiDeleteUser\" , userId = user_id , delSMPQueues = delete_smp_queues , viewPwd = view_pwd ) # Send the command resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to delete user { user_id } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse or CmdOkResponse, return it if isinstance ( resp , ( ActiveUserResponse , CmdOkResponse )): return resp # If we received some other type, raise an error error_msg = f \"Failed to delete user { user_id } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) __init__ ( client : SimplexClient ) Parameters: Name Type Description Default client SimplexClient The parent SimplexClient instance. required Source code in simplex_python/clients/users.py 43 44 45 46 47 48 def __init__ ( self , client : \"SimplexClient\" ): \"\"\" Args: client: The parent SimplexClient instance. \"\"\" self . _client = client create_active_user ( display_name : str , full_name : str , same_servers : bool = True , past_timestamp : bool = False , create_profile_address : bool = True ) -> ActiveUserResponse async Create a new user profile and set it as active. This method creates a new user with the specified profile information and sets it as the active user. If a user with the specified display name already exists, a SimplexCommandError will be raised with a userExists error type. Parameters: Name Type Description Default display_name str The display name for the new user required full_name str The full name for the new user required same_servers bool Whether to use the same servers as existing users (default: True) True past_timestamp bool Whether to use a past timestamp for the user (default: False) False create_profile_address bool Whether to automatically create a profile address for the user (default: True) True Returns: Type Description ActiveUserResponse ActiveUserResponse containing information about the newly created user Example try: # Create a new user new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) print(f\"Created user: {new_user.display_name} (ID: {new_user.user_id})\") except SimplexCommandError as e: if hasattr(e, 'error_type') and e.error_type.get('type') == 'userExists': print(f\"User already exists: {e.error_type.get('contactName')}\") else: raise Raises: Type Description SimplexCommandError If there was an error creating the user, including if the user already exists Source code in simplex_python/clients/users.py 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 async def create_active_user ( self , display_name : str , full_name : str , same_servers : bool = True , past_timestamp : bool = False , create_profile_address : bool = True , ) -> ActiveUserResponse : \"\"\" Create a new user profile and set it as active. This method creates a new user with the specified profile information and sets it as the active user. If a user with the specified display name already exists, a SimplexCommandError will be raised with a userExists error type. Args: display_name: The display name for the new user full_name: The full name for the new user same_servers: Whether to use the same servers as existing users (default: True) past_timestamp: Whether to use a past timestamp for the user (default: False) create_profile_address: Whether to automatically create a profile address for the user (default: True) Returns: ActiveUserResponse containing information about the newly created user Example: ```python try: # Create a new user new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) print(f\"Created user: {new_user.display_name} (ID: {new_user.user_id})\") except SimplexCommandError as e: if hasattr(e, 'error_type') and e.error_type.get('type') == 'userExists': print(f\"User already exists: {e.error_type.get('contactName')}\") else: raise ``` Raises: SimplexCommandError: If there was an error creating the user, including if the user already exists \"\"\" # Create profile for the new user using our strongly-typed Profile class profile = Profile ( displayName = display_name , fullName = full_name ) # Create the command with the typed profile object # The profile is properly serialized by the command formatter # using the to_dict method we've defined cmd = CreateActiveUser ( type = \"createActiveUser\" , profile = profile , sameServers = same_servers , pastTimestamp = past_timestamp , ) # Send the command resp = await self . _client . send_command ( cmd ) print ( resp ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to create user { display_name } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse, store it if not isinstance ( resp , ActiveUserResponse ): # If we received some other type, raise an error error_msg = f \"Failed to create user { display_name } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) user_resp = resp # Create profile address if requested if create_profile_address : try : # First, create the contact address create_cmd = CreateMyAddress ( type = \"createMyAddress\" ) await self . _client . send_command ( create_cmd ) # Then, include it in the profile await self . set_profile_address ( enabled = True ) logger . info ( f \"Successfully created profile address for new user { display_name } \" ) except SimplexCommandError as e : # Log the error but don't fail the whole operation logger . warning ( f \"Failed to create profile address for user { display_name } : { e } \" ) # We don't re-raise the exception since the user was created successfully return user_resp delete_user ( user_id : int , delete_smp_queues : bool = True , view_pwd : Optional [ str ] = None ) -> Union [ ActiveUserResponse , CmdOkResponse ] async Delete a user from the SimpleX Chat system. This permanently removes the user account and optionally its associated SMP queues. If the user is hidden, the view password must be provided. IMPORTANT: You cannot delete the currently active user. You must first switch to another user with set_active() before deleting a user. Attempting to delete the active user will result in a SimplexCommandError with 'cantDeleteActiveUser' error. Parameters: Name Type Description Default user_id int The ID of the user to delete required delete_smp_queues bool Whether to delete the user's SMP queues (default: True) True view_pwd Optional [ str ] Optional view password for hidden users None Returns: Type Description Union [ ActiveUserResponse , CmdOkResponse ] ActiveUserResponse containing information about the new active user (if deletion caused a switch) Union [ ActiveUserResponse , CmdOkResponse ] or CmdOkResponse if the deletion was successful but no user switch occurred Example # Get current user before deletion to ensure we're not deleting the active user active_user = await client.users.get_active() # Only proceed if we're attempting to delete a different user if active_user.user_id != user_id_to_delete: result = await client.users.delete_user(user_id_to_delete) if isinstance(result, ActiveUserResponse): print(f\"Deleted user, now active user is: {result.display_name}\") else: print(\"User deleted successfully\") else: # Switch to another user first users = await client.users.list_users() for user in users: if user.user_id != active_user.user_id: await client.users.set_active(user.user_id) await client.users.delete_user(user_id_to_delete) break Raises: Type Description SimplexCommandError If there was an error executing the command (e.g., user ID is invalid) or if attempting to delete the currently active user. Source code in simplex_python/clients/users.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 async def delete_user ( self , user_id : int , delete_smp_queues : bool = True , view_pwd : Optional [ str ] = None ) -> Union [ ActiveUserResponse , \"CmdOkResponse\" ]: \"\"\" Delete a user from the SimpleX Chat system. This permanently removes the user account and optionally its associated SMP queues. If the user is hidden, the view password must be provided. IMPORTANT: You cannot delete the currently active user. You must first switch to another user with set_active() before deleting a user. Attempting to delete the active user will result in a SimplexCommandError with 'cantDeleteActiveUser' error. Args: user_id: The ID of the user to delete delete_smp_queues: Whether to delete the user's SMP queues (default: True) view_pwd: Optional view password for hidden users Returns: ActiveUserResponse containing information about the new active user (if deletion caused a switch) or CmdOkResponse if the deletion was successful but no user switch occurred Example: ```python # Get current user before deletion to ensure we're not deleting the active user active_user = await client.users.get_active() # Only proceed if we're attempting to delete a different user if active_user.user_id != user_id_to_delete: result = await client.users.delete_user(user_id_to_delete) if isinstance(result, ActiveUserResponse): print(f\"Deleted user, now active user is: {result.display_name}\") else: print(\"User deleted successfully\") else: # Switch to another user first users = await client.users.list_users() for user in users: if user.user_id != active_user.user_id: await client.users.set_active(user.user_id) await client.users.delete_user(user_id_to_delete) break ``` Raises: SimplexCommandError: If there was an error executing the command (e.g., user ID is invalid) or if attempting to delete the currently active user. \"\"\" from ..responses.base import CmdOkResponse # Check if we're trying to delete the active user - this will fail with an error # but we can provide a better error message by checking first active_user = await self . get_active ( include_contact_link = False ) if active_user and active_user . user_id == user_id : error_msg = f \"Cannot delete the active user (ID: { user_id } ). Switch to a different user first with set_active().\" logger . error ( error_msg ) raise ValueError ( error_msg ) # Create the command cmd = APIDeleteUser ( type = \"apiDeleteUser\" , userId = user_id , delSMPQueues = delete_smp_queues , viewPwd = view_pwd ) # Send the command resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to delete user { user_id } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse or CmdOkResponse, return it if isinstance ( resp , ( ActiveUserResponse , CmdOkResponse )): return resp # If we received some other type, raise an error error_msg = f \"Failed to delete user { user_id } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) get_active ( include_contact_link : bool = True ) -> Optional [ ActiveUserResponse ] async Get the currently active user profile. Parameters: Name Type Description Default include_contact_link bool Whether to check and include the user's contact link if it exists (default: True) True Returns: Type Description Optional [ ActiveUserResponse ] ActiveUserResponse containing the user profile object, or None if no active user exists. Optional [ ActiveUserResponse ] If include_contact_link is True and the user has a contact link, it will be included in the response. Raises: Type Description SimplexCommandError If there was an error executing the command. Source code in simplex_python/clients/users.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 async def get_active ( self , include_contact_link : bool = True ) -> Optional [ ActiveUserResponse ]: \"\"\" Get the currently active user profile. Args: include_contact_link: Whether to check and include the user's contact link if it exists (default: True) Returns: ActiveUserResponse containing the user profile object, or None if no active user exists. If include_contact_link is True and the user has a contact link, it will be included in the response. Raises: SimplexCommandError: If there was an error executing the command. \"\"\" cmd = ShowActiveUser ( type = \"showActiveUser\" ) resp = await self . _client . send_command ( cmd ) # If we got None back, it means there's no active user if resp is None : return None # Handle special case where we get a \"no active user\" error if hasattr ( resp , \"type\" ) and resp . type == \"chatCmdError\" : # Check if it's specifically the \"no active user\" error if ( hasattr ( resp , \"chatError\" ) and resp . chatError . get ( \"type\" ) == \"error\" and resp . chatError . get ( \"errorType\" , {}) . get ( \"type\" ) == \"noActiveUser\" ): return None # If we got back a proper ActiveUserResponse, process it if isinstance ( resp , ActiveUserResponse ): # If requested, try to get the contact link for the user if include_contact_link and \"contactLink\" not in resp . profile : try : # Check if the user has a contact link from ..commands.users import ShowMyAddress address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : # Update the profile to include the contact link resp . profile [ \"contactLink\" ] = contact_link # Also update the original user data for backward compatibility if \"profile\" in resp . user : resp . user [ \"profile\" ][ \"contactLink\" ] = contact_link except Exception as e : # Don't fail the whole operation if we can't get the contact link logger . debug ( f \"Failed to get contact link for active user: { e } \" ) return resp # If we received some other type, raise an error error_msg = f \"Failed to get active user: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) list_users ( include_contact_links : bool = False ) -> UsersListResponse async List all users in the SimpleX Chat system. This method retrieves information about all users configured in the system, including their profiles, unread counts, and active status. Parameters: Name Type Description Default include_contact_links bool Whether to fetch and include contact links for each user (default: False). Note that enabling this option will switch to each user to fetch their contact link, which could be slower with many users. False Returns: Type Description UsersListResponse UsersListResponse containing a list of user items with detailed information. UsersListResponse The response is iterable and supports indexing to access individual UserItem objects. UsersListResponse If include_contact_links is True, each user's profile will include their contact link if available. Example # Get all users without contact links (faster) users = await client.users.list_users() # Get all users with their contact links (slower but more complete) users_with_links = await client.users.list_users(include_contact_links=True) # Print number of users print(f\"Found {len(users)} users\") # Iterate through users for user in users: print(f\"User: {user.display_name} (ID: {user.user_id})\") print(f\"Active: {user.active_user}\") print(f\"Unread messages: {user.unread_count}\") if 'contactLink' in user.profile: print(f\"Contact Link: {user.profile.get('contactLink')}\") # Access by index first_user = users[0] Raises: Type Description SimplexCommandError If there was an error executing the command. Source code in simplex_python/clients/users.pyasync def list_users ( self , include_contact_links : bool = False ) -> UsersListResponse : \"\"\" List all users in the SimpleX Chat system. This method retrieves information about all users configured in the system, including their profiles, unread counts, and active status. Args: include_contact_links: Whether to fetch and include contact links for each user (default: False). Note that enabling this option will switch to each user to fetch their contact link, which could be slower with many users. Returns: UsersListResponse containing a list of user items with detailed information. The response is iterable and supports indexing to access individual UserItem objects. If include_contact_links is True, each user's profile will include their contact link if available. Example: ```python # Get all users without contact links (faster) users = await client.users.list_users() # Get all users with their contact links (slower but more complete) users_with_links = await client.users.list_users(include_contact_links=True) # Print number of users print(f\"Found {len(users)} users\") # Iterate through users for user in users: print(f\"User: {user.display_name} (ID: {user.user_id})\") print(f\"Active: {user.active_user}\") print(f\"Unread messages: {user.unread_count}\") if 'contactLink' in user.profile: print(f\"Contact Link: {user.profile.get('contactLink')}\") # Access by index first_user = users[0] ``` Raises: SimplexCommandError: If there was an error executing the command. \"\"\" cmd = ListUsers ( type = \"listUsers\" ) resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = \"Failed to list users: No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper UsersListResponse, process it if isinstance ( resp , UsersListResponse ): # If requested, fetch contact links for each user if include_contact_links : # Remember the current active user ID to restore later current_active = await self . get_active ( include_contact_link = False ) current_active_id = current_active . user_id if current_active else None try : # Import here to avoid circular imports from ..commands.users import ShowMyAddress # For each user in the list, switch to them and get their contact link for user_item in resp : if user_item . user_id == current_active_id : # For the already active user, we can just get their contact link directly try : address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if ( \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ) ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : user_item . profile [ \"contactLink\" ] = contact_link if \"profile\" in user_item . user : user_item . user [ \"profile\" ][ \"contactLink\" ] = ( contact_link ) except Exception as e : logger . debug ( f \"Failed to get contact link for active user { user_item . display_name } : { e } \" ) else : # For other users, we need to switch to them first try : # Switch to this user await self . set_active ( user_item . user_id ) # Get their contact link address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if ( \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ) ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : user_item . profile [ \"contactLink\" ] = contact_link if \"profile\" in user_item . user : user_item . user [ \"profile\" ][ \"contactLink\" ] = ( contact_link ) except Exception as e : logger . debug ( f \"Failed to get contact link for user { user_item . display_name } : { e } \" ) # Restore the original active user if current_active_id is not None : await self . set_active ( current_active_id ) except Exception as e : logger . warning ( f \"Failed to include contact links for users: { e } \" ) # If we switch users but fail, try to restore the original active user if current_active_id is not None : try : await self . set_active ( current_active_id ) except Exception as restore_error : logger . error ( f \"Failed to restore original active user: { restore_error } \" ) return resp # If we received some other type, raise an error error_msg = f \"Failed to list users: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) set_active ( user_id : int , view_pwd : Optional [ str ] = None ) -> ActiveUserResponse async Set the active user. Changes the current active user in the SimpleX Chat system to the user with the specified ID. If the user is hidden, the view password must be provided. Parameters: Name Type Description Default user_id int The ID of the user to set as active required view_pwd Optional [ str ] Optional view password for hidden users None Returns: Type Description ActiveUserResponse ActiveUserResponse containing information about the newly activated user Example # Switch to user with ID 2 active_user = await client.users.set_active(2) print(f\"Switched to user: {active_user.display_name}\") # Switch to a hidden user active_user = await client.users.set_active(3, view_pwd=\"password123\") Raises: Type Description SimplexCommandError If there was an error executing the command or the user ID is invalid Source code in simplex_python/clients/users.py 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 async def set_active ( self , user_id : int , view_pwd : Optional [ str ] = None ) -> ActiveUserResponse : \"\"\" Set the active user. Changes the current active user in the SimpleX Chat system to the user with the specified ID. If the user is hidden, the view password must be provided. Args: user_id: The ID of the user to set as active view_pwd: Optional view password for hidden users Returns: ActiveUserResponse containing information about the newly activated user Example: ```python # Switch to user with ID 2 active_user = await client.users.set_active(2) print(f\"Switched to user: {active_user.display_name}\") # Switch to a hidden user active_user = await client.users.set_active(3, view_pwd=\"password123\") ``` Raises: SimplexCommandError: If there was an error executing the command or the user ID is invalid \"\"\" cmd = APISetActiveUser ( type = \"apiSetActiveUser\" , userId = user_id , viewPwd = view_pwd ) resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to set active user { user_id } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse, return it if isinstance ( resp , ActiveUserResponse ): return resp # If we received some other type, raise an error error_msg = f \"Failed to set active user { user_id } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) set_profile_address ( enabled : bool = True , create_if_missing : bool = True ) -> Union [ UserProfileUpdatedResponse , UserProfileNoChangeResponse ] async Enable or disable the contact address in the active user's profile. When enabled, this creates a shareable contact address that others can use to connect with the user. The address will be included in the user's profile and can be shared with others. Parameters: Name Type Description Default enabled bool Whether to enable (True) or disable (False) the profile address True create_if_missing bool Whether to create the contact address if it doesn't exist (default: True) True Returns: Type Description Union [ UserProfileUpdatedResponse , UserProfileNoChangeResponse ] UserProfileUpdatedResponse containing the updated profile information when there's a change, Union [ UserProfileUpdatedResponse , UserProfileNoChangeResponse ] or UserProfileNoChangeResponse when there's no change to be made. Example # Enable profile address profile_update = await client.users.set_profile_address(enabled=True) if isinstance(profile_update, UserProfileUpdatedResponse): print(f\"Profile address enabled: {profile_update.toProfile.get('contactLink')}\") # Disable profile address profile_update = await client.users.set_profile_address(enabled=False) if isinstance(profile_update, UserProfileNoChangeResponse): print(\"No change needed to profile address\") Raises: Type Description SimplexCommandError If there was an error updating the profile Source code in simplex_python/clients/users.py 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 async def set_profile_address ( self , enabled : bool = True , create_if_missing : bool = True ) -> Union [ UserProfileUpdatedResponse , UserProfileNoChangeResponse ]: \"\"\" Enable or disable the contact address in the active user's profile. When enabled, this creates a shareable contact address that others can use to connect with the user. The address will be included in the user's profile and can be shared with others. Args: enabled: Whether to enable (True) or disable (False) the profile address create_if_missing: Whether to create the contact address if it doesn't exist (default: True) Returns: UserProfileUpdatedResponse containing the updated profile information when there's a change, or UserProfileNoChangeResponse when there's no change to be made. Example: ```python # Enable profile address profile_update = await client.users.set_profile_address(enabled=True) if isinstance(profile_update, UserProfileUpdatedResponse): print(f\"Profile address enabled: {profile_update.toProfile.get('contactLink')}\") # Disable profile address profile_update = await client.users.set_profile_address(enabled=False) if isinstance(profile_update, UserProfileNoChangeResponse): print(\"No change needed to profile address\") ``` Raises: SimplexCommandError: If there was an error updating the profile \"\"\" # Create the command cmd = SetProfileAddress ( type = \"setProfileAddress\" , includeInProfile = enabled ) # Send the command resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : action = \"enable\" if enabled else \"disable\" error_msg = f \"Failed to { action } profile address: No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper response, return it if isinstance ( resp , ( UserProfileUpdatedResponse , UserProfileNoChangeResponse )): return resp # Special handling for store errors when working with profile addresses if isinstance ( resp , StoreErrorType ): if enabled : # When enabling: Handle both duplicate and not found cases if resp . is_duplicate_contact_link_error (): logger . info ( \"Profile address already exists, returning no change response\" ) return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) # When 'contact link not found' error happens, it means the user doesn't have one # Attempt to create it first if requested if resp . is_contact_link_not_found_error () and create_if_missing : try : # First, create the contact address logger . info ( \"Profile address not found, creating one\" ) create_cmd = CreateMyAddress ( type = \"createMyAddress\" ) await self . _client . send_command ( create_cmd ) # Then, try to include it in the profile again logger . info ( \"Retrying profile address inclusion\" ) return await self . set_profile_address ( enabled = True , create_if_missing = False ) except SimplexCommandError as e : # If we failed to create the address, include that in the error error_msg = f \"Failed to create profile address: { e } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) if resp . is_contact_link_not_found_error (): error_msg = \"Cannot enable profile address: User doesn't have a contact link\" logger . info ( error_msg ) # This is a valid error case, but we choose to create a UserProfileNoChangeResponse # to maintain consistency with how we handle other cases return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) else : # When disabling: We treat 'contact link not found' as a no-change situation # (can't disable what doesn't exist) if resp . is_contact_link_not_found_error (): logger . info ( \"Profile address doesn't exist, returning no change response\" ) return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) # If we received some other type, raise an error action = \"enable\" if enabled else \"disable\" error_msg = f \"Failed to { action } profile address: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) User Commands User management commands are defined in the commands.users module. simplex_python.commands.users User and address-related command classes for the Simplex messaging system. This module defines the commands for managing users and addresses, including: - User management (creating, listing, activating, hiding, muting, etc.) - User profile operations - Address creation and management - Address auto-accept configuration All commands inherit from BaseCommand and provide a consistent interface for user-related operations in the Simplex system. APISetActiveUser dataclass Bases: BaseCommand Command to set the active user via API. Source code in simplex_python/commands/users.py 46 47 48 49 50 51 52 @dataclass ( kw_only = True ) class APISetActiveUser ( BaseCommand ): \"\"\"Command to set the active user via API.\"\"\" type : str = \"apiSetActiveUser\" userId : int viewPwd : Optional [ str ] = None APIDeleteUser dataclass Bases: BaseCommand Command to delete a user via API. Source code in simplex_python/commands/users.py 89 90 91 92 93 94 95 96 @dataclass ( kw_only = True ) class APIDeleteUser ( BaseCommand ): \"\"\"Command to delete a user via API.\"\"\" type : str = \"apiDeleteUser\" userId : int delSMPQueues : bool viewPwd : Optional [ str ] = None Response Types User-specific response types provide strongly typed access to server responses. simplex_python.responses.users User-related response types for the Simplex messaging system. This module defines response types for user-related operations, including: - User management (active users, profiles, settings) - Address management (creation, deletion, display) - Auto-accept configuration - Contact link management All responses follow a consistent pattern with the command classes they correspond to. ActiveUserResponse dataclass Bases: CommandResponse Response containing active user information. Source code in simplex_python/responses/users.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @dataclass class ActiveUserResponse ( CommandResponse ): \"\"\"Response containing active user information.\"\"\" # Store original user dict for backward compatibility user : Dict [ str , Any ] = field ( default_factory = dict ) # Directly expose common user properties for fluent API user_id : Optional [ int ] = None agent_user_id : Optional [ str ] = None local_display_name : Optional [ str ] = None profile : Dict [ str , Any ] = field ( default_factory = dict ) preferences : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"ActiveUserResponse\" : user_data = data . get ( \"user\" , {}) # Create the response with both the original user dict and extracted properties return cls ( type = \"activeUser\" , user = user_data , user_id = user_data . get ( \"userId\" ), agent_user_id = user_data . get ( \"agentUserId\" ), local_display_name = user_data . get ( \"localDisplayName\" ), profile = user_data . get ( \"profile\" , {}), preferences = user_data . get ( \"fullPreferences\" , {}), ) @property def display_name ( self ) -> Optional [ str ]: \"\"\"Get the user's display name from profile.\"\"\" return self . profile . get ( \"displayName\" ) if self . profile else None @property def full_name ( self ) -> Optional [ str ]: \"\"\"Get the user's full name from profile.\"\"\" return self . profile . get ( \"fullName\" ) if self . profile else None display_name : Optional [ str ] property Get the user's display name from profile. full_name : Optional [ str ] property Get the user's full name from profile. User dataclass User information returned in responses. Source code in simplex_python/responses/users.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 @dataclass class User : \"\"\"User information returned in responses.\"\"\" userId : int agentUserId : str userContactId : int localDisplayName : str profile : Dict [ str , Any ] activeUser : bool viewPwdHash : str = \"\" showNtfs : bool = True @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"User\" : return cls ( userId = data . get ( \"userId\" , 0 ), agentUserId = data . get ( \"agentUserId\" , \"\" ), userContactId = data . get ( \"userContactId\" , 0 ), localDisplayName = data . get ( \"localDisplayName\" , \"\" ), profile = data . get ( \"profile\" , {}), activeUser = data . get ( \"activeUser\" , False ), viewPwdHash = data . get ( \"viewPwdHash\" , \"\" ), showNtfs = data . get ( \"showNtfs\" , True ), ) UserContactLink dataclass User contact link information. Source code in simplex_python/responses/users.py 289 290 291 292 293 294 295 296 297 298 299 300 301 @dataclass class UserContactLink : \"\"\"User contact link information.\"\"\" connReqContact : str autoAccept : Optional [ Dict [ str , Any ]] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLink\" : return cls ( connReqContact = data . get ( \"connReqContact\" , \"\" ), autoAccept = data . get ( \"autoAccept\" ), ) UserContactLinkCreatedResponse dataclass Bases: CommandResponse Response when a user contact link is created. Source code in simplex_python/responses/users.py 193 194 195 196 197 198 199 200 201 202 203 204 205 @dataclass class UserContactLinkCreatedResponse ( CommandResponse ): \"\"\"Response when a user contact link is created.\"\"\" connReqContact : str = \"\" @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkCreatedResponse\" : return cls ( type = \"userContactLinkCreated\" , user = data . get ( \"user\" ), connReqContact = data . get ( \"connReqContact\" , \"\" ), ) UserContactLinkDeletedResponse dataclass Bases: CommandResponse Response when a user contact link is deleted. Source code in simplex_python/responses/users.py 208 209 210 211 212 213 214 @dataclass class UserContactLinkDeletedResponse ( CommandResponse ): \"\"\"Response when a user contact link is deleted.\"\"\" @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkDeletedResponse\" : return cls ( type = \"userContactLinkDeleted\" , user = data . get ( \"user\" )) UserContactLinkResponse dataclass Bases: CommandResponse Response containing a user's contact link (address). Source code in simplex_python/responses/users.py 178 179 180 181 182 183 184 185 186 187 188 189 190 @dataclass class UserContactLinkResponse ( CommandResponse ): \"\"\"Response containing a user's contact link (address).\"\"\" contactLink : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkResponse\" : return cls ( type = \"userContactLink\" , user = data . get ( \"user\" ), contactLink = data . get ( \"contactLink\" , {}), ) UserContactLinkSubErrorResponse dataclass Bases: CommandResponse Response when there's an error with a user contact link subscription. Source code in simplex_python/responses/users.py 248 249 250 251 252 253 254 255 256 @dataclass class UserContactLinkSubErrorResponse ( CommandResponse ): \"\"\"Response when there's an error with a user contact link subscription.\"\"\" chatError : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkSubErrorResponse\" : return cls ( type = \"userContactLinkSubError\" , chatError = data . get ( \"chatError\" , {})) UserContactLinkSubscribedResponse dataclass Bases: CommandResponse Response when a user contact link is subscribed to. Source code in simplex_python/responses/users.py 239 240 241 242 243 244 245 @dataclass class UserContactLinkSubscribedResponse ( CommandResponse ): \"\"\"Response when a user contact link is subscribed to.\"\"\" @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkSubscribedResponse\" : return cls ( type = \"userContactLinkSubscribed\" ) UserContactLinkUpdatedResponse dataclass Bases: CommandResponse Response when a user's contact link is updated. Source code in simplex_python/responses/users.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @dataclass class UserContactLinkUpdatedResponse ( CommandResponse ): \"\"\"Response when a user's contact link is updated.\"\"\" connReqContact : str = \"\" autoAccept : bool = False autoReply : Optional [ Dict [ str , Any ]] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkUpdatedResponse\" : return cls ( type = \"userContactLinkUpdated\" , user = data . get ( \"user\" ), connReqContact = data . get ( \"connReqContact\" , \"\" ), autoAccept = data . get ( \"autoAccept\" , False ), autoReply = data . get ( \"autoReply\" ), ) UserItem dataclass Individual user item from a users list response. Source code in simplex_python/responses/users.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 @dataclass class UserItem : \"\"\"Individual user item from a users list response.\"\"\" # Raw user dictionary user : Dict [ str , Any ] = field ( default_factory = dict ) # Direct access to common properties user_id : Optional [ int ] = None agent_user_id : Optional [ str ] = None local_display_name : Optional [ str ] = None profile : Dict [ str , Any ] = field ( default_factory = dict ) preferences : Dict [ str , Any ] = field ( default_factory = dict ) active_user : bool = False unread_count : int = 0 @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserItem\" : \"\"\"Create a UserItem from a dictionary.\"\"\" user_data = data . get ( \"user\" , {}) return cls ( user = user_data , user_id = user_data . get ( \"userId\" ), agent_user_id = user_data . get ( \"agentUserId\" ), local_display_name = user_data . get ( \"localDisplayName\" ), profile = user_data . get ( \"profile\" , {}), preferences = user_data . get ( \"fullPreferences\" , {}), active_user = user_data . get ( \"activeUser\" , False ), unread_count = data . get ( \"unreadCount\" , 0 ) ) @property def display_name ( self ) -> Optional [ str ]: \"\"\"Get the user's display name from profile.\"\"\" return self . profile . get ( \"displayName\" ) if self . profile else None @property def full_name ( self ) -> Optional [ str ]: \"\"\"Get the user's full name from profile.\"\"\" return self . profile . get ( \"fullName\" ) if self . profile else None display_name : Optional [ str ] property Get the user's display name from profile. full_name : Optional [ str ] property Get the user's full name from profile. from_dict ( data : Dict [ str , Any ]) -> UserItem classmethod Create a UserItem from a dictionary. Source code in simplex_python/responses/users.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserItem\" : \"\"\"Create a UserItem from a dictionary.\"\"\" user_data = data . get ( \"user\" , {}) return cls ( user = user_data , user_id = user_data . get ( \"userId\" ), agent_user_id = user_data . get ( \"agentUserId\" ), local_display_name = user_data . get ( \"localDisplayName\" ), profile = user_data . get ( \"profile\" , {}), preferences = user_data . get ( \"fullPreferences\" , {}), active_user = user_data . get ( \"activeUser\" , False ), unread_count = data . get ( \"unreadCount\" , 0 ) ) UserProfileNoChangeResponse dataclass Bases: CommandResponse Response when a profile update results in no change. Source code in simplex_python/responses/users.py 166 167 168 169 170 171 172 @dataclass class UserProfileNoChangeResponse ( CommandResponse ): \"\"\"Response when a profile update results in no change.\"\"\" @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserProfileNoChangeResponse\" : return cls ( type = \"userProfileNoChange\" , user = data . get ( \"user\" )) UserProfileResponse dataclass Bases: CommandResponse Response containing a user's profile. Source code in simplex_python/responses/users.py 136 137 138 139 140 141 142 143 144 145 146 @dataclass class UserProfileResponse ( CommandResponse ): \"\"\"Response containing a user's profile.\"\"\" profile : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserProfileResponse\" : return cls ( type = \"userProfile\" , user = data . get ( \"user\" ), profile = data . get ( \"profile\" , {}) ) UserProfileUpdatedResponse dataclass Bases: CommandResponse Response when a user's profile is updated. Source code in simplex_python/responses/users.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 @dataclass class UserProfileUpdatedResponse ( CommandResponse ): \"\"\"Response when a user's profile is updated.\"\"\" fromProfile : Dict [ str , Any ] = field ( default_factory = dict ) toProfile : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserProfileUpdatedResponse\" : return cls ( type = \"userProfileUpdated\" , user = data . get ( \"user\" ), fromProfile = data . get ( \"fromProfile\" , {}), toProfile = data . get ( \"toProfile\" , {}), ) UsersListResponse dataclass Bases: CommandResponse Response containing a list of users. Source code in simplex_python/responses/users.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 @dataclass class UsersListResponse ( CommandResponse ): \"\"\"Response containing a list of users.\"\"\" users : List [ Dict [ str , Any ]] = field ( default_factory = list ) # Internal representation of processed user items _user_items : List [ \"UserItem\" ] = field ( default_factory = list , repr = False ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UsersListResponse\" : raw_users = data . get ( \"users\" , []) response = cls ( type = \"usersList\" , users = raw_users ) # Process raw users into UserItem objects response . _user_items = [ UserItem . from_dict ( user_data ) for user_data in raw_users ] return response def __len__ ( self ) -> int : \"\"\"Return the number of users in the list.\"\"\" return len ( self . _user_items ) def __getitem__ ( self , index ) -> \"UserItem\" : \"\"\"Access user items by index.\"\"\" return self . _user_items [ index ] def __iter__ ( self ): \"\"\"Allow iteration over user items.\"\"\" return iter ( self . _user_items ) __getitem__ ( index ) -> UserItem Access user items by index. Source code in simplex_python/responses/users.py 84 85 86 def __getitem__ ( self , index ) -> \"UserItem\" : \"\"\"Access user items by index.\"\"\" return self . _user_items [ index ] __iter__ () Allow iteration over user items. Source code in simplex_python/responses/users.py 88 89 90 def __iter__ ( self ): \"\"\"Allow iteration over user items.\"\"\" return iter ( self . _user_items ) __len__ () -> int Return the number of users in the list. Source code in simplex_python/responses/users.py 80 81 82 def __len__ ( self ) -> int : \"\"\"Return the number of users in the list.\"\"\" return len ( self . _user_items ) Examples Creating a User # Create a new user and set as active new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) # Access typed properties directly print(f\"Created user {new_user.display_name} with ID {new_user.user_id}\") Managing Users # List all users users = await client.users.list_users() print(f\"Found {len(users)} users\") for user in users: print(f\"User {user.user_id}: {user.display_name}\") # Switch to another user await client.users.set_active(user_id=2) # Delete a user when no longer needed await client.users.delete_user(user_id=3) Error Handling ```python try: # Will raise ValueError if attempting to delete active user await client.users.delete_user(user_id=active_user_id) except ValueError as e: print(f\"Cannot delete active user: {e}\") Switch to another user first await client.users.set_active(another_user_id) Now delete is allowed await client.users.delete_user(active_user_id)","title":"Users Client"},{"location":"api/users/#users-api","text":"The Users API provides comprehensive functionality for managing user profiles, identities, and connections in the SimpleX Chat system.","title":"Users API"},{"location":"api/users/#usersclient","text":"The UsersClient class is accessible as a property of the main SimplexClient object via client.users .","title":"UsersClient"},{"location":"api/users/#simplex_python.clients.users.UsersClient","text":"Client for user-related operations in SimplexClient. This client is accessed via the users property of SimplexClient and provides methods for managing user profiles and contact addresses. Source code in simplex_python/clients/users.pyclass UsersClient : \"\"\" Client for user-related operations in SimplexClient. This client is accessed via the `users` property of SimplexClient and provides methods for managing user profiles and contact addresses. \"\"\" def __init__ ( self , client : \"SimplexClient\" ): \"\"\" Args: client: The parent SimplexClient instance. \"\"\" self . _client = client async def get_active ( self , include_contact_link : bool = True ) -> Optional [ ActiveUserResponse ]: \"\"\" Get the currently active user profile. Args: include_contact_link: Whether to check and include the user's contact link if it exists (default: True) Returns: ActiveUserResponse containing the user profile object, or None if no active user exists. If include_contact_link is True and the user has a contact link, it will be included in the response. Raises: SimplexCommandError: If there was an error executing the command. \"\"\" cmd = ShowActiveUser ( type = \"showActiveUser\" ) resp = await self . _client . send_command ( cmd ) # If we got None back, it means there's no active user if resp is None : return None # Handle special case where we get a \"no active user\" error if hasattr ( resp , \"type\" ) and resp . type == \"chatCmdError\" : # Check if it's specifically the \"no active user\" error if ( hasattr ( resp , \"chatError\" ) and resp . chatError . get ( \"type\" ) == \"error\" and resp . chatError . get ( \"errorType\" , {}) . get ( \"type\" ) == \"noActiveUser\" ): return None # If we got back a proper ActiveUserResponse, process it if isinstance ( resp , ActiveUserResponse ): # If requested, try to get the contact link for the user if include_contact_link and \"contactLink\" not in resp . profile : try : # Check if the user has a contact link from ..commands.users import ShowMyAddress address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : # Update the profile to include the contact link resp . profile [ \"contactLink\" ] = contact_link # Also update the original user data for backward compatibility if \"profile\" in resp . user : resp . user [ \"profile\" ][ \"contactLink\" ] = contact_link except Exception as e : # Don't fail the whole operation if we can't get the contact link logger . debug ( f \"Failed to get contact link for active user: { e } \" ) return resp # If we received some other type, raise an error error_msg = f \"Failed to get active user: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) async def list_users ( self , include_contact_links : bool = False ) -> UsersListResponse : \"\"\" List all users in the SimpleX Chat system. This method retrieves information about all users configured in the system, including their profiles, unread counts, and active status. Args: include_contact_links: Whether to fetch and include contact links for each user (default: False). Note that enabling this option will switch to each user to fetch their contact link, which could be slower with many users. Returns: UsersListResponse containing a list of user items with detailed information. The response is iterable and supports indexing to access individual UserItem objects. If include_contact_links is True, each user's profile will include their contact link if available. Example: ```python # Get all users without contact links (faster) users = await client.users.list_users() # Get all users with their contact links (slower but more complete) users_with_links = await client.users.list_users(include_contact_links=True) # Print number of users print(f\"Found {len(users)} users\") # Iterate through users for user in users: print(f\"User: {user.display_name} (ID: {user.user_id})\") print(f\"Active: {user.active_user}\") print(f\"Unread messages: {user.unread_count}\") if 'contactLink' in user.profile: print(f\"Contact Link: {user.profile.get('contactLink')}\") # Access by index first_user = users[0] ``` Raises: SimplexCommandError: If there was an error executing the command. \"\"\" cmd = ListUsers ( type = \"listUsers\" ) resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = \"Failed to list users: No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper UsersListResponse, process it if isinstance ( resp , UsersListResponse ): # If requested, fetch contact links for each user if include_contact_links : # Remember the current active user ID to restore later current_active = await self . get_active ( include_contact_link = False ) current_active_id = current_active . user_id if current_active else None try : # Import here to avoid circular imports from ..commands.users import ShowMyAddress # For each user in the list, switch to them and get their contact link for user_item in resp : if user_item . user_id == current_active_id : # For the already active user, we can just get their contact link directly try : address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if ( \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ) ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : user_item . profile [ \"contactLink\" ] = contact_link if \"profile\" in user_item . user : user_item . user [ \"profile\" ][ \"contactLink\" ] = ( contact_link ) except Exception as e : logger . debug ( f \"Failed to get contact link for active user { user_item . display_name } : { e } \" ) else : # For other users, we need to switch to them first try : # Switch to this user await self . set_active ( user_item . user_id ) # Get their contact link address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if ( \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ) ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : user_item . profile [ \"contactLink\" ] = contact_link if \"profile\" in user_item . user : user_item . user [ \"profile\" ][ \"contactLink\" ] = ( contact_link ) except Exception as e : logger . debug ( f \"Failed to get contact link for user { user_item . display_name } : { e } \" ) # Restore the original active user if current_active_id is not None : await self . set_active ( current_active_id ) except Exception as e : logger . warning ( f \"Failed to include contact links for users: { e } \" ) # If we switch users but fail, try to restore the original active user if current_active_id is not None : try : await self . set_active ( current_active_id ) except Exception as restore_error : logger . error ( f \"Failed to restore original active user: { restore_error } \" ) return resp # If we received some other type, raise an error error_msg = f \"Failed to list users: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) async def set_active ( self , user_id : int , view_pwd : Optional [ str ] = None ) -> ActiveUserResponse : \"\"\" Set the active user. Changes the current active user in the SimpleX Chat system to the user with the specified ID. If the user is hidden, the view password must be provided. Args: user_id: The ID of the user to set as active view_pwd: Optional view password for hidden users Returns: ActiveUserResponse containing information about the newly activated user Example: ```python # Switch to user with ID 2 active_user = await client.users.set_active(2) print(f\"Switched to user: {active_user.display_name}\") # Switch to a hidden user active_user = await client.users.set_active(3, view_pwd=\"password123\") ``` Raises: SimplexCommandError: If there was an error executing the command or the user ID is invalid \"\"\" cmd = APISetActiveUser ( type = \"apiSetActiveUser\" , userId = user_id , viewPwd = view_pwd ) resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to set active user { user_id } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse, return it if isinstance ( resp , ActiveUserResponse ): return resp # If we received some other type, raise an error error_msg = f \"Failed to set active user { user_id } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) async def create_active_user ( self , display_name : str , full_name : str , same_servers : bool = True , past_timestamp : bool = False , create_profile_address : bool = True , ) -> ActiveUserResponse : \"\"\" Create a new user profile and set it as active. This method creates a new user with the specified profile information and sets it as the active user. If a user with the specified display name already exists, a SimplexCommandError will be raised with a userExists error type. Args: display_name: The display name for the new user full_name: The full name for the new user same_servers: Whether to use the same servers as existing users (default: True) past_timestamp: Whether to use a past timestamp for the user (default: False) create_profile_address: Whether to automatically create a profile address for the user (default: True) Returns: ActiveUserResponse containing information about the newly created user Example: ```python try: # Create a new user new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) print(f\"Created user: {new_user.display_name} (ID: {new_user.user_id})\") except SimplexCommandError as e: if hasattr(e, 'error_type') and e.error_type.get('type') == 'userExists': print(f\"User already exists: {e.error_type.get('contactName')}\") else: raise ``` Raises: SimplexCommandError: If there was an error creating the user, including if the user already exists \"\"\" # Create profile for the new user using our strongly-typed Profile class profile = Profile ( displayName = display_name , fullName = full_name ) # Create the command with the typed profile object # The profile is properly serialized by the command formatter # using the to_dict method we've defined cmd = CreateActiveUser ( type = \"createActiveUser\" , profile = profile , sameServers = same_servers , pastTimestamp = past_timestamp , ) # Send the command resp = await self . _client . send_command ( cmd ) print ( resp ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to create user { display_name } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse, store it if not isinstance ( resp , ActiveUserResponse ): # If we received some other type, raise an error error_msg = f \"Failed to create user { display_name } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) user_resp = resp # Create profile address if requested if create_profile_address : try : # First, create the contact address create_cmd = CreateMyAddress ( type = \"createMyAddress\" ) await self . _client . send_command ( create_cmd ) # Then, include it in the profile await self . set_profile_address ( enabled = True ) logger . info ( f \"Successfully created profile address for new user { display_name } \" ) except SimplexCommandError as e : # Log the error but don't fail the whole operation logger . warning ( f \"Failed to create profile address for user { display_name } : { e } \" ) # We don't re-raise the exception since the user was created successfully return user_resp async def set_profile_address ( self , enabled : bool = True , create_if_missing : bool = True ) -> Union [ UserProfileUpdatedResponse , UserProfileNoChangeResponse ]: \"\"\" Enable or disable the contact address in the active user's profile. When enabled, this creates a shareable contact address that others can use to connect with the user. The address will be included in the user's profile and can be shared with others. Args: enabled: Whether to enable (True) or disable (False) the profile address create_if_missing: Whether to create the contact address if it doesn't exist (default: True) Returns: UserProfileUpdatedResponse containing the updated profile information when there's a change, or UserProfileNoChangeResponse when there's no change to be made. Example: ```python # Enable profile address profile_update = await client.users.set_profile_address(enabled=True) if isinstance(profile_update, UserProfileUpdatedResponse): print(f\"Profile address enabled: {profile_update.toProfile.get('contactLink')}\") # Disable profile address profile_update = await client.users.set_profile_address(enabled=False) if isinstance(profile_update, UserProfileNoChangeResponse): print(\"No change needed to profile address\") ``` Raises: SimplexCommandError: If there was an error updating the profile \"\"\" # Create the command cmd = SetProfileAddress ( type = \"setProfileAddress\" , includeInProfile = enabled ) # Send the command resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : action = \"enable\" if enabled else \"disable\" error_msg = f \"Failed to { action } profile address: No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper response, return it if isinstance ( resp , ( UserProfileUpdatedResponse , UserProfileNoChangeResponse )): return resp # Special handling for store errors when working with profile addresses if isinstance ( resp , StoreErrorType ): if enabled : # When enabling: Handle both duplicate and not found cases if resp . is_duplicate_contact_link_error (): logger . info ( \"Profile address already exists, returning no change response\" ) return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) # When 'contact link not found' error happens, it means the user doesn't have one # Attempt to create it first if requested if resp . is_contact_link_not_found_error () and create_if_missing : try : # First, create the contact address logger . info ( \"Profile address not found, creating one\" ) create_cmd = CreateMyAddress ( type = \"createMyAddress\" ) await self . _client . send_command ( create_cmd ) # Then, try to include it in the profile again logger . info ( \"Retrying profile address inclusion\" ) return await self . set_profile_address ( enabled = True , create_if_missing = False ) except SimplexCommandError as e : # If we failed to create the address, include that in the error error_msg = f \"Failed to create profile address: { e } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) if resp . is_contact_link_not_found_error (): error_msg = \"Cannot enable profile address: User doesn't have a contact link\" logger . info ( error_msg ) # This is a valid error case, but we choose to create a UserProfileNoChangeResponse # to maintain consistency with how we handle other cases return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) else : # When disabling: We treat 'contact link not found' as a no-change situation # (can't disable what doesn't exist) if resp . is_contact_link_not_found_error (): logger . info ( \"Profile address doesn't exist, returning no change response\" ) return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) # If we received some other type, raise an error action = \"enable\" if enabled else \"disable\" error_msg = f \"Failed to { action } profile address: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) async def delete_user ( self , user_id : int , delete_smp_queues : bool = True , view_pwd : Optional [ str ] = None ) -> Union [ ActiveUserResponse , \"CmdOkResponse\" ]: \"\"\" Delete a user from the SimpleX Chat system. This permanently removes the user account and optionally its associated SMP queues. If the user is hidden, the view password must be provided. IMPORTANT: You cannot delete the currently active user. You must first switch to another user with set_active() before deleting a user. Attempting to delete the active user will result in a SimplexCommandError with 'cantDeleteActiveUser' error. Args: user_id: The ID of the user to delete delete_smp_queues: Whether to delete the user's SMP queues (default: True) view_pwd: Optional view password for hidden users Returns: ActiveUserResponse containing information about the new active user (if deletion caused a switch) or CmdOkResponse if the deletion was successful but no user switch occurred Example: ```python # Get current user before deletion to ensure we're not deleting the active user active_user = await client.users.get_active() # Only proceed if we're attempting to delete a different user if active_user.user_id != user_id_to_delete: result = await client.users.delete_user(user_id_to_delete) if isinstance(result, ActiveUserResponse): print(f\"Deleted user, now active user is: {result.display_name}\") else: print(\"User deleted successfully\") else: # Switch to another user first users = await client.users.list_users() for user in users: if user.user_id != active_user.user_id: await client.users.set_active(user.user_id) await client.users.delete_user(user_id_to_delete) break ``` Raises: SimplexCommandError: If there was an error executing the command (e.g., user ID is invalid) or if attempting to delete the currently active user. \"\"\" from ..responses.base import CmdOkResponse # Check if we're trying to delete the active user - this will fail with an error # but we can provide a better error message by checking first active_user = await self . get_active ( include_contact_link = False ) if active_user and active_user . user_id == user_id : error_msg = f \"Cannot delete the active user (ID: { user_id } ). Switch to a different user first with set_active().\" logger . error ( error_msg ) raise ValueError ( error_msg ) # Create the command cmd = APIDeleteUser ( type = \"apiDeleteUser\" , userId = user_id , delSMPQueues = delete_smp_queues , viewPwd = view_pwd ) # Send the command resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to delete user { user_id } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse or CmdOkResponse, return it if isinstance ( resp , ( ActiveUserResponse , CmdOkResponse )): return resp # If we received some other type, raise an error error_msg = f \"Failed to delete user { user_id } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp )","title":"UsersClient"},{"location":"api/users/#simplex_python.clients.users.UsersClient.__init__","text":"Parameters: Name Type Description Default client SimplexClient The parent SimplexClient instance. required Source code in simplex_python/clients/users.py 43 44 45 46 47 48 def __init__ ( self , client : \"SimplexClient\" ): \"\"\" Args: client: The parent SimplexClient instance. \"\"\" self . _client = client","title":"__init__"},{"location":"api/users/#simplex_python.clients.users.UsersClient.create_active_user","text":"Create a new user profile and set it as active. This method creates a new user with the specified profile information and sets it as the active user. If a user with the specified display name already exists, a SimplexCommandError will be raised with a userExists error type. Parameters: Name Type Description Default display_name str The display name for the new user required full_name str The full name for the new user required same_servers bool Whether to use the same servers as existing users (default: True) True past_timestamp bool Whether to use a past timestamp for the user (default: False) False create_profile_address bool Whether to automatically create a profile address for the user (default: True) True Returns: Type Description ActiveUserResponse ActiveUserResponse containing information about the newly created user Example try: # Create a new user new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) print(f\"Created user: {new_user.display_name} (ID: {new_user.user_id})\") except SimplexCommandError as e: if hasattr(e, 'error_type') and e.error_type.get('type') == 'userExists': print(f\"User already exists: {e.error_type.get('contactName')}\") else: raise Raises: Type Description SimplexCommandError If there was an error creating the user, including if the user already exists Source code in simplex_python/clients/users.py 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 async def create_active_user ( self , display_name : str , full_name : str , same_servers : bool = True , past_timestamp : bool = False , create_profile_address : bool = True , ) -> ActiveUserResponse : \"\"\" Create a new user profile and set it as active. This method creates a new user with the specified profile information and sets it as the active user. If a user with the specified display name already exists, a SimplexCommandError will be raised with a userExists error type. Args: display_name: The display name for the new user full_name: The full name for the new user same_servers: Whether to use the same servers as existing users (default: True) past_timestamp: Whether to use a past timestamp for the user (default: False) create_profile_address: Whether to automatically create a profile address for the user (default: True) Returns: ActiveUserResponse containing information about the newly created user Example: ```python try: # Create a new user new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) print(f\"Created user: {new_user.display_name} (ID: {new_user.user_id})\") except SimplexCommandError as e: if hasattr(e, 'error_type') and e.error_type.get('type') == 'userExists': print(f\"User already exists: {e.error_type.get('contactName')}\") else: raise ``` Raises: SimplexCommandError: If there was an error creating the user, including if the user already exists \"\"\" # Create profile for the new user using our strongly-typed Profile class profile = Profile ( displayName = display_name , fullName = full_name ) # Create the command with the typed profile object # The profile is properly serialized by the command formatter # using the to_dict method we've defined cmd = CreateActiveUser ( type = \"createActiveUser\" , profile = profile , sameServers = same_servers , pastTimestamp = past_timestamp , ) # Send the command resp = await self . _client . send_command ( cmd ) print ( resp ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to create user { display_name } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse, store it if not isinstance ( resp , ActiveUserResponse ): # If we received some other type, raise an error error_msg = f \"Failed to create user { display_name } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) user_resp = resp # Create profile address if requested if create_profile_address : try : # First, create the contact address create_cmd = CreateMyAddress ( type = \"createMyAddress\" ) await self . _client . send_command ( create_cmd ) # Then, include it in the profile await self . set_profile_address ( enabled = True ) logger . info ( f \"Successfully created profile address for new user { display_name } \" ) except SimplexCommandError as e : # Log the error but don't fail the whole operation logger . warning ( f \"Failed to create profile address for user { display_name } : { e } \" ) # We don't re-raise the exception since the user was created successfully return user_resp","title":"create_active_user"},{"location":"api/users/#simplex_python.clients.users.UsersClient.delete_user","text":"Delete a user from the SimpleX Chat system. This permanently removes the user account and optionally its associated SMP queues. If the user is hidden, the view password must be provided. IMPORTANT: You cannot delete the currently active user. You must first switch to another user with set_active() before deleting a user. Attempting to delete the active user will result in a SimplexCommandError with 'cantDeleteActiveUser' error. Parameters: Name Type Description Default user_id int The ID of the user to delete required delete_smp_queues bool Whether to delete the user's SMP queues (default: True) True view_pwd Optional [ str ] Optional view password for hidden users None Returns: Type Description Union [ ActiveUserResponse , CmdOkResponse ] ActiveUserResponse containing information about the new active user (if deletion caused a switch) Union [ ActiveUserResponse , CmdOkResponse ] or CmdOkResponse if the deletion was successful but no user switch occurred Example # Get current user before deletion to ensure we're not deleting the active user active_user = await client.users.get_active() # Only proceed if we're attempting to delete a different user if active_user.user_id != user_id_to_delete: result = await client.users.delete_user(user_id_to_delete) if isinstance(result, ActiveUserResponse): print(f\"Deleted user, now active user is: {result.display_name}\") else: print(\"User deleted successfully\") else: # Switch to another user first users = await client.users.list_users() for user in users: if user.user_id != active_user.user_id: await client.users.set_active(user.user_id) await client.users.delete_user(user_id_to_delete) break Raises: Type Description SimplexCommandError If there was an error executing the command (e.g., user ID is invalid) or if attempting to delete the currently active user. Source code in simplex_python/clients/users.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 async def delete_user ( self , user_id : int , delete_smp_queues : bool = True , view_pwd : Optional [ str ] = None ) -> Union [ ActiveUserResponse , \"CmdOkResponse\" ]: \"\"\" Delete a user from the SimpleX Chat system. This permanently removes the user account and optionally its associated SMP queues. If the user is hidden, the view password must be provided. IMPORTANT: You cannot delete the currently active user. You must first switch to another user with set_active() before deleting a user. Attempting to delete the active user will result in a SimplexCommandError with 'cantDeleteActiveUser' error. Args: user_id: The ID of the user to delete delete_smp_queues: Whether to delete the user's SMP queues (default: True) view_pwd: Optional view password for hidden users Returns: ActiveUserResponse containing information about the new active user (if deletion caused a switch) or CmdOkResponse if the deletion was successful but no user switch occurred Example: ```python # Get current user before deletion to ensure we're not deleting the active user active_user = await client.users.get_active() # Only proceed if we're attempting to delete a different user if active_user.user_id != user_id_to_delete: result = await client.users.delete_user(user_id_to_delete) if isinstance(result, ActiveUserResponse): print(f\"Deleted user, now active user is: {result.display_name}\") else: print(\"User deleted successfully\") else: # Switch to another user first users = await client.users.list_users() for user in users: if user.user_id != active_user.user_id: await client.users.set_active(user.user_id) await client.users.delete_user(user_id_to_delete) break ``` Raises: SimplexCommandError: If there was an error executing the command (e.g., user ID is invalid) or if attempting to delete the currently active user. \"\"\" from ..responses.base import CmdOkResponse # Check if we're trying to delete the active user - this will fail with an error # but we can provide a better error message by checking first active_user = await self . get_active ( include_contact_link = False ) if active_user and active_user . user_id == user_id : error_msg = f \"Cannot delete the active user (ID: { user_id } ). Switch to a different user first with set_active().\" logger . error ( error_msg ) raise ValueError ( error_msg ) # Create the command cmd = APIDeleteUser ( type = \"apiDeleteUser\" , userId = user_id , delSMPQueues = delete_smp_queues , viewPwd = view_pwd ) # Send the command resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to delete user { user_id } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse or CmdOkResponse, return it if isinstance ( resp , ( ActiveUserResponse , CmdOkResponse )): return resp # If we received some other type, raise an error error_msg = f \"Failed to delete user { user_id } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp )","title":"delete_user"},{"location":"api/users/#simplex_python.clients.users.UsersClient.get_active","text":"Get the currently active user profile. Parameters: Name Type Description Default include_contact_link bool Whether to check and include the user's contact link if it exists (default: True) True Returns: Type Description Optional [ ActiveUserResponse ] ActiveUserResponse containing the user profile object, or None if no active user exists. Optional [ ActiveUserResponse ] If include_contact_link is True and the user has a contact link, it will be included in the response. Raises: Type Description SimplexCommandError If there was an error executing the command. Source code in simplex_python/clients/users.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 async def get_active ( self , include_contact_link : bool = True ) -> Optional [ ActiveUserResponse ]: \"\"\" Get the currently active user profile. Args: include_contact_link: Whether to check and include the user's contact link if it exists (default: True) Returns: ActiveUserResponse containing the user profile object, or None if no active user exists. If include_contact_link is True and the user has a contact link, it will be included in the response. Raises: SimplexCommandError: If there was an error executing the command. \"\"\" cmd = ShowActiveUser ( type = \"showActiveUser\" ) resp = await self . _client . send_command ( cmd ) # If we got None back, it means there's no active user if resp is None : return None # Handle special case where we get a \"no active user\" error if hasattr ( resp , \"type\" ) and resp . type == \"chatCmdError\" : # Check if it's specifically the \"no active user\" error if ( hasattr ( resp , \"chatError\" ) and resp . chatError . get ( \"type\" ) == \"error\" and resp . chatError . get ( \"errorType\" , {}) . get ( \"type\" ) == \"noActiveUser\" ): return None # If we got back a proper ActiveUserResponse, process it if isinstance ( resp , ActiveUserResponse ): # If requested, try to get the contact link for the user if include_contact_link and \"contactLink\" not in resp . profile : try : # Check if the user has a contact link from ..commands.users import ShowMyAddress address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : # Update the profile to include the contact link resp . profile [ \"contactLink\" ] = contact_link # Also update the original user data for backward compatibility if \"profile\" in resp . user : resp . user [ \"profile\" ][ \"contactLink\" ] = contact_link except Exception as e : # Don't fail the whole operation if we can't get the contact link logger . debug ( f \"Failed to get contact link for active user: { e } \" ) return resp # If we received some other type, raise an error error_msg = f \"Failed to get active user: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp )","title":"get_active"},{"location":"api/users/#simplex_python.clients.users.UsersClient.list_users","text":"List all users in the SimpleX Chat system. This method retrieves information about all users configured in the system, including their profiles, unread counts, and active status. Parameters: Name Type Description Default include_contact_links bool Whether to fetch and include contact links for each user (default: False). Note that enabling this option will switch to each user to fetch their contact link, which could be slower with many users. False Returns: Type Description UsersListResponse UsersListResponse containing a list of user items with detailed information. UsersListResponse The response is iterable and supports indexing to access individual UserItem objects. UsersListResponse If include_contact_links is True, each user's profile will include their contact link if available. Example # Get all users without contact links (faster) users = await client.users.list_users() # Get all users with their contact links (slower but more complete) users_with_links = await client.users.list_users(include_contact_links=True) # Print number of users print(f\"Found {len(users)} users\") # Iterate through users for user in users: print(f\"User: {user.display_name} (ID: {user.user_id})\") print(f\"Active: {user.active_user}\") print(f\"Unread messages: {user.unread_count}\") if 'contactLink' in user.profile: print(f\"Contact Link: {user.profile.get('contactLink')}\") # Access by index first_user = users[0] Raises: Type Description SimplexCommandError If there was an error executing the command. Source code in simplex_python/clients/users.pyasync def list_users ( self , include_contact_links : bool = False ) -> UsersListResponse : \"\"\" List all users in the SimpleX Chat system. This method retrieves information about all users configured in the system, including their profiles, unread counts, and active status. Args: include_contact_links: Whether to fetch and include contact links for each user (default: False). Note that enabling this option will switch to each user to fetch their contact link, which could be slower with many users. Returns: UsersListResponse containing a list of user items with detailed information. The response is iterable and supports indexing to access individual UserItem objects. If include_contact_links is True, each user's profile will include their contact link if available. Example: ```python # Get all users without contact links (faster) users = await client.users.list_users() # Get all users with their contact links (slower but more complete) users_with_links = await client.users.list_users(include_contact_links=True) # Print number of users print(f\"Found {len(users)} users\") # Iterate through users for user in users: print(f\"User: {user.display_name} (ID: {user.user_id})\") print(f\"Active: {user.active_user}\") print(f\"Unread messages: {user.unread_count}\") if 'contactLink' in user.profile: print(f\"Contact Link: {user.profile.get('contactLink')}\") # Access by index first_user = users[0] ``` Raises: SimplexCommandError: If there was an error executing the command. \"\"\" cmd = ListUsers ( type = \"listUsers\" ) resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = \"Failed to list users: No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper UsersListResponse, process it if isinstance ( resp , UsersListResponse ): # If requested, fetch contact links for each user if include_contact_links : # Remember the current active user ID to restore later current_active = await self . get_active ( include_contact_link = False ) current_active_id = current_active . user_id if current_active else None try : # Import here to avoid circular imports from ..commands.users import ShowMyAddress # For each user in the list, switch to them and get their contact link for user_item in resp : if user_item . user_id == current_active_id : # For the already active user, we can just get their contact link directly try : address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if ( \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ) ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : user_item . profile [ \"contactLink\" ] = contact_link if \"profile\" in user_item . user : user_item . user [ \"profile\" ][ \"contactLink\" ] = ( contact_link ) except Exception as e : logger . debug ( f \"Failed to get contact link for active user { user_item . display_name } : { e } \" ) else : # For other users, we need to switch to them first try : # Switch to this user await self . set_active ( user_item . user_id ) # Get their contact link address_resp = await self . _client . send_command ( ShowMyAddress ( type = \"showMyAddress\" ) ) # Extract the contact link - could be in different formats contact_link = None if hasattr ( address_resp , \"contactLink\" ): if isinstance ( address_resp . contactLink , str ): contact_link = address_resp . contactLink elif ( isinstance ( address_resp . contactLink , dict ) and \"connLinkContact\" in address_resp . contactLink ): # Extract from nested dictionary if ( \"connFullLink\" in address_resp . contactLink . get ( \"connLinkContact\" , {} ) ): contact_link = address_resp . contactLink [ \"connLinkContact\" ][ \"connFullLink\" ] # Only update if we found a valid link if contact_link : user_item . profile [ \"contactLink\" ] = contact_link if \"profile\" in user_item . user : user_item . user [ \"profile\" ][ \"contactLink\" ] = ( contact_link ) except Exception as e : logger . debug ( f \"Failed to get contact link for user { user_item . display_name } : { e } \" ) # Restore the original active user if current_active_id is not None : await self . set_active ( current_active_id ) except Exception as e : logger . warning ( f \"Failed to include contact links for users: { e } \" ) # If we switch users but fail, try to restore the original active user if current_active_id is not None : try : await self . set_active ( current_active_id ) except Exception as restore_error : logger . error ( f \"Failed to restore original active user: { restore_error } \" ) return resp # If we received some other type, raise an error error_msg = f \"Failed to list users: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp )","title":"list_users"},{"location":"api/users/#simplex_python.clients.users.UsersClient.set_active","text":"Set the active user. Changes the current active user in the SimpleX Chat system to the user with the specified ID. If the user is hidden, the view password must be provided. Parameters: Name Type Description Default user_id int The ID of the user to set as active required view_pwd Optional [ str ] Optional view password for hidden users None Returns: Type Description ActiveUserResponse ActiveUserResponse containing information about the newly activated user Example # Switch to user with ID 2 active_user = await client.users.set_active(2) print(f\"Switched to user: {active_user.display_name}\") # Switch to a hidden user active_user = await client.users.set_active(3, view_pwd=\"password123\") Raises: Type Description SimplexCommandError If there was an error executing the command or the user ID is invalid Source code in simplex_python/clients/users.py 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 async def set_active ( self , user_id : int , view_pwd : Optional [ str ] = None ) -> ActiveUserResponse : \"\"\" Set the active user. Changes the current active user in the SimpleX Chat system to the user with the specified ID. If the user is hidden, the view password must be provided. Args: user_id: The ID of the user to set as active view_pwd: Optional view password for hidden users Returns: ActiveUserResponse containing information about the newly activated user Example: ```python # Switch to user with ID 2 active_user = await client.users.set_active(2) print(f\"Switched to user: {active_user.display_name}\") # Switch to a hidden user active_user = await client.users.set_active(3, view_pwd=\"password123\") ``` Raises: SimplexCommandError: If there was an error executing the command or the user ID is invalid \"\"\" cmd = APISetActiveUser ( type = \"apiSetActiveUser\" , userId = user_id , viewPwd = view_pwd ) resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : error_msg = f \"Failed to set active user { user_id } : No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper ActiveUserResponse, return it if isinstance ( resp , ActiveUserResponse ): return resp # If we received some other type, raise an error error_msg = f \"Failed to set active user { user_id } : Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp )","title":"set_active"},{"location":"api/users/#simplex_python.clients.users.UsersClient.set_profile_address","text":"Enable or disable the contact address in the active user's profile. When enabled, this creates a shareable contact address that others can use to connect with the user. The address will be included in the user's profile and can be shared with others. Parameters: Name Type Description Default enabled bool Whether to enable (True) or disable (False) the profile address True create_if_missing bool Whether to create the contact address if it doesn't exist (default: True) True Returns: Type Description Union [ UserProfileUpdatedResponse , UserProfileNoChangeResponse ] UserProfileUpdatedResponse containing the updated profile information when there's a change, Union [ UserProfileUpdatedResponse , UserProfileNoChangeResponse ] or UserProfileNoChangeResponse when there's no change to be made. Example # Enable profile address profile_update = await client.users.set_profile_address(enabled=True) if isinstance(profile_update, UserProfileUpdatedResponse): print(f\"Profile address enabled: {profile_update.toProfile.get('contactLink')}\") # Disable profile address profile_update = await client.users.set_profile_address(enabled=False) if isinstance(profile_update, UserProfileNoChangeResponse): print(\"No change needed to profile address\") Raises: Type Description SimplexCommandError If there was an error updating the profile Source code in simplex_python/clients/users.py 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 async def set_profile_address ( self , enabled : bool = True , create_if_missing : bool = True ) -> Union [ UserProfileUpdatedResponse , UserProfileNoChangeResponse ]: \"\"\" Enable or disable the contact address in the active user's profile. When enabled, this creates a shareable contact address that others can use to connect with the user. The address will be included in the user's profile and can be shared with others. Args: enabled: Whether to enable (True) or disable (False) the profile address create_if_missing: Whether to create the contact address if it doesn't exist (default: True) Returns: UserProfileUpdatedResponse containing the updated profile information when there's a change, or UserProfileNoChangeResponse when there's no change to be made. Example: ```python # Enable profile address profile_update = await client.users.set_profile_address(enabled=True) if isinstance(profile_update, UserProfileUpdatedResponse): print(f\"Profile address enabled: {profile_update.toProfile.get('contactLink')}\") # Disable profile address profile_update = await client.users.set_profile_address(enabled=False) if isinstance(profile_update, UserProfileNoChangeResponse): print(\"No change needed to profile address\") ``` Raises: SimplexCommandError: If there was an error updating the profile \"\"\" # Create the command cmd = SetProfileAddress ( type = \"setProfileAddress\" , includeInProfile = enabled ) # Send the command resp = await self . _client . send_command ( cmd ) # If we got None back, that's unexpected for this command if resp is None : action = \"enable\" if enabled else \"disable\" error_msg = f \"Failed to { action } profile address: No response\" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) # If we got back a proper response, return it if isinstance ( resp , ( UserProfileUpdatedResponse , UserProfileNoChangeResponse )): return resp # Special handling for store errors when working with profile addresses if isinstance ( resp , StoreErrorType ): if enabled : # When enabling: Handle both duplicate and not found cases if resp . is_duplicate_contact_link_error (): logger . info ( \"Profile address already exists, returning no change response\" ) return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) # When 'contact link not found' error happens, it means the user doesn't have one # Attempt to create it first if requested if resp . is_contact_link_not_found_error () and create_if_missing : try : # First, create the contact address logger . info ( \"Profile address not found, creating one\" ) create_cmd = CreateMyAddress ( type = \"createMyAddress\" ) await self . _client . send_command ( create_cmd ) # Then, try to include it in the profile again logger . info ( \"Retrying profile address inclusion\" ) return await self . set_profile_address ( enabled = True , create_if_missing = False ) except SimplexCommandError as e : # If we failed to create the address, include that in the error error_msg = f \"Failed to create profile address: { e } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp ) if resp . is_contact_link_not_found_error (): error_msg = \"Cannot enable profile address: User doesn't have a contact link\" logger . info ( error_msg ) # This is a valid error case, but we choose to create a UserProfileNoChangeResponse # to maintain consistency with how we handle other cases return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) else : # When disabling: We treat 'contact link not found' as a no-change situation # (can't disable what doesn't exist) if resp . is_contact_link_not_found_error (): logger . info ( \"Profile address doesn't exist, returning no change response\" ) return UserProfileNoChangeResponse ( type = \"userProfileNoChange\" ) # If we received some other type, raise an error action = \"enable\" if enabled else \"disable\" error_msg = f \"Failed to { action } profile address: Unexpected response type { getattr ( resp , 'type' , 'unknown' ) } \" logger . error ( error_msg ) raise SimplexCommandError ( error_msg , resp )","title":"set_profile_address"},{"location":"api/users/#user-commands","text":"User management commands are defined in the commands.users module.","title":"User Commands"},{"location":"api/users/#simplex_python.commands.users","text":"User and address-related command classes for the Simplex messaging system. This module defines the commands for managing users and addresses, including: - User management (creating, listing, activating, hiding, muting, etc.) - User profile operations - Address creation and management - Address auto-accept configuration All commands inherit from BaseCommand and provide a consistent interface for user-related operations in the Simplex system.","title":"users"},{"location":"api/users/#simplex_python.commands.users.APISetActiveUser","text":"Bases: BaseCommand Command to set the active user via API. Source code in simplex_python/commands/users.py 46 47 48 49 50 51 52 @dataclass ( kw_only = True ) class APISetActiveUser ( BaseCommand ): \"\"\"Command to set the active user via API.\"\"\" type : str = \"apiSetActiveUser\" userId : int viewPwd : Optional [ str ] = None","title":"APISetActiveUser"},{"location":"api/users/#simplex_python.commands.users.APIDeleteUser","text":"Bases: BaseCommand Command to delete a user via API. Source code in simplex_python/commands/users.py 89 90 91 92 93 94 95 96 @dataclass ( kw_only = True ) class APIDeleteUser ( BaseCommand ): \"\"\"Command to delete a user via API.\"\"\" type : str = \"apiDeleteUser\" userId : int delSMPQueues : bool viewPwd : Optional [ str ] = None","title":"APIDeleteUser"},{"location":"api/users/#response-types","text":"User-specific response types provide strongly typed access to server responses.","title":"Response Types"},{"location":"api/users/#simplex_python.responses.users","text":"User-related response types for the Simplex messaging system. This module defines response types for user-related operations, including: - User management (active users, profiles, settings) - Address management (creation, deletion, display) - Auto-accept configuration - Contact link management All responses follow a consistent pattern with the command classes they correspond to.","title":"users"},{"location":"api/users/#simplex_python.responses.users.ActiveUserResponse","text":"Bases: CommandResponse Response containing active user information. Source code in simplex_python/responses/users.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @dataclass class ActiveUserResponse ( CommandResponse ): \"\"\"Response containing active user information.\"\"\" # Store original user dict for backward compatibility user : Dict [ str , Any ] = field ( default_factory = dict ) # Directly expose common user properties for fluent API user_id : Optional [ int ] = None agent_user_id : Optional [ str ] = None local_display_name : Optional [ str ] = None profile : Dict [ str , Any ] = field ( default_factory = dict ) preferences : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"ActiveUserResponse\" : user_data = data . get ( \"user\" , {}) # Create the response with both the original user dict and extracted properties return cls ( type = \"activeUser\" , user = user_data , user_id = user_data . get ( \"userId\" ), agent_user_id = user_data . get ( \"agentUserId\" ), local_display_name = user_data . get ( \"localDisplayName\" ), profile = user_data . get ( \"profile\" , {}), preferences = user_data . get ( \"fullPreferences\" , {}), ) @property def display_name ( self ) -> Optional [ str ]: \"\"\"Get the user's display name from profile.\"\"\" return self . profile . get ( \"displayName\" ) if self . profile else None @property def full_name ( self ) -> Optional [ str ]: \"\"\"Get the user's full name from profile.\"\"\" return self . profile . get ( \"fullName\" ) if self . profile else None","title":"ActiveUserResponse"},{"location":"api/users/#simplex_python.responses.users.ActiveUserResponse.display_name","text":"Get the user's display name from profile.","title":"display_name"},{"location":"api/users/#simplex_python.responses.users.ActiveUserResponse.full_name","text":"Get the user's full name from profile.","title":"full_name"},{"location":"api/users/#simplex_python.responses.users.User","text":"User information returned in responses. Source code in simplex_python/responses/users.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 @dataclass class User : \"\"\"User information returned in responses.\"\"\" userId : int agentUserId : str userContactId : int localDisplayName : str profile : Dict [ str , Any ] activeUser : bool viewPwdHash : str = \"\" showNtfs : bool = True @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"User\" : return cls ( userId = data . get ( \"userId\" , 0 ), agentUserId = data . get ( \"agentUserId\" , \"\" ), userContactId = data . get ( \"userContactId\" , 0 ), localDisplayName = data . get ( \"localDisplayName\" , \"\" ), profile = data . get ( \"profile\" , {}), activeUser = data . get ( \"activeUser\" , False ), viewPwdHash = data . get ( \"viewPwdHash\" , \"\" ), showNtfs = data . get ( \"showNtfs\" , True ), )","title":"User"},{"location":"api/users/#simplex_python.responses.users.UserContactLink","text":"User contact link information. Source code in simplex_python/responses/users.py 289 290 291 292 293 294 295 296 297 298 299 300 301 @dataclass class UserContactLink : \"\"\"User contact link information.\"\"\" connReqContact : str autoAccept : Optional [ Dict [ str , Any ]] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLink\" : return cls ( connReqContact = data . get ( \"connReqContact\" , \"\" ), autoAccept = data . get ( \"autoAccept\" ), )","title":"UserContactLink"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkCreatedResponse","text":"Bases: CommandResponse Response when a user contact link is created. Source code in simplex_python/responses/users.py 193 194 195 196 197 198 199 200 201 202 203 204 205 @dataclass class UserContactLinkCreatedResponse ( CommandResponse ): \"\"\"Response when a user contact link is created.\"\"\" connReqContact : str = \"\" @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkCreatedResponse\" : return cls ( type = \"userContactLinkCreated\" , user = data . get ( \"user\" ), connReqContact = data . get ( \"connReqContact\" , \"\" ), )","title":"UserContactLinkCreatedResponse"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkDeletedResponse","text":"Bases: CommandResponse Response when a user contact link is deleted. Source code in simplex_python/responses/users.py 208 209 210 211 212 213 214 @dataclass class UserContactLinkDeletedResponse ( CommandResponse ): \"\"\"Response when a user contact link is deleted.\"\"\" @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkDeletedResponse\" : return cls ( type = \"userContactLinkDeleted\" , user = data . get ( \"user\" ))","title":"UserContactLinkDeletedResponse"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkResponse","text":"Bases: CommandResponse Response containing a user's contact link (address). Source code in simplex_python/responses/users.py 178 179 180 181 182 183 184 185 186 187 188 189 190 @dataclass class UserContactLinkResponse ( CommandResponse ): \"\"\"Response containing a user's contact link (address).\"\"\" contactLink : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkResponse\" : return cls ( type = \"userContactLink\" , user = data . get ( \"user\" ), contactLink = data . get ( \"contactLink\" , {}), )","title":"UserContactLinkResponse"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkSubErrorResponse","text":"Bases: CommandResponse Response when there's an error with a user contact link subscription. Source code in simplex_python/responses/users.py 248 249 250 251 252 253 254 255 256 @dataclass class UserContactLinkSubErrorResponse ( CommandResponse ): \"\"\"Response when there's an error with a user contact link subscription.\"\"\" chatError : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkSubErrorResponse\" : return cls ( type = \"userContactLinkSubError\" , chatError = data . get ( \"chatError\" , {}))","title":"UserContactLinkSubErrorResponse"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkSubscribedResponse","text":"Bases: CommandResponse Response when a user contact link is subscribed to. Source code in simplex_python/responses/users.py 239 240 241 242 243 244 245 @dataclass class UserContactLinkSubscribedResponse ( CommandResponse ): \"\"\"Response when a user contact link is subscribed to.\"\"\" @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkSubscribedResponse\" : return cls ( type = \"userContactLinkSubscribed\" )","title":"UserContactLinkSubscribedResponse"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkUpdatedResponse","text":"Bases: CommandResponse Response when a user's contact link is updated. Source code in simplex_python/responses/users.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @dataclass class UserContactLinkUpdatedResponse ( CommandResponse ): \"\"\"Response when a user's contact link is updated.\"\"\" connReqContact : str = \"\" autoAccept : bool = False autoReply : Optional [ Dict [ str , Any ]] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserContactLinkUpdatedResponse\" : return cls ( type = \"userContactLinkUpdated\" , user = data . get ( \"user\" ), connReqContact = data . get ( \"connReqContact\" , \"\" ), autoAccept = data . get ( \"autoAccept\" , False ), autoReply = data . get ( \"autoReply\" ), )","title":"UserContactLinkUpdatedResponse"},{"location":"api/users/#simplex_python.responses.users.UserItem","text":"Individual user item from a users list response. Source code in simplex_python/responses/users.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 @dataclass class UserItem : \"\"\"Individual user item from a users list response.\"\"\" # Raw user dictionary user : Dict [ str , Any ] = field ( default_factory = dict ) # Direct access to common properties user_id : Optional [ int ] = None agent_user_id : Optional [ str ] = None local_display_name : Optional [ str ] = None profile : Dict [ str , Any ] = field ( default_factory = dict ) preferences : Dict [ str , Any ] = field ( default_factory = dict ) active_user : bool = False unread_count : int = 0 @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserItem\" : \"\"\"Create a UserItem from a dictionary.\"\"\" user_data = data . get ( \"user\" , {}) return cls ( user = user_data , user_id = user_data . get ( \"userId\" ), agent_user_id = user_data . get ( \"agentUserId\" ), local_display_name = user_data . get ( \"localDisplayName\" ), profile = user_data . get ( \"profile\" , {}), preferences = user_data . get ( \"fullPreferences\" , {}), active_user = user_data . get ( \"activeUser\" , False ), unread_count = data . get ( \"unreadCount\" , 0 ) ) @property def display_name ( self ) -> Optional [ str ]: \"\"\"Get the user's display name from profile.\"\"\" return self . profile . get ( \"displayName\" ) if self . profile else None @property def full_name ( self ) -> Optional [ str ]: \"\"\"Get the user's full name from profile.\"\"\" return self . profile . get ( \"fullName\" ) if self . profile else None","title":"UserItem"},{"location":"api/users/#simplex_python.responses.users.UserItem.display_name","text":"Get the user's display name from profile.","title":"display_name"},{"location":"api/users/#simplex_python.responses.users.UserItem.full_name","text":"Get the user's full name from profile.","title":"full_name"},{"location":"api/users/#simplex_python.responses.users.UserItem.from_dict","text":"Create a UserItem from a dictionary. Source code in simplex_python/responses/users.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserItem\" : \"\"\"Create a UserItem from a dictionary.\"\"\" user_data = data . get ( \"user\" , {}) return cls ( user = user_data , user_id = user_data . get ( \"userId\" ), agent_user_id = user_data . get ( \"agentUserId\" ), local_display_name = user_data . get ( \"localDisplayName\" ), profile = user_data . get ( \"profile\" , {}), preferences = user_data . get ( \"fullPreferences\" , {}), active_user = user_data . get ( \"activeUser\" , False ), unread_count = data . get ( \"unreadCount\" , 0 ) )","title":"from_dict"},{"location":"api/users/#simplex_python.responses.users.UserProfileNoChangeResponse","text":"Bases: CommandResponse Response when a profile update results in no change. Source code in simplex_python/responses/users.py 166 167 168 169 170 171 172 @dataclass class UserProfileNoChangeResponse ( CommandResponse ): \"\"\"Response when a profile update results in no change.\"\"\" @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserProfileNoChangeResponse\" : return cls ( type = \"userProfileNoChange\" , user = data . get ( \"user\" ))","title":"UserProfileNoChangeResponse"},{"location":"api/users/#simplex_python.responses.users.UserProfileResponse","text":"Bases: CommandResponse Response containing a user's profile. Source code in simplex_python/responses/users.py 136 137 138 139 140 141 142 143 144 145 146 @dataclass class UserProfileResponse ( CommandResponse ): \"\"\"Response containing a user's profile.\"\"\" profile : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserProfileResponse\" : return cls ( type = \"userProfile\" , user = data . get ( \"user\" ), profile = data . get ( \"profile\" , {}) )","title":"UserProfileResponse"},{"location":"api/users/#simplex_python.responses.users.UserProfileUpdatedResponse","text":"Bases: CommandResponse Response when a user's profile is updated. Source code in simplex_python/responses/users.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 @dataclass class UserProfileUpdatedResponse ( CommandResponse ): \"\"\"Response when a user's profile is updated.\"\"\" fromProfile : Dict [ str , Any ] = field ( default_factory = dict ) toProfile : Dict [ str , Any ] = field ( default_factory = dict ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserProfileUpdatedResponse\" : return cls ( type = \"userProfileUpdated\" , user = data . get ( \"user\" ), fromProfile = data . get ( \"fromProfile\" , {}), toProfile = data . get ( \"toProfile\" , {}), )","title":"UserProfileUpdatedResponse"},{"location":"api/users/#simplex_python.responses.users.UsersListResponse","text":"Bases: CommandResponse Response containing a list of users. Source code in simplex_python/responses/users.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 @dataclass class UsersListResponse ( CommandResponse ): \"\"\"Response containing a list of users.\"\"\" users : List [ Dict [ str , Any ]] = field ( default_factory = list ) # Internal representation of processed user items _user_items : List [ \"UserItem\" ] = field ( default_factory = list , repr = False ) @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UsersListResponse\" : raw_users = data . get ( \"users\" , []) response = cls ( type = \"usersList\" , users = raw_users ) # Process raw users into UserItem objects response . _user_items = [ UserItem . from_dict ( user_data ) for user_data in raw_users ] return response def __len__ ( self ) -> int : \"\"\"Return the number of users in the list.\"\"\" return len ( self . _user_items ) def __getitem__ ( self , index ) -> \"UserItem\" : \"\"\"Access user items by index.\"\"\" return self . _user_items [ index ] def __iter__ ( self ): \"\"\"Allow iteration over user items.\"\"\" return iter ( self . _user_items )","title":"UsersListResponse"},{"location":"api/users/#simplex_python.responses.users.UsersListResponse.__getitem__","text":"Access user items by index. Source code in simplex_python/responses/users.py 84 85 86 def __getitem__ ( self , index ) -> \"UserItem\" : \"\"\"Access user items by index.\"\"\" return self . _user_items [ index ]","title":"__getitem__"},{"location":"api/users/#simplex_python.responses.users.UsersListResponse.__iter__","text":"Allow iteration over user items. Source code in simplex_python/responses/users.py 88 89 90 def __iter__ ( self ): \"\"\"Allow iteration over user items.\"\"\" return iter ( self . _user_items )","title":"__iter__"},{"location":"api/users/#simplex_python.responses.users.UsersListResponse.__len__","text":"Return the number of users in the list. Source code in simplex_python/responses/users.py 80 81 82 def __len__ ( self ) -> int : \"\"\"Return the number of users in the list.\"\"\" return len ( self . _user_items )","title":"__len__"},{"location":"api/users/#examples","text":"","title":"Examples"},{"location":"api/users/#creating-a-user","text":"# Create a new user and set as active new_user = await client.users.create_active_user( display_name=\"Alice\", full_name=\"Alice Smith\" ) # Access typed properties directly print(f\"Created user {new_user.display_name} with ID {new_user.user_id}\")","title":"Creating a User"},{"location":"api/users/#managing-users","text":"# List all users users = await client.users.list_users() print(f\"Found {len(users)} users\") for user in users: print(f\"User {user.user_id}: {user.display_name}\") # Switch to another user await client.users.set_active(user_id=2) # Delete a user when no longer needed await client.users.delete_user(user_id=3)","title":"Managing Users"},{"location":"api/users/#error-handling","text":"```python try: # Will raise ValueError if attempting to delete active user await client.users.delete_user(user_id=active_user_id) except ValueError as e: print(f\"Cannot delete active user: {e}\")","title":"Error Handling"},{"location":"api/users/#switch-to-another-user-first","text":"await client.users.set_active(another_user_id)","title":"Switch to another user first"},{"location":"api/users/#now-delete-is-allowed","text":"await client.users.delete_user(active_user_id)","title":"Now delete is allowed"}]}