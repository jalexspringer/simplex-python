{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SimplexPython SDK","text":"<p>A type-safe, async-first Python SDK for interacting with the SimpleX Chat server.</p>"},{"location":"#overview","title":"Overview","text":"<p>SimplexPython provides a comprehensive and strongly-typed interface to the SimpleX Chat protocol.  The SDK is designed with modern Python features and follows best practices for Python 3.13.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Async-first design for efficient network operations</li> <li>Strong typing with PEP 695 generics and comprehensive type hints</li> <li>Fluent API with domain-specific clients</li> <li>Clean separation of concerns between transport, commands, and responses</li> <li>Extensive error handling with detailed error messages</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install simplex-python\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>import asyncio\nfrom simplex_python.client import SimplexClient\n\nasync def main():\n    async with SimplexClient(\"ws://localhost:5225\") as client:\n        # Get the active user\n        active_user = await client.users.get_active()\n        print(f\"Active user: {active_user.display_name}\")\n\n        # List all users\n        users = await client.users.list_users()\n        print(f\"Found {len(users)} users\")\n\n        # Create a new user with auto-created profile address\n        new_user = await client.users.create_active_user(\n            display_name=\"Alice\", \n            full_name=\"Alice Smith\"\n        )\n        print(f\"Created user: {new_user.display_name}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>The SDK is organized into domain-specific clients:</p> <ul> <li>Client API - Main client interface</li> <li>Users API - User management operations</li> </ul>"},{"location":"api/client/","title":"Client API","text":"<p>The Client API provides the main entry point for interacting with the SimpleX Chat server.</p>"},{"location":"api/client/#simplexclient","title":"SimplexClient","text":""},{"location":"api/client/#simplex_python.client.SimplexClient","title":"<code>simplex_python.client.SimplexClient</code>","text":"<p>High-level async client for the Simplex chat protocol with domain-specific clients.</p> Example usage <p>async with SimplexClient(server_or_url) as client:     # User operations     user = await client.users.get_active()     # Group operations     group = await client.groups.create(\"Project Team\")     # Chat operations     await client.chats.send_message(456, \"Hello, world!\")     # File operations     await client.files.set_files_folder(\"/path/to/downloads\")     # Database operations     await client.database.export_archive(\"/path/to/backup.simplex\")     # Connection operations     await client.connections.accept_contact(123)     # Listen for events     async for event in client.events():         handle_event(event)</p> Source code in <code>simplex_python/client.py</code> <pre><code>class SimplexClient:\n    \"\"\"\n    High-level async client for the Simplex chat protocol with domain-specific clients.\n\n    Example usage:\n        async with SimplexClient(server_or_url) as client:\n            # User operations\n            user = await client.users.get_active()\n            # Group operations\n            group = await client.groups.create(\"Project Team\")\n            # Chat operations\n            await client.chats.send_message(456, \"Hello, world!\")\n            # File operations\n            await client.files.set_files_folder(\"/path/to/downloads\")\n            # Database operations\n            await client.database.export_archive(\"/path/to/backup.simplex\")\n            # Connection operations\n            await client.connections.accept_contact(123)\n            # Listen for events\n            async for event in client.events():\n                handle_event(event)\n    \"\"\"\n\n    def __init__(\n        self, server: Union[ChatServer, str], timeout: float = 10.0, qsize: int = 100\n    ):\n        \"\"\"\n        Args:\n            server: ChatServer object or WebSocket URL to connect to.\n            timeout: Connection and command timeout in seconds.\n            qsize: Max size of the event queue.\n        \"\"\"\n        self._server = server\n        self._timeout = timeout\n        self._qsize = qsize\n        self._transport: Optional[ChatTransport] = None\n        self._event_q: Optional[ABQueue[CommandResponse]] = None\n        self._pending: OrderedDict[str, asyncio.Future] = OrderedDict()\n        self._recv_task: Optional[asyncio.Task] = None\n        self._connected = False\n        self._client_corr_id = 0  # Sequential ID counter\n\n        # Lazy-loaded domain-specific client instances\n        self._users_client = None\n        self._groups_client = None\n        self._chats_client = None\n        self._files_client = None\n        self._database_client = None\n        self._connections_client = None\n\n    async def __aenter__(self) -&gt; \"SimplexClient\":\n        await self.connect()\n        return self\n\n    async def __aexit__(self, exc_type, exc, tb):\n        await self.disconnect()\n\n    async def connect(self) -&gt; None:\n        \"\"\"Establish a connection to the chat server.\"\"\"\n        if self._connected:\n            return\n\n        try:\n            self._transport = await ChatTransport.connect(\n                self._server, timeout=self._timeout, qsize=self._qsize\n            )\n            self._event_q = ABQueue[CommandResponse](self._qsize)\n            self._recv_task = asyncio.create_task(self._recv_loop())\n            self._connected = True\n            logger.info(\"Connected to chat server\")\n        except OSError as e:\n            # This is likely a connection error - provide helpful information\n            if \"Connect call failed\" in str(e):\n                raise SimplexConnectionError(\"Connection refused\", self._server, e)\n            elif \"Name or service not known\" in str(e):\n                raise SimplexConnectionError(\"Host not found\", self._server, e)\n            else:\n                raise SimplexConnectionError(\"Connection error\", self._server, e)\n        except Exception as e:\n            # For other errors, still use our custom error but with the original exception\n            raise SimplexConnectionError(\n                \"Unexpected error while connecting\", self._server, e\n            )\n\n    async def disconnect(self) -&gt; None:\n        \"\"\"Disconnect from the chat server and clean up resources.\"\"\"\n        if not self._connected:\n            return\n\n        self._connected = False\n        if self._recv_task:\n            self._recv_task.cancel()\n            with contextlib.suppress(asyncio.CancelledError):\n                await self._recv_task\n        if self._transport:\n            await self._transport.close()\n        if self._event_q:\n            await self._event_q.close()\n        self._pending.clear()\n        logger.info(\"Disconnected from chat server\")\n\n    async def send_command(\n        self,\n        cmd: Union[SimplexCommand, Dict[str, Any]],\n        expect_response: bool = True,\n    ) -&gt; Optional[CommandResponse]:\n        \"\"\"\n        Send a command to the chat server and optionally await a response.\n\n        Args:\n            cmd: The command object to send (SimplexCommand or compatible dict).\n            expect_response: If True, await and return the response matching the corr_id.\n\n        Returns:\n            The response data, or None if not expecting a response.\n\n        Raises:\n            SimplexClientError: If not connected or timeout waiting for response.\n            SimplexCommandError: If the command results in an error response.\n        \"\"\"\n        if not self._transport or not self._connected:\n            raise SimplexClientError(\n                \"Not connected to chat server. Use `async with SimplexClient(...)`\"\n            )\n\n        # Generate sequential numeric ID\n        self._client_corr_id += 1\n        corr_id = str(self._client_corr_id)\n        logger.debug(f\"Generated correlation ID: {corr_id}\")\n\n        # Create a command string using the command's to_cmd_string method\n        if hasattr(cmd, \"to_cmd_string\"):\n            cmd_str = cmd.to_cmd_string()\n        else:\n            cmd_str = str(cmd)\n\n        logger.debug(f\"Sending command: {cmd_str}\")\n\n        # Create a ChatSrvRequest with the correlation ID and command string\n        request = ChatSrvRequest(corr_id=corr_id, cmd=cmd_str)\n\n        if expect_response:\n            fut = asyncio.get_running_loop().create_future()\n            self._pending[corr_id] = fut\n\n        await self._transport.write(request)\n\n        if expect_response:\n            try:\n                raw_resp = await asyncio.wait_for(fut, self._timeout)\n\n                # Handle error responses\n                if raw_resp.get(\"type\") == \"chatCmdError\":\n                    error_info = raw_resp.get(\"chatError\", {})\n                    error_type = error_info.get(\"type\", \"unknown\")\n                    print(\"ERROR: \", error_info)\n\n                    # Provide more specific error information for store errors\n                    if error_type == \"errorStore\" and isinstance(\n                        error_info.get(\"storeError\"), dict\n                    ):\n                        store_error = error_info.get(\"storeError\", {})\n                        store_error_type = store_error.get(\"type\")\n\n                        # Convert raw response to a StoreErrorType for enhanced detection\n                        from .responses.base import StoreErrorType\n\n                        store_error_obj = StoreErrorType(\n                            type=\"errorStore\", storeError=store_error\n                        )\n\n                        # For certain error types, return a response object instead of raising an exception\n                        # This allows domain-specific clients to handle these errors in a custom way\n                        if (\n                            store_error_obj.is_contact_link_not_found_error()\n                            or store_error_obj.is_duplicate_contact_link_error()\n                        ):\n                            logger.debug(\n                                f\"Returning store error as response: {store_error_type}\"\n                            )\n                            return store_error_obj\n\n                        # Check for specific store error types and provide helpful suggestions\n                        if store_error_obj.is_contact_link_not_found_error():\n                            error_msg = \"Command error: No chat address exists. Create one first with client.users.create_profile_address()\"\n                        elif store_error_obj.is_duplicate_contact_link_error():\n                            error_msg = \"Command error: Chat address already exists. Use client.users.show_profile_address() to view it\"\n                        elif store_error_type:\n                            error_msg = (\n                                f\"Command error: {error_type} - {store_error_type}\"\n                            )\n                        else:\n                            error_msg = f\"Command error: {error_type}\"\n                    elif error_type == \"error\":\n                        error_msg = f\"ChatError: {error_info['errorType']['type']}\"\n                    else:\n                        error_msg = f\"Command error: {error_type}\"\n\n                    raise SimplexCommandError(error_msg, raw_resp)\n\n                # Use ResponseFactory to create the appropriate response object\n                typed_resp = ResponseFactory.create(raw_resp)\n\n                return typed_resp\n            except asyncio.TimeoutError:\n                error_msg = f\"Timeout waiting for response to command: {cmd_str}\"\n                raise SimplexClientError(error_msg)\n            finally:\n                self._pending.pop(corr_id, None)\n\n        return None\n\n    async def _recv_loop(self):\n        \"\"\"Background task that processes incoming messages from the transport.\"\"\"\n        assert self._transport is not None and self._event_q is not None\n        try:\n            async for resp in self._transport:\n                # Extract the correlation ID and response data\n                resp_corr_id = getattr(resp, \"corr_id\", None)\n                resp_data = getattr(resp, \"resp\", resp)\n\n                logger.debug(f\"Received response with correlation ID: {resp_corr_id}\")\n\n                # If response has a correlation ID and matches a pending request\n                if resp_corr_id and resp_corr_id in self._pending:\n                    fut = self._pending[resp_corr_id]\n                    if not fut.done():\n                        logger.debug(\n                            f\"Resolving future for correlation ID: {resp_corr_id}\"\n                        )\n                        fut.set_result(resp_data)\n                else:\n                    # No matching future found, treat as an event\n                    logger.debug(\"No matching future found, enqueuing as event\")\n                    await self._event_q.enqueue(resp_data)\n        except Exception as e:\n            logger.exception(f\"Exception in recv_loop: {e}\")\n            self._connected = False\n\n    async def events(self) -&gt; AsyncGenerator[CommandResponse, None]:\n        \"\"\"\n        Async generator yielding server events (responses not matched to a request).\n\n        Usage:\n            async for event in client.events():\n                # Process event\n        \"\"\"\n        if not self._event_q or not self._connected:\n            raise SimplexClientError(\"Not connected to chat server\")\n\n        while self._connected:\n            try:\n                evt = await self._event_q.dequeue()\n                if evt:\n                    yield evt\n            except Exception as e:\n                logger.error(f\"Error in events generator: {e}\")\n                if not self._connected:\n                    break\n\n    @property\n    def connected(self) -&gt; bool:\n        \"\"\"Whether the client is currently connected.\"\"\"\n        return self._connected\n\n    @property\n    def users(self) -&gt; \"UsersClient\":\n        \"\"\"Access user-related operations with a fluent API.\"\"\"\n        if self._users_client is None:\n            from .clients.users import UsersClient\n\n            self._users_client = UsersClient(self)\n        return self._users_client\n\n    @property\n    def groups(self) -&gt; \"GroupsClient\":\n        \"\"\"Access group-related operations with a fluent API.\"\"\"\n        if self._groups_client is None:\n            from .clients.groups import GroupsClient\n\n            self._groups_client = GroupsClient(self)\n        return self._groups_client\n\n    @property\n    def chats(self) -&gt; \"ChatsClient\":\n        \"\"\"Access chat-related operations with a fluent API.\"\"\"\n        if self._chats_client is None:\n            from .clients.chats import ChatsClient\n\n            self._chats_client = ChatsClient(self)\n        return self._chats_client\n\n    @property\n    def files(self) -&gt; \"FilesClient\":\n        \"\"\"Access file-related operations with a fluent API.\"\"\"\n        if self._files_client is None:\n            from .clients.files import FilesClient\n\n            self._files_client = FilesClient(self)\n        return self._files_client\n\n    @property\n    def database(self) -&gt; \"DatabaseClient\":\n        \"\"\"Access database-related operations with a fluent API.\"\"\"\n        if self._database_client is None:\n            from .clients.database import DatabaseClient\n\n            self._database_client = DatabaseClient(self)\n        return self._database_client\n\n    @property\n    def connections(self) -&gt; \"ConnectionsClient\":\n        \"\"\"Access connection-related operations with a fluent API.\"\"\"\n        if self._connections_client is None:\n            from .clients.connections import ConnectionsClient\n\n            self._connections_client = ConnectionsClient(self)\n        return self._connections_client\n</code></pre>"},{"location":"api/client/#simplex_python.client.SimplexClient.chats","title":"<code>chats: ChatsClient</code>  <code>property</code>","text":"<p>Access chat-related operations with a fluent API.</p>"},{"location":"api/client/#simplex_python.client.SimplexClient.connected","title":"<code>connected: bool</code>  <code>property</code>","text":"<p>Whether the client is currently connected.</p>"},{"location":"api/client/#simplex_python.client.SimplexClient.connections","title":"<code>connections: ConnectionsClient</code>  <code>property</code>","text":"<p>Access connection-related operations with a fluent API.</p>"},{"location":"api/client/#simplex_python.client.SimplexClient.database","title":"<code>database: DatabaseClient</code>  <code>property</code>","text":"<p>Access database-related operations with a fluent API.</p>"},{"location":"api/client/#simplex_python.client.SimplexClient.files","title":"<code>files: FilesClient</code>  <code>property</code>","text":"<p>Access file-related operations with a fluent API.</p>"},{"location":"api/client/#simplex_python.client.SimplexClient.groups","title":"<code>groups: GroupsClient</code>  <code>property</code>","text":"<p>Access group-related operations with a fluent API.</p>"},{"location":"api/client/#simplex_python.client.SimplexClient.users","title":"<code>users: UsersClient</code>  <code>property</code>","text":"<p>Access user-related operations with a fluent API.</p>"},{"location":"api/client/#simplex_python.client.SimplexClient.__init__","title":"<code>__init__(server: Union[ChatServer, str], timeout: float = 10.0, qsize: int = 100)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>server</code> <code>Union[ChatServer, str]</code> <p>ChatServer object or WebSocket URL to connect to.</p> required <code>timeout</code> <code>float</code> <p>Connection and command timeout in seconds.</p> <code>10.0</code> <code>qsize</code> <code>int</code> <p>Max size of the event queue.</p> <code>100</code> Source code in <code>simplex_python/client.py</code> <pre><code>def __init__(\n    self, server: Union[ChatServer, str], timeout: float = 10.0, qsize: int = 100\n):\n    \"\"\"\n    Args:\n        server: ChatServer object or WebSocket URL to connect to.\n        timeout: Connection and command timeout in seconds.\n        qsize: Max size of the event queue.\n    \"\"\"\n    self._server = server\n    self._timeout = timeout\n    self._qsize = qsize\n    self._transport: Optional[ChatTransport] = None\n    self._event_q: Optional[ABQueue[CommandResponse]] = None\n    self._pending: OrderedDict[str, asyncio.Future] = OrderedDict()\n    self._recv_task: Optional[asyncio.Task] = None\n    self._connected = False\n    self._client_corr_id = 0  # Sequential ID counter\n\n    # Lazy-loaded domain-specific client instances\n    self._users_client = None\n    self._groups_client = None\n    self._chats_client = None\n    self._files_client = None\n    self._database_client = None\n    self._connections_client = None\n</code></pre>"},{"location":"api/client/#simplex_python.client.SimplexClient.connect","title":"<code>connect() -&gt; None</code>  <code>async</code>","text":"<p>Establish a connection to the chat server.</p> Source code in <code>simplex_python/client.py</code> <pre><code>async def connect(self) -&gt; None:\n    \"\"\"Establish a connection to the chat server.\"\"\"\n    if self._connected:\n        return\n\n    try:\n        self._transport = await ChatTransport.connect(\n            self._server, timeout=self._timeout, qsize=self._qsize\n        )\n        self._event_q = ABQueue[CommandResponse](self._qsize)\n        self._recv_task = asyncio.create_task(self._recv_loop())\n        self._connected = True\n        logger.info(\"Connected to chat server\")\n    except OSError as e:\n        # This is likely a connection error - provide helpful information\n        if \"Connect call failed\" in str(e):\n            raise SimplexConnectionError(\"Connection refused\", self._server, e)\n        elif \"Name or service not known\" in str(e):\n            raise SimplexConnectionError(\"Host not found\", self._server, e)\n        else:\n            raise SimplexConnectionError(\"Connection error\", self._server, e)\n    except Exception as e:\n        # For other errors, still use our custom error but with the original exception\n        raise SimplexConnectionError(\n            \"Unexpected error while connecting\", self._server, e\n        )\n</code></pre>"},{"location":"api/client/#simplex_python.client.SimplexClient.disconnect","title":"<code>disconnect() -&gt; None</code>  <code>async</code>","text":"<p>Disconnect from the chat server and clean up resources.</p> Source code in <code>simplex_python/client.py</code> <pre><code>async def disconnect(self) -&gt; None:\n    \"\"\"Disconnect from the chat server and clean up resources.\"\"\"\n    if not self._connected:\n        return\n\n    self._connected = False\n    if self._recv_task:\n        self._recv_task.cancel()\n        with contextlib.suppress(asyncio.CancelledError):\n            await self._recv_task\n    if self._transport:\n        await self._transport.close()\n    if self._event_q:\n        await self._event_q.close()\n    self._pending.clear()\n    logger.info(\"Disconnected from chat server\")\n</code></pre>"},{"location":"api/client/#simplex_python.client.SimplexClient.events","title":"<code>events() -&gt; AsyncGenerator[CommandResponse, None]</code>  <code>async</code>","text":"<p>Async generator yielding server events (responses not matched to a request).</p> Usage <p>async for event in client.events():     # Process event</p> Source code in <code>simplex_python/client.py</code> <pre><code>async def events(self) -&gt; AsyncGenerator[CommandResponse, None]:\n    \"\"\"\n    Async generator yielding server events (responses not matched to a request).\n\n    Usage:\n        async for event in client.events():\n            # Process event\n    \"\"\"\n    if not self._event_q or not self._connected:\n        raise SimplexClientError(\"Not connected to chat server\")\n\n    while self._connected:\n        try:\n            evt = await self._event_q.dequeue()\n            if evt:\n                yield evt\n        except Exception as e:\n            logger.error(f\"Error in events generator: {e}\")\n            if not self._connected:\n                break\n</code></pre>"},{"location":"api/client/#simplex_python.client.SimplexClient.send_command","title":"<code>send_command(cmd: Union[SimplexCommand, Dict[str, Any]], expect_response: bool = True) -&gt; Optional[CommandResponse]</code>  <code>async</code>","text":"<p>Send a command to the chat server and optionally await a response.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>Union[SimplexCommand, Dict[str, Any]]</code> <p>The command object to send (SimplexCommand or compatible dict).</p> required <code>expect_response</code> <code>bool</code> <p>If True, await and return the response matching the corr_id.</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[CommandResponse]</code> <p>The response data, or None if not expecting a response.</p> <p>Raises:</p> Type Description <code>SimplexClientError</code> <p>If not connected or timeout waiting for response.</p> <code>SimplexCommandError</code> <p>If the command results in an error response.</p> Source code in <code>simplex_python/client.py</code> <pre><code>async def send_command(\n    self,\n    cmd: Union[SimplexCommand, Dict[str, Any]],\n    expect_response: bool = True,\n) -&gt; Optional[CommandResponse]:\n    \"\"\"\n    Send a command to the chat server and optionally await a response.\n\n    Args:\n        cmd: The command object to send (SimplexCommand or compatible dict).\n        expect_response: If True, await and return the response matching the corr_id.\n\n    Returns:\n        The response data, or None if not expecting a response.\n\n    Raises:\n        SimplexClientError: If not connected or timeout waiting for response.\n        SimplexCommandError: If the command results in an error response.\n    \"\"\"\n    if not self._transport or not self._connected:\n        raise SimplexClientError(\n            \"Not connected to chat server. Use `async with SimplexClient(...)`\"\n        )\n\n    # Generate sequential numeric ID\n    self._client_corr_id += 1\n    corr_id = str(self._client_corr_id)\n    logger.debug(f\"Generated correlation ID: {corr_id}\")\n\n    # Create a command string using the command's to_cmd_string method\n    if hasattr(cmd, \"to_cmd_string\"):\n        cmd_str = cmd.to_cmd_string()\n    else:\n        cmd_str = str(cmd)\n\n    logger.debug(f\"Sending command: {cmd_str}\")\n\n    # Create a ChatSrvRequest with the correlation ID and command string\n    request = ChatSrvRequest(corr_id=corr_id, cmd=cmd_str)\n\n    if expect_response:\n        fut = asyncio.get_running_loop().create_future()\n        self._pending[corr_id] = fut\n\n    await self._transport.write(request)\n\n    if expect_response:\n        try:\n            raw_resp = await asyncio.wait_for(fut, self._timeout)\n\n            # Handle error responses\n            if raw_resp.get(\"type\") == \"chatCmdError\":\n                error_info = raw_resp.get(\"chatError\", {})\n                error_type = error_info.get(\"type\", \"unknown\")\n                print(\"ERROR: \", error_info)\n\n                # Provide more specific error information for store errors\n                if error_type == \"errorStore\" and isinstance(\n                    error_info.get(\"storeError\"), dict\n                ):\n                    store_error = error_info.get(\"storeError\", {})\n                    store_error_type = store_error.get(\"type\")\n\n                    # Convert raw response to a StoreErrorType for enhanced detection\n                    from .responses.base import StoreErrorType\n\n                    store_error_obj = StoreErrorType(\n                        type=\"errorStore\", storeError=store_error\n                    )\n\n                    # For certain error types, return a response object instead of raising an exception\n                    # This allows domain-specific clients to handle these errors in a custom way\n                    if (\n                        store_error_obj.is_contact_link_not_found_error()\n                        or store_error_obj.is_duplicate_contact_link_error()\n                    ):\n                        logger.debug(\n                            f\"Returning store error as response: {store_error_type}\"\n                        )\n                        return store_error_obj\n\n                    # Check for specific store error types and provide helpful suggestions\n                    if store_error_obj.is_contact_link_not_found_error():\n                        error_msg = \"Command error: No chat address exists. Create one first with client.users.create_profile_address()\"\n                    elif store_error_obj.is_duplicate_contact_link_error():\n                        error_msg = \"Command error: Chat address already exists. Use client.users.show_profile_address() to view it\"\n                    elif store_error_type:\n                        error_msg = (\n                            f\"Command error: {error_type} - {store_error_type}\"\n                        )\n                    else:\n                        error_msg = f\"Command error: {error_type}\"\n                elif error_type == \"error\":\n                    error_msg = f\"ChatError: {error_info['errorType']['type']}\"\n                else:\n                    error_msg = f\"Command error: {error_type}\"\n\n                raise SimplexCommandError(error_msg, raw_resp)\n\n            # Use ResponseFactory to create the appropriate response object\n            typed_resp = ResponseFactory.create(raw_resp)\n\n            return typed_resp\n        except asyncio.TimeoutError:\n            error_msg = f\"Timeout waiting for response to command: {cmd_str}\"\n            raise SimplexClientError(error_msg)\n        finally:\n            self._pending.pop(corr_id, None)\n\n    return None\n</code></pre>"},{"location":"api/client/#chattransport","title":"ChatTransport","text":"<p>The transport layer handles the low-level connection details for communication with the SimpleX server.</p>"},{"location":"api/client/#simplex_python.transport.ChatTransport","title":"<code>simplex_python.transport.ChatTransport</code>","text":"<p>               Bases: <code>Transport[ChatSrvRequest, ChatSrvResponse]</code></p> <p>High-level transport abstraction for Simplex chat protocol.</p> <p>Wraps a WSTransport and provides protocol-aware send/receive methods. Uses ChatCommand and CommandResponse for type safety.</p> Source code in <code>simplex_python/transport.py</code> <pre><code>class ChatTransport(Transport[ChatSrvRequest, ChatSrvResponse]):\n    \"\"\"High-level transport abstraction for Simplex chat protocol.\n\n    Wraps a WSTransport and provides protocol-aware send/receive methods.\n    Uses ChatCommand and CommandResponse for type safety.\n    \"\"\"\n\n    def __init__(self, ws_transport: WSTransport, timeout: float, qsize: int):\n        super().__init__(qsize)\n        self._ws = ws_transport\n        self.timeout = timeout\n\n    @classmethod\n    async def connect(\n        cls, server: ChatServer | str, timeout: float = 10.0, qsize: int = 100\n    ) -&gt; \"ChatTransport\":\n        \"\"\"Establish a connection to the given ChatServer or URL.\"\"\"\n        if isinstance(server, str):\n            url = server\n        else:\n            url = (\n                f\"ws://{server.host}:{server.port}\"\n                if server.port\n                else f\"ws://{server.host}\"\n            )\n        ws = await WSTransport.connect(url, timeout=timeout, qsize=qsize)\n        return cls(ws, timeout, qsize)\n\n    async def close(self) -&gt; None:\n        await self._ws.close()\n        await self.queue.close()\n\n    async def write(self, req: ChatSrvRequest) -&gt; None:\n        \"\"\"\n        Serialize and send the command envelope.\n        Args:\n            req: A ChatSrvRequest with corrId and cmd\n        \"\"\"\n        # Convert to JSON and send\n        data = json.dumps({\"corrId\": req.corr_id, \"cmd\": req.cmd})\n        # print(f\"[DEBUG] Sending command envelope: {data}\")\n        await self._ws.write(data)\n\n    async def read(self) -&gt; ChatSrvResponse:\n        # Deserialize response as needed\n        msg = await self._ws.read()\n        # print(f\"[DEBUG] Received raw message: {msg}\")\n        if isinstance(msg, bytes):\n            msg = msg.decode(\"utf-8\")\n        obj = json.loads(msg)\n\n        # Create the response object with proper typing\n        corr_id = obj.get(\"corrId\")\n        resp_data = obj.get(\"resp\")\n\n        # Create a proper ChatSrvResponse object\n        return ChatSrvResponse(corr_id=corr_id, resp=resp_data)\n\n    async def __anext__(self):\n        return await self.read()\n</code></pre>"},{"location":"api/client/#simplex_python.transport.ChatTransport.connect","title":"<code>connect(server: ChatServer | str, timeout: float = 10.0, qsize: int = 100) -&gt; 'ChatTransport'</code>  <code>async</code> <code>classmethod</code>","text":"<p>Establish a connection to the given ChatServer or URL.</p> Source code in <code>simplex_python/transport.py</code> <pre><code>@classmethod\nasync def connect(\n    cls, server: ChatServer | str, timeout: float = 10.0, qsize: int = 100\n) -&gt; \"ChatTransport\":\n    \"\"\"Establish a connection to the given ChatServer or URL.\"\"\"\n    if isinstance(server, str):\n        url = server\n    else:\n        url = (\n            f\"ws://{server.host}:{server.port}\"\n            if server.port\n            else f\"ws://{server.host}\"\n        )\n    ws = await WSTransport.connect(url, timeout=timeout, qsize=qsize)\n    return cls(ws, timeout, qsize)\n</code></pre>"},{"location":"api/client/#simplex_python.transport.ChatTransport.write","title":"<code>write(req: ChatSrvRequest) -&gt; None</code>  <code>async</code>","text":"<p>Serialize and send the command envelope. Args:     req: A ChatSrvRequest with corrId and cmd</p> Source code in <code>simplex_python/transport.py</code> <pre><code>async def write(self, req: ChatSrvRequest) -&gt; None:\n    \"\"\"\n    Serialize and send the command envelope.\n    Args:\n        req: A ChatSrvRequest with corrId and cmd\n    \"\"\"\n    # Convert to JSON and send\n    data = json.dumps({\"corrId\": req.corr_id, \"cmd\": req.cmd})\n    # print(f\"[DEBUG] Sending command envelope: {data}\")\n    await self._ws.write(data)\n</code></pre>"},{"location":"api/client/#error-types","title":"Error Types","text":""},{"location":"api/client/#simplex_python.client_errors","title":"<code>simplex_python.client_errors</code>","text":"<p>Error handling for the Simplex chat client.</p> <p>This module provides structured error handling for the Simplex chat client, allowing for more specific error details and response context when operations fail.</p>"},{"location":"api/client/#simplex_python.client_errors.SimplexClientError","title":"<code>SimplexClientError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for client-level errors in SimplexClient.</p> <p>Used for connection, transport, and general client operation errors.</p> Source code in <code>simplex_python/client_errors.py</code> <pre><code>class SimplexClientError(Exception):\n    \"\"\"\n    Exception raised for client-level errors in SimplexClient.\n\n    Used for connection, transport, and general client operation errors.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"api/client/#simplex_python.client_errors.SimplexCommandError","title":"<code>SimplexCommandError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in SimplexClient command execution.</p> <p>Provides details about the specific error and includes the original response for further inspection when available.</p> Source code in <code>simplex_python/client_errors.py</code> <pre><code>class SimplexCommandError(Exception):\n    \"\"\"\n    Exception raised for errors in SimplexClient command execution.\n\n    Provides details about the specific error and includes the original response\n    for further inspection when available.\n    \"\"\"\n\n    def __init__(self, message: str, response: Optional[CommandResponse] = None):\n        \"\"\"\n        Initialize a new SimplexCommandError.\n\n        Args:\n            message: Human-readable error description\n            response: Optional original response object that triggered the error\n        \"\"\"\n        self.message = message\n        self.response = response\n        super().__init__(message)\n</code></pre>"},{"location":"api/client/#simplex_python.client_errors.SimplexCommandError.__init__","title":"<code>__init__(message: str, response: Optional[CommandResponse] = None)</code>","text":"<p>Initialize a new SimplexCommandError.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error description</p> required <code>response</code> <code>Optional[CommandResponse]</code> <p>Optional original response object that triggered the error</p> <code>None</code> Source code in <code>simplex_python/client_errors.py</code> <pre><code>def __init__(self, message: str, response: Optional[CommandResponse] = None):\n    \"\"\"\n    Initialize a new SimplexCommandError.\n\n    Args:\n        message: Human-readable error description\n        response: Optional original response object that triggered the error\n    \"\"\"\n    self.message = message\n    self.response = response\n    super().__init__(message)\n</code></pre>"},{"location":"api/client/#simplex_python.client_errors.SimplexConnectionError","title":"<code>SimplexConnectionError</code>","text":"<p>               Bases: <code>SimplexClientError</code></p> <p>Exception raised for connection errors in SimplexClient.</p> <p>Provides detailed information about connection issues, including suggestions for common problems like server not running.</p> Source code in <code>simplex_python/client_errors.py</code> <pre><code>class SimplexConnectionError(SimplexClientError):\n    \"\"\"\n    Exception raised for connection errors in SimplexClient.\n\n    Provides detailed information about connection issues, including\n    suggestions for common problems like server not running.\n    \"\"\"\n\n    def __init__(self, message: str, url: str, original_error: Optional[Exception] = None):\n        \"\"\"\n        Initialize a new SimplexConnectionError.\n\n        Args:\n            message: Human-readable error description\n            url: The URL that failed to connect\n            original_error: The original exception that caused the connection failure\n        \"\"\"\n        self.url = url\n        self.original_error = original_error\n\n        # Build a detailed error message with helpful suggestions\n        detailed_message = f\"Failed to connect to SimpleX server at {url}: {message}\"\n\n        # Add common troubleshooting tips\n        detailed_message += \"\\n\\nPossible causes:\"\n        detailed_message += \"\\n- SimpleX Chat server is not running at the specified address and port\"\n        detailed_message += \"\\n- Network connectivity issues\"\n        detailed_message += \"\\n- Incorrect host or port in the URL\"\n\n        detailed_message += \"\\n\\nTroubleshooting steps:\"\n        detailed_message += \"\\n1. Verify the SimpleX Chat server is running\"\n        detailed_message += \"\\n2. Check the host and port in your connection URL\"\n        detailed_message += \"\\n3. Ensure there are no firewall or network restrictions\"\n\n        if original_error:\n            detailed_message += f\"\\n\\nOriginal error: {original_error}\"\n\n        super().__init__(detailed_message)\n</code></pre>"},{"location":"api/client/#simplex_python.client_errors.SimplexConnectionError.__init__","title":"<code>__init__(message: str, url: str, original_error: Optional[Exception] = None)</code>","text":"<p>Initialize a new SimplexConnectionError.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error description</p> required <code>url</code> <code>str</code> <p>The URL that failed to connect</p> required <code>original_error</code> <code>Optional[Exception]</code> <p>The original exception that caused the connection failure</p> <code>None</code> Source code in <code>simplex_python/client_errors.py</code> <pre><code>def __init__(self, message: str, url: str, original_error: Optional[Exception] = None):\n    \"\"\"\n    Initialize a new SimplexConnectionError.\n\n    Args:\n        message: Human-readable error description\n        url: The URL that failed to connect\n        original_error: The original exception that caused the connection failure\n    \"\"\"\n    self.url = url\n    self.original_error = original_error\n\n    # Build a detailed error message with helpful suggestions\n    detailed_message = f\"Failed to connect to SimpleX server at {url}: {message}\"\n\n    # Add common troubleshooting tips\n    detailed_message += \"\\n\\nPossible causes:\"\n    detailed_message += \"\\n- SimpleX Chat server is not running at the specified address and port\"\n    detailed_message += \"\\n- Network connectivity issues\"\n    detailed_message += \"\\n- Incorrect host or port in the URL\"\n\n    detailed_message += \"\\n\\nTroubleshooting steps:\"\n    detailed_message += \"\\n1. Verify the SimpleX Chat server is running\"\n    detailed_message += \"\\n2. Check the host and port in your connection URL\"\n    detailed_message += \"\\n3. Ensure there are no firewall or network restrictions\"\n\n    if original_error:\n        detailed_message += f\"\\n\\nOriginal error: {original_error}\"\n\n    super().__init__(detailed_message)\n</code></pre>"},{"location":"api/users/","title":"Users API","text":"<p>The Users API provides comprehensive functionality for managing user profiles, identities, and connections in the SimpleX Chat system.</p>"},{"location":"api/users/#usersclient","title":"UsersClient","text":"<p>The <code>UsersClient</code> class is accessible as a property of the main <code>SimplexClient</code> object via <code>client.users</code>.</p>"},{"location":"api/users/#simplex_python.clients.users.UsersClient","title":"<code>simplex_python.clients.users.UsersClient</code>","text":"<p>Client for user-related operations in SimplexClient.</p> <p>This client is accessed via the <code>users</code> property of SimplexClient and provides methods for managing user profiles and contact addresses.</p> Source code in <code>simplex_python/clients/users.py</code> <pre><code>class UsersClient:\n    \"\"\"\n    Client for user-related operations in SimplexClient.\n\n    This client is accessed via the `users` property of SimplexClient\n    and provides methods for managing user profiles and contact addresses.\n    \"\"\"\n\n    def __init__(self, client: \"SimplexClient\"):\n        \"\"\"\n        Args:\n            client: The parent SimplexClient instance.\n        \"\"\"\n        self._client = client\n\n    async def get_active(\n        self, include_contact_link: bool = True\n    ) -&gt; Optional[ActiveUserResponse]:\n        \"\"\"\n        Get the currently active user profile.\n\n        Args:\n            include_contact_link: Whether to check and include the user's contact link if it exists (default: True)\n\n        Returns:\n            ActiveUserResponse containing the user profile object, or None if no active user exists.\n            If include_contact_link is True and the user has a contact link, it will be included in the response.\n\n        Raises:\n            SimplexCommandError: If there was an error executing the command.\n        \"\"\"\n        cmd = ShowActiveUser(type=\"showActiveUser\")\n        resp = await self._client.send_command(cmd)\n\n        # If we got None back, it means there's no active user\n        if resp is None:\n            return None\n\n        # Handle special case where we get a \"no active user\" error\n        if hasattr(resp, \"type\") and resp.type == \"chatCmdError\":\n            # Check if it's specifically the \"no active user\" error\n            if (\n                hasattr(resp, \"chatError\")\n                and resp.chatError.get(\"type\") == \"error\"\n                and resp.chatError.get(\"errorType\", {}).get(\"type\") == \"noActiveUser\"\n            ):\n                return None\n\n        # If we got back a proper ActiveUserResponse, process it\n        if isinstance(resp, ActiveUserResponse):\n            # If requested, try to get the contact link for the user\n            if include_contact_link and \"contactLink\" not in resp.profile:\n                try:\n                    # Check if the user has a contact link\n                    from ..commands.users import ShowMyAddress\n\n                    address_resp = await self._client.send_command(\n                        ShowMyAddress(type=\"showMyAddress\")\n                    )\n\n                    # Extract the contact link - could be in different formats\n                    contact_link = None\n                    if hasattr(address_resp, \"contactLink\"):\n                        if isinstance(address_resp.contactLink, str):\n                            contact_link = address_resp.contactLink\n                        elif (\n                            isinstance(address_resp.contactLink, dict)\n                            and \"connLinkContact\" in address_resp.contactLink\n                        ):\n                            # Extract from nested dictionary\n                            if \"connFullLink\" in address_resp.contactLink.get(\n                                \"connLinkContact\", {}\n                            ):\n                                contact_link = address_resp.contactLink[\n                                    \"connLinkContact\"\n                                ][\"connFullLink\"]\n\n                    # Only update if we found a valid link\n                    if contact_link:\n                        # Update the profile to include the contact link\n                        resp.profile[\"contactLink\"] = contact_link\n                        # Also update the original user data for backward compatibility\n                        if \"profile\" in resp.user:\n                            resp.user[\"profile\"][\"contactLink\"] = contact_link\n                except Exception as e:\n                    # Don't fail the whole operation if we can't get the contact link\n                    logger.debug(f\"Failed to get contact link for active user: {e}\")\n\n            return resp\n\n        # If we received some other type, raise an error\n        error_msg = f\"Failed to get active user: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    async def list_users(\n        self, include_contact_links: bool = False\n    ) -&gt; UsersListResponse:\n        \"\"\"\n        List all users in the SimpleX Chat system.\n\n        This method retrieves information about all users configured in the\n        system, including their profiles, unread counts, and active status.\n\n        Args:\n            include_contact_links: Whether to fetch and include contact links for each user (default: False).\n                                  Note that enabling this option will switch to each user to fetch their contact link,\n                                  which could be slower with many users.\n\n        Returns:\n            UsersListResponse containing a list of user items with detailed information.\n            The response is iterable and supports indexing to access individual UserItem objects.\n            If include_contact_links is True, each user's profile will include their contact link if available.\n\n        Example:\n            ```python\n            # Get all users without contact links (faster)\n            users = await client.users.list_users()\n\n            # Get all users with their contact links (slower but more complete)\n            users_with_links = await client.users.list_users(include_contact_links=True)\n\n            # Print number of users\n            print(f\"Found {len(users)} users\")\n\n            # Iterate through users\n            for user in users:\n                print(f\"User: {user.display_name} (ID: {user.user_id})\")\n                print(f\"Active: {user.active_user}\")\n                print(f\"Unread messages: {user.unread_count}\")\n                if 'contactLink' in user.profile:\n                    print(f\"Contact Link: {user.profile.get('contactLink')}\")\n\n            # Access by index\n            first_user = users[0]\n            ```\n\n        Raises:\n            SimplexCommandError: If there was an error executing the command.\n        \"\"\"\n        cmd = ListUsers(type=\"listUsers\")\n        resp = await self._client.send_command(cmd)\n\n        # If we got None back, that's unexpected for this command\n        if resp is None:\n            error_msg = \"Failed to list users: No response\"\n            logger.error(error_msg)\n            raise SimplexCommandError(error_msg, resp)\n\n        # If we got back a proper UsersListResponse, process it\n        if isinstance(resp, UsersListResponse):\n            # If requested, fetch contact links for each user\n            if include_contact_links:\n                # Remember the current active user ID to restore later\n                current_active = await self.get_active(include_contact_link=False)\n                current_active_id = current_active.user_id if current_active else None\n\n                try:\n                    # Import here to avoid circular imports\n                    from ..commands.users import ShowMyAddress\n\n                    # For each user in the list, switch to them and get their contact link\n                    for user_item in resp:\n                        if user_item.user_id == current_active_id:\n                            # For the already active user, we can just get their contact link directly\n                            try:\n                                address_resp = await self._client.send_command(\n                                    ShowMyAddress(type=\"showMyAddress\")\n                                )\n                                # Extract the contact link - could be in different formats\n                                contact_link = None\n                                if hasattr(address_resp, \"contactLink\"):\n                                    if isinstance(address_resp.contactLink, str):\n                                        contact_link = address_resp.contactLink\n                                    elif (\n                                        isinstance(address_resp.contactLink, dict)\n                                        and \"connLinkContact\"\n                                        in address_resp.contactLink\n                                    ):\n                                        # Extract from nested dictionary\n                                        if (\n                                            \"connFullLink\"\n                                            in address_resp.contactLink.get(\n                                                \"connLinkContact\", {}\n                                            )\n                                        ):\n                                            contact_link = address_resp.contactLink[\n                                                \"connLinkContact\"\n                                            ][\"connFullLink\"]\n                                # Only update if we found a valid link\n                                if contact_link:\n                                    user_item.profile[\"contactLink\"] = contact_link\n                                    if \"profile\" in user_item.user:\n                                        user_item.user[\"profile\"][\"contactLink\"] = (\n                                            contact_link\n                                        )\n                            except Exception as e:\n                                logger.debug(\n                                    f\"Failed to get contact link for active user {user_item.display_name}: {e}\"\n                                )\n                        else:\n                            # For other users, we need to switch to them first\n                            try:\n                                # Switch to this user\n                                await self.set_active(user_item.user_id)\n\n                                # Get their contact link\n                                address_resp = await self._client.send_command(\n                                    ShowMyAddress(type=\"showMyAddress\")\n                                )\n                                # Extract the contact link - could be in different formats\n                                contact_link = None\n                                if hasattr(address_resp, \"contactLink\"):\n                                    if isinstance(address_resp.contactLink, str):\n                                        contact_link = address_resp.contactLink\n                                    elif (\n                                        isinstance(address_resp.contactLink, dict)\n                                        and \"connLinkContact\"\n                                        in address_resp.contactLink\n                                    ):\n                                        # Extract from nested dictionary\n                                        if (\n                                            \"connFullLink\"\n                                            in address_resp.contactLink.get(\n                                                \"connLinkContact\", {}\n                                            )\n                                        ):\n                                            contact_link = address_resp.contactLink[\n                                                \"connLinkContact\"\n                                            ][\"connFullLink\"]\n                                # Only update if we found a valid link\n                                if contact_link:\n                                    user_item.profile[\"contactLink\"] = contact_link\n                                    if \"profile\" in user_item.user:\n                                        user_item.user[\"profile\"][\"contactLink\"] = (\n                                            contact_link\n                                        )\n                            except Exception as e:\n                                logger.debug(\n                                    f\"Failed to get contact link for user {user_item.display_name}: {e}\"\n                                )\n\n                    # Restore the original active user\n                    if current_active_id is not None:\n                        await self.set_active(current_active_id)\n\n                except Exception as e:\n                    logger.warning(f\"Failed to include contact links for users: {e}\")\n                    # If we switch users but fail, try to restore the original active user\n                    if current_active_id is not None:\n                        try:\n                            await self.set_active(current_active_id)\n                        except Exception as restore_error:\n                            logger.error(\n                                f\"Failed to restore original active user: {restore_error}\"\n                            )\n\n            return resp\n\n        # If we received some other type, raise an error\n        error_msg = f\"Failed to list users: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    async def set_active(\n        self, user_id: int, view_pwd: Optional[str] = None\n    ) -&gt; ActiveUserResponse:\n        \"\"\"\n        Set the active user.\n\n        Changes the current active user in the SimpleX Chat system to the user\n        with the specified ID. If the user is hidden, the view password must be provided.\n\n        Args:\n            user_id: The ID of the user to set as active\n            view_pwd: Optional view password for hidden users\n\n        Returns:\n            ActiveUserResponse containing information about the newly activated user\n\n        Example:\n            ```python\n            # Switch to user with ID 2\n            active_user = await client.users.set_active(2)\n            print(f\"Switched to user: {active_user.display_name}\")\n\n            # Switch to a hidden user\n            active_user = await client.users.set_active(3, view_pwd=\"password123\")\n            ```\n\n        Raises:\n            SimplexCommandError: If there was an error executing the command or the user ID is invalid\n        \"\"\"\n        cmd = APISetActiveUser(\n            type=\"apiSetActiveUser\", userId=user_id, viewPwd=view_pwd\n        )\n        resp = await self._client.send_command(cmd)\n\n        # If we got None back, that's unexpected for this command\n        if resp is None:\n            error_msg = f\"Failed to set active user {user_id}: No response\"\n            logger.error(error_msg)\n            raise SimplexCommandError(error_msg, resp)\n\n        # If we got back a proper ActiveUserResponse, return it\n        if isinstance(resp, ActiveUserResponse):\n            return resp\n\n        # If we received some other type, raise an error\n        error_msg = f\"Failed to set active user {user_id}: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    async def create_active_user(\n        self,\n        display_name: str,\n        full_name: str,\n        same_servers: bool = True,\n        past_timestamp: bool = False,\n        create_profile_address: bool = True,\n    ) -&gt; ActiveUserResponse:\n        \"\"\"\n        Create a new user profile and set it as active.\n\n        This method creates a new user with the specified profile information and\n        sets it as the active user. If a user with the specified display name already\n        exists, a SimplexCommandError will be raised with a userExists error type.\n\n        Args:\n            display_name: The display name for the new user\n            full_name: The full name for the new user\n            same_servers: Whether to use the same servers as existing users (default: True)\n            past_timestamp: Whether to use a past timestamp for the user (default: False)\n            create_profile_address: Whether to automatically create a profile address for the user (default: True)\n\n        Returns:\n            ActiveUserResponse containing information about the newly created user\n\n        Example:\n            ```python\n            try:\n                # Create a new user\n                new_user = await client.users.create_active_user(\n                    display_name=\"Alice\",\n                    full_name=\"Alice Smith\"\n                )\n                print(f\"Created user: {new_user.display_name} (ID: {new_user.user_id})\")\n            except SimplexCommandError as e:\n                if hasattr(e, 'error_type') and e.error_type.get('type') == 'userExists':\n                    print(f\"User already exists: {e.error_type.get('contactName')}\")\n                else:\n                    raise\n            ```\n\n        Raises:\n            SimplexCommandError: If there was an error creating the user, including if the user already exists\n        \"\"\"\n        # Create profile for the new user using our strongly-typed Profile class\n        profile = Profile(displayName=display_name, fullName=full_name)\n\n        # Create the command with the typed profile object\n        # The profile is properly serialized by the command formatter\n        # using the to_dict method we've defined\n        cmd = CreateActiveUser(\n            type=\"createActiveUser\",\n            profile=profile,\n            sameServers=same_servers,\n            pastTimestamp=past_timestamp,\n        )\n\n        # Send the command\n        resp = await self._client.send_command(cmd)\n        print(resp)\n\n        # If we got None back, that's unexpected for this command\n        if resp is None:\n            error_msg = f\"Failed to create user {display_name}: No response\"\n            logger.error(error_msg)\n            raise SimplexCommandError(error_msg, resp)\n\n        # If we got back a proper ActiveUserResponse, store it\n        if not isinstance(resp, ActiveUserResponse):\n            # If we received some other type, raise an error\n            error_msg = f\"Failed to create user {display_name}: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n            logger.error(error_msg)\n            raise SimplexCommandError(error_msg, resp)\n\n        user_resp = resp\n\n        # Create profile address if requested\n        if create_profile_address:\n            try:\n                # First, create the contact address\n                create_cmd = CreateMyAddress(type=\"createMyAddress\")\n                await self._client.send_command(create_cmd)\n\n                # Then, include it in the profile\n                await self.set_profile_address(enabled=True)\n\n                logger.info(\n                    f\"Successfully created profile address for new user {display_name}\"\n                )\n            except SimplexCommandError as e:\n                # Log the error but don't fail the whole operation\n                logger.warning(\n                    f\"Failed to create profile address for user {display_name}: {e}\"\n                )\n                # We don't re-raise the exception since the user was created successfully\n\n        return user_resp\n\n    async def set_profile_address(\n        self, enabled: bool = True, create_if_missing: bool = True\n    ) -&gt; Union[UserProfileUpdatedResponse, UserProfileNoChangeResponse]:\n        \"\"\"\n        Enable or disable the contact address in the active user's profile.\n\n        When enabled, this creates a shareable contact address that others can\n        use to connect with the user. The address will be included in the user's\n        profile and can be shared with others.\n\n        Args:\n            enabled: Whether to enable (True) or disable (False) the profile address\n            create_if_missing: Whether to create the contact address if it doesn't exist (default: True)\n\n        Returns:\n            UserProfileUpdatedResponse containing the updated profile information when there's a change,\n            or UserProfileNoChangeResponse when there's no change to be made.\n\n        Example:\n            ```python\n            # Enable profile address\n            profile_update = await client.users.set_profile_address(enabled=True)\n            if isinstance(profile_update, UserProfileUpdatedResponse):\n                print(f\"Profile address enabled: {profile_update.toProfile.get('contactLink')}\")\n\n            # Disable profile address\n            profile_update = await client.users.set_profile_address(enabled=False)\n            if isinstance(profile_update, UserProfileNoChangeResponse):\n                print(\"No change needed to profile address\")\n            ```\n\n        Raises:\n            SimplexCommandError: If there was an error updating the profile\n        \"\"\"\n        # Create the command\n        cmd = SetProfileAddress(type=\"setProfileAddress\", includeInProfile=enabled)\n\n        # Send the command\n        resp = await self._client.send_command(cmd)\n\n        # If we got None back, that's unexpected for this command\n        if resp is None:\n            action = \"enable\" if enabled else \"disable\"\n            error_msg = f\"Failed to {action} profile address: No response\"\n            logger.error(error_msg)\n            raise SimplexCommandError(error_msg, resp)\n\n        # If we got back a proper response, return it\n        if isinstance(resp, (UserProfileUpdatedResponse, UserProfileNoChangeResponse)):\n            return resp\n\n        # Special handling for store errors when working with profile addresses\n        if isinstance(resp, StoreErrorType):\n            if enabled:\n                # When enabling: Handle both duplicate and not found cases\n                if resp.is_duplicate_contact_link_error():\n                    logger.info(\n                        \"Profile address already exists, returning no change response\"\n                    )\n                    return UserProfileNoChangeResponse(type=\"userProfileNoChange\")\n\n                # When 'contact link not found' error happens, it means the user doesn't have one\n                # Attempt to create it first if requested\n                if resp.is_contact_link_not_found_error() and create_if_missing:\n                    try:\n                        # First, create the contact address\n                        logger.info(\"Profile address not found, creating one\")\n                        create_cmd = CreateMyAddress(type=\"createMyAddress\")\n                        await self._client.send_command(create_cmd)\n\n                        # Then, try to include it in the profile again\n                        logger.info(\"Retrying profile address inclusion\")\n                        return await self.set_profile_address(\n                            enabled=True, create_if_missing=False\n                        )\n                    except SimplexCommandError as e:\n                        # If we failed to create the address, include that in the error\n                        error_msg = f\"Failed to create profile address: {e}\"\n                        logger.error(error_msg)\n                        raise SimplexCommandError(error_msg, resp)\n\n                if resp.is_contact_link_not_found_error():\n                    error_msg = \"Cannot enable profile address: User doesn't have a contact link\"\n                    logger.info(error_msg)\n                    # This is a valid error case, but we choose to create a UserProfileNoChangeResponse\n                    # to maintain consistency with how we handle other cases\n                    return UserProfileNoChangeResponse(type=\"userProfileNoChange\")\n            else:\n                # When disabling: We treat 'contact link not found' as a no-change situation\n                # (can't disable what doesn't exist)\n                if resp.is_contact_link_not_found_error():\n                    logger.info(\n                        \"Profile address doesn't exist, returning no change response\"\n                    )\n                    return UserProfileNoChangeResponse(type=\"userProfileNoChange\")\n\n        # If we received some other type, raise an error\n        action = \"enable\" if enabled else \"disable\"\n        error_msg = f\"Failed to {action} profile address: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    async def delete_user(\n        self, user_id: int, delete_smp_queues: bool = True, view_pwd: Optional[str] = None\n    ) -&gt; Union[ActiveUserResponse, \"CmdOkResponse\"]:\n        \"\"\"\n        Delete a user from the SimpleX Chat system.\n\n        This permanently removes the user account and optionally its associated SMP queues.\n        If the user is hidden, the view password must be provided.\n\n        IMPORTANT: You cannot delete the currently active user. You must first switch to another\n        user with set_active() before deleting a user. Attempting to delete the active user\n        will result in a SimplexCommandError with 'cantDeleteActiveUser' error.\n\n        Args:\n            user_id: The ID of the user to delete\n            delete_smp_queues: Whether to delete the user's SMP queues (default: True)\n            view_pwd: Optional view password for hidden users\n\n        Returns:\n            ActiveUserResponse containing information about the new active user (if deletion caused a switch)\n            or CmdOkResponse if the deletion was successful but no user switch occurred\n\n        Example:\n            ```python\n            # Get current user before deletion to ensure we're not deleting the active user\n            active_user = await client.users.get_active()\n\n            # Only proceed if we're attempting to delete a different user\n            if active_user.user_id != user_id_to_delete:\n                result = await client.users.delete_user(user_id_to_delete)\n                if isinstance(result, ActiveUserResponse):\n                    print(f\"Deleted user, now active user is: {result.display_name}\")\n                else:\n                    print(\"User deleted successfully\")\n            else:\n                # Switch to another user first\n                users = await client.users.list_users()\n                for user in users:\n                    if user.user_id != active_user.user_id:\n                        await client.users.set_active(user.user_id)\n                        await client.users.delete_user(user_id_to_delete)\n                        break\n            ```\n\n        Raises:\n            SimplexCommandError: If there was an error executing the command (e.g., user ID is invalid)\n                                 or if attempting to delete the currently active user.\n        \"\"\"\n        from ..responses.base import CmdOkResponse\n\n        # Check if we're trying to delete the active user - this will fail with an error\n        # but we can provide a better error message by checking first\n        active_user = await self.get_active(include_contact_link=False)\n        if active_user and active_user.user_id == user_id:\n            error_msg = f\"Cannot delete the active user (ID: {user_id}). Switch to a different user first with set_active().\"\n            logger.error(error_msg)\n            raise ValueError(error_msg)\n\n        # Create the command\n        cmd = APIDeleteUser(\n            type=\"apiDeleteUser\", \n            userId=user_id, \n            delSMPQueues=delete_smp_queues,\n            viewPwd=view_pwd\n        )\n\n        # Send the command\n        resp = await self._client.send_command(cmd)\n\n        # If we got None back, that's unexpected for this command\n        if resp is None:\n            error_msg = f\"Failed to delete user {user_id}: No response\"\n            logger.error(error_msg)\n            raise SimplexCommandError(error_msg, resp)\n\n        # If we got back a proper ActiveUserResponse or CmdOkResponse, return it\n        if isinstance(resp, (ActiveUserResponse, CmdOkResponse)):\n            return resp\n\n        # If we received some other type, raise an error\n        error_msg = f\"Failed to delete user {user_id}: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n</code></pre>"},{"location":"api/users/#simplex_python.clients.users.UsersClient.__init__","title":"<code>__init__(client: SimplexClient)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>SimplexClient</code> <p>The parent SimplexClient instance.</p> required Source code in <code>simplex_python/clients/users.py</code> <pre><code>def __init__(self, client: \"SimplexClient\"):\n    \"\"\"\n    Args:\n        client: The parent SimplexClient instance.\n    \"\"\"\n    self._client = client\n</code></pre>"},{"location":"api/users/#simplex_python.clients.users.UsersClient.create_active_user","title":"<code>create_active_user(display_name: str, full_name: str, same_servers: bool = True, past_timestamp: bool = False, create_profile_address: bool = True) -&gt; ActiveUserResponse</code>  <code>async</code>","text":"<p>Create a new user profile and set it as active.</p> <p>This method creates a new user with the specified profile information and sets it as the active user. If a user with the specified display name already exists, a SimplexCommandError will be raised with a userExists error type.</p> <p>Parameters:</p> Name Type Description Default <code>display_name</code> <code>str</code> <p>The display name for the new user</p> required <code>full_name</code> <code>str</code> <p>The full name for the new user</p> required <code>same_servers</code> <code>bool</code> <p>Whether to use the same servers as existing users (default: True)</p> <code>True</code> <code>past_timestamp</code> <code>bool</code> <p>Whether to use a past timestamp for the user (default: False)</p> <code>False</code> <code>create_profile_address</code> <code>bool</code> <p>Whether to automatically create a profile address for the user (default: True)</p> <code>True</code> <p>Returns:</p> Type Description <code>ActiveUserResponse</code> <p>ActiveUserResponse containing information about the newly created user</p> Example <pre><code>try:\n    # Create a new user\n    new_user = await client.users.create_active_user(\n        display_name=\"Alice\",\n        full_name=\"Alice Smith\"\n    )\n    print(f\"Created user: {new_user.display_name} (ID: {new_user.user_id})\")\nexcept SimplexCommandError as e:\n    if hasattr(e, 'error_type') and e.error_type.get('type') == 'userExists':\n        print(f\"User already exists: {e.error_type.get('contactName')}\")\n    else:\n        raise\n</code></pre> <p>Raises:</p> Type Description <code>SimplexCommandError</code> <p>If there was an error creating the user, including if the user already exists</p> Source code in <code>simplex_python/clients/users.py</code> <pre><code>async def create_active_user(\n    self,\n    display_name: str,\n    full_name: str,\n    same_servers: bool = True,\n    past_timestamp: bool = False,\n    create_profile_address: bool = True,\n) -&gt; ActiveUserResponse:\n    \"\"\"\n    Create a new user profile and set it as active.\n\n    This method creates a new user with the specified profile information and\n    sets it as the active user. If a user with the specified display name already\n    exists, a SimplexCommandError will be raised with a userExists error type.\n\n    Args:\n        display_name: The display name for the new user\n        full_name: The full name for the new user\n        same_servers: Whether to use the same servers as existing users (default: True)\n        past_timestamp: Whether to use a past timestamp for the user (default: False)\n        create_profile_address: Whether to automatically create a profile address for the user (default: True)\n\n    Returns:\n        ActiveUserResponse containing information about the newly created user\n\n    Example:\n        ```python\n        try:\n            # Create a new user\n            new_user = await client.users.create_active_user(\n                display_name=\"Alice\",\n                full_name=\"Alice Smith\"\n            )\n            print(f\"Created user: {new_user.display_name} (ID: {new_user.user_id})\")\n        except SimplexCommandError as e:\n            if hasattr(e, 'error_type') and e.error_type.get('type') == 'userExists':\n                print(f\"User already exists: {e.error_type.get('contactName')}\")\n            else:\n                raise\n        ```\n\n    Raises:\n        SimplexCommandError: If there was an error creating the user, including if the user already exists\n    \"\"\"\n    # Create profile for the new user using our strongly-typed Profile class\n    profile = Profile(displayName=display_name, fullName=full_name)\n\n    # Create the command with the typed profile object\n    # The profile is properly serialized by the command formatter\n    # using the to_dict method we've defined\n    cmd = CreateActiveUser(\n        type=\"createActiveUser\",\n        profile=profile,\n        sameServers=same_servers,\n        pastTimestamp=past_timestamp,\n    )\n\n    # Send the command\n    resp = await self._client.send_command(cmd)\n    print(resp)\n\n    # If we got None back, that's unexpected for this command\n    if resp is None:\n        error_msg = f\"Failed to create user {display_name}: No response\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    # If we got back a proper ActiveUserResponse, store it\n    if not isinstance(resp, ActiveUserResponse):\n        # If we received some other type, raise an error\n        error_msg = f\"Failed to create user {display_name}: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    user_resp = resp\n\n    # Create profile address if requested\n    if create_profile_address:\n        try:\n            # First, create the contact address\n            create_cmd = CreateMyAddress(type=\"createMyAddress\")\n            await self._client.send_command(create_cmd)\n\n            # Then, include it in the profile\n            await self.set_profile_address(enabled=True)\n\n            logger.info(\n                f\"Successfully created profile address for new user {display_name}\"\n            )\n        except SimplexCommandError as e:\n            # Log the error but don't fail the whole operation\n            logger.warning(\n                f\"Failed to create profile address for user {display_name}: {e}\"\n            )\n            # We don't re-raise the exception since the user was created successfully\n\n    return user_resp\n</code></pre>"},{"location":"api/users/#simplex_python.clients.users.UsersClient.delete_user","title":"<code>delete_user(user_id: int, delete_smp_queues: bool = True, view_pwd: Optional[str] = None) -&gt; Union[ActiveUserResponse, CmdOkResponse]</code>  <code>async</code>","text":"<p>Delete a user from the SimpleX Chat system.</p> <p>This permanently removes the user account and optionally its associated SMP queues. If the user is hidden, the view password must be provided.</p> <p>IMPORTANT: You cannot delete the currently active user. You must first switch to another user with set_active() before deleting a user. Attempting to delete the active user will result in a SimplexCommandError with 'cantDeleteActiveUser' error.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The ID of the user to delete</p> required <code>delete_smp_queues</code> <code>bool</code> <p>Whether to delete the user's SMP queues (default: True)</p> <code>True</code> <code>view_pwd</code> <code>Optional[str]</code> <p>Optional view password for hidden users</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ActiveUserResponse, CmdOkResponse]</code> <p>ActiveUserResponse containing information about the new active user (if deletion caused a switch)</p> <code>Union[ActiveUserResponse, CmdOkResponse]</code> <p>or CmdOkResponse if the deletion was successful but no user switch occurred</p> Example <pre><code># Get current user before deletion to ensure we're not deleting the active user\nactive_user = await client.users.get_active()\n\n# Only proceed if we're attempting to delete a different user\nif active_user.user_id != user_id_to_delete:\n    result = await client.users.delete_user(user_id_to_delete)\n    if isinstance(result, ActiveUserResponse):\n        print(f\"Deleted user, now active user is: {result.display_name}\")\n    else:\n        print(\"User deleted successfully\")\nelse:\n    # Switch to another user first\n    users = await client.users.list_users()\n    for user in users:\n        if user.user_id != active_user.user_id:\n            await client.users.set_active(user.user_id)\n            await client.users.delete_user(user_id_to_delete)\n            break\n</code></pre> <p>Raises:</p> Type Description <code>SimplexCommandError</code> <p>If there was an error executing the command (e.g., user ID is invalid)                  or if attempting to delete the currently active user.</p> Source code in <code>simplex_python/clients/users.py</code> <pre><code>async def delete_user(\n    self, user_id: int, delete_smp_queues: bool = True, view_pwd: Optional[str] = None\n) -&gt; Union[ActiveUserResponse, \"CmdOkResponse\"]:\n    \"\"\"\n    Delete a user from the SimpleX Chat system.\n\n    This permanently removes the user account and optionally its associated SMP queues.\n    If the user is hidden, the view password must be provided.\n\n    IMPORTANT: You cannot delete the currently active user. You must first switch to another\n    user with set_active() before deleting a user. Attempting to delete the active user\n    will result in a SimplexCommandError with 'cantDeleteActiveUser' error.\n\n    Args:\n        user_id: The ID of the user to delete\n        delete_smp_queues: Whether to delete the user's SMP queues (default: True)\n        view_pwd: Optional view password for hidden users\n\n    Returns:\n        ActiveUserResponse containing information about the new active user (if deletion caused a switch)\n        or CmdOkResponse if the deletion was successful but no user switch occurred\n\n    Example:\n        ```python\n        # Get current user before deletion to ensure we're not deleting the active user\n        active_user = await client.users.get_active()\n\n        # Only proceed if we're attempting to delete a different user\n        if active_user.user_id != user_id_to_delete:\n            result = await client.users.delete_user(user_id_to_delete)\n            if isinstance(result, ActiveUserResponse):\n                print(f\"Deleted user, now active user is: {result.display_name}\")\n            else:\n                print(\"User deleted successfully\")\n        else:\n            # Switch to another user first\n            users = await client.users.list_users()\n            for user in users:\n                if user.user_id != active_user.user_id:\n                    await client.users.set_active(user.user_id)\n                    await client.users.delete_user(user_id_to_delete)\n                    break\n        ```\n\n    Raises:\n        SimplexCommandError: If there was an error executing the command (e.g., user ID is invalid)\n                             or if attempting to delete the currently active user.\n    \"\"\"\n    from ..responses.base import CmdOkResponse\n\n    # Check if we're trying to delete the active user - this will fail with an error\n    # but we can provide a better error message by checking first\n    active_user = await self.get_active(include_contact_link=False)\n    if active_user and active_user.user_id == user_id:\n        error_msg = f\"Cannot delete the active user (ID: {user_id}). Switch to a different user first with set_active().\"\n        logger.error(error_msg)\n        raise ValueError(error_msg)\n\n    # Create the command\n    cmd = APIDeleteUser(\n        type=\"apiDeleteUser\", \n        userId=user_id, \n        delSMPQueues=delete_smp_queues,\n        viewPwd=view_pwd\n    )\n\n    # Send the command\n    resp = await self._client.send_command(cmd)\n\n    # If we got None back, that's unexpected for this command\n    if resp is None:\n        error_msg = f\"Failed to delete user {user_id}: No response\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    # If we got back a proper ActiveUserResponse or CmdOkResponse, return it\n    if isinstance(resp, (ActiveUserResponse, CmdOkResponse)):\n        return resp\n\n    # If we received some other type, raise an error\n    error_msg = f\"Failed to delete user {user_id}: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n    logger.error(error_msg)\n    raise SimplexCommandError(error_msg, resp)\n</code></pre>"},{"location":"api/users/#simplex_python.clients.users.UsersClient.get_active","title":"<code>get_active(include_contact_link: bool = True) -&gt; Optional[ActiveUserResponse]</code>  <code>async</code>","text":"<p>Get the currently active user profile.</p> <p>Parameters:</p> Name Type Description Default <code>include_contact_link</code> <code>bool</code> <p>Whether to check and include the user's contact link if it exists (default: True)</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[ActiveUserResponse]</code> <p>ActiveUserResponse containing the user profile object, or None if no active user exists.</p> <code>Optional[ActiveUserResponse]</code> <p>If include_contact_link is True and the user has a contact link, it will be included in the response.</p> <p>Raises:</p> Type Description <code>SimplexCommandError</code> <p>If there was an error executing the command.</p> Source code in <code>simplex_python/clients/users.py</code> <pre><code>async def get_active(\n    self, include_contact_link: bool = True\n) -&gt; Optional[ActiveUserResponse]:\n    \"\"\"\n    Get the currently active user profile.\n\n    Args:\n        include_contact_link: Whether to check and include the user's contact link if it exists (default: True)\n\n    Returns:\n        ActiveUserResponse containing the user profile object, or None if no active user exists.\n        If include_contact_link is True and the user has a contact link, it will be included in the response.\n\n    Raises:\n        SimplexCommandError: If there was an error executing the command.\n    \"\"\"\n    cmd = ShowActiveUser(type=\"showActiveUser\")\n    resp = await self._client.send_command(cmd)\n\n    # If we got None back, it means there's no active user\n    if resp is None:\n        return None\n\n    # Handle special case where we get a \"no active user\" error\n    if hasattr(resp, \"type\") and resp.type == \"chatCmdError\":\n        # Check if it's specifically the \"no active user\" error\n        if (\n            hasattr(resp, \"chatError\")\n            and resp.chatError.get(\"type\") == \"error\"\n            and resp.chatError.get(\"errorType\", {}).get(\"type\") == \"noActiveUser\"\n        ):\n            return None\n\n    # If we got back a proper ActiveUserResponse, process it\n    if isinstance(resp, ActiveUserResponse):\n        # If requested, try to get the contact link for the user\n        if include_contact_link and \"contactLink\" not in resp.profile:\n            try:\n                # Check if the user has a contact link\n                from ..commands.users import ShowMyAddress\n\n                address_resp = await self._client.send_command(\n                    ShowMyAddress(type=\"showMyAddress\")\n                )\n\n                # Extract the contact link - could be in different formats\n                contact_link = None\n                if hasattr(address_resp, \"contactLink\"):\n                    if isinstance(address_resp.contactLink, str):\n                        contact_link = address_resp.contactLink\n                    elif (\n                        isinstance(address_resp.contactLink, dict)\n                        and \"connLinkContact\" in address_resp.contactLink\n                    ):\n                        # Extract from nested dictionary\n                        if \"connFullLink\" in address_resp.contactLink.get(\n                            \"connLinkContact\", {}\n                        ):\n                            contact_link = address_resp.contactLink[\n                                \"connLinkContact\"\n                            ][\"connFullLink\"]\n\n                # Only update if we found a valid link\n                if contact_link:\n                    # Update the profile to include the contact link\n                    resp.profile[\"contactLink\"] = contact_link\n                    # Also update the original user data for backward compatibility\n                    if \"profile\" in resp.user:\n                        resp.user[\"profile\"][\"contactLink\"] = contact_link\n            except Exception as e:\n                # Don't fail the whole operation if we can't get the contact link\n                logger.debug(f\"Failed to get contact link for active user: {e}\")\n\n        return resp\n\n    # If we received some other type, raise an error\n    error_msg = f\"Failed to get active user: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n    logger.error(error_msg)\n    raise SimplexCommandError(error_msg, resp)\n</code></pre>"},{"location":"api/users/#simplex_python.clients.users.UsersClient.list_users","title":"<code>list_users(include_contact_links: bool = False) -&gt; UsersListResponse</code>  <code>async</code>","text":"<p>List all users in the SimpleX Chat system.</p> <p>This method retrieves information about all users configured in the system, including their profiles, unread counts, and active status.</p> <p>Parameters:</p> Name Type Description Default <code>include_contact_links</code> <code>bool</code> <p>Whether to fetch and include contact links for each user (default: False).                   Note that enabling this option will switch to each user to fetch their contact link,                   which could be slower with many users.</p> <code>False</code> <p>Returns:</p> Type Description <code>UsersListResponse</code> <p>UsersListResponse containing a list of user items with detailed information.</p> <code>UsersListResponse</code> <p>The response is iterable and supports indexing to access individual UserItem objects.</p> <code>UsersListResponse</code> <p>If include_contact_links is True, each user's profile will include their contact link if available.</p> Example <pre><code># Get all users without contact links (faster)\nusers = await client.users.list_users()\n\n# Get all users with their contact links (slower but more complete)\nusers_with_links = await client.users.list_users(include_contact_links=True)\n\n# Print number of users\nprint(f\"Found {len(users)} users\")\n\n# Iterate through users\nfor user in users:\n    print(f\"User: {user.display_name} (ID: {user.user_id})\")\n    print(f\"Active: {user.active_user}\")\n    print(f\"Unread messages: {user.unread_count}\")\n    if 'contactLink' in user.profile:\n        print(f\"Contact Link: {user.profile.get('contactLink')}\")\n\n# Access by index\nfirst_user = users[0]\n</code></pre> <p>Raises:</p> Type Description <code>SimplexCommandError</code> <p>If there was an error executing the command.</p> Source code in <code>simplex_python/clients/users.py</code> <pre><code>async def list_users(\n    self, include_contact_links: bool = False\n) -&gt; UsersListResponse:\n    \"\"\"\n    List all users in the SimpleX Chat system.\n\n    This method retrieves information about all users configured in the\n    system, including their profiles, unread counts, and active status.\n\n    Args:\n        include_contact_links: Whether to fetch and include contact links for each user (default: False).\n                              Note that enabling this option will switch to each user to fetch their contact link,\n                              which could be slower with many users.\n\n    Returns:\n        UsersListResponse containing a list of user items with detailed information.\n        The response is iterable and supports indexing to access individual UserItem objects.\n        If include_contact_links is True, each user's profile will include their contact link if available.\n\n    Example:\n        ```python\n        # Get all users without contact links (faster)\n        users = await client.users.list_users()\n\n        # Get all users with their contact links (slower but more complete)\n        users_with_links = await client.users.list_users(include_contact_links=True)\n\n        # Print number of users\n        print(f\"Found {len(users)} users\")\n\n        # Iterate through users\n        for user in users:\n            print(f\"User: {user.display_name} (ID: {user.user_id})\")\n            print(f\"Active: {user.active_user}\")\n            print(f\"Unread messages: {user.unread_count}\")\n            if 'contactLink' in user.profile:\n                print(f\"Contact Link: {user.profile.get('contactLink')}\")\n\n        # Access by index\n        first_user = users[0]\n        ```\n\n    Raises:\n        SimplexCommandError: If there was an error executing the command.\n    \"\"\"\n    cmd = ListUsers(type=\"listUsers\")\n    resp = await self._client.send_command(cmd)\n\n    # If we got None back, that's unexpected for this command\n    if resp is None:\n        error_msg = \"Failed to list users: No response\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    # If we got back a proper UsersListResponse, process it\n    if isinstance(resp, UsersListResponse):\n        # If requested, fetch contact links for each user\n        if include_contact_links:\n            # Remember the current active user ID to restore later\n            current_active = await self.get_active(include_contact_link=False)\n            current_active_id = current_active.user_id if current_active else None\n\n            try:\n                # Import here to avoid circular imports\n                from ..commands.users import ShowMyAddress\n\n                # For each user in the list, switch to them and get their contact link\n                for user_item in resp:\n                    if user_item.user_id == current_active_id:\n                        # For the already active user, we can just get their contact link directly\n                        try:\n                            address_resp = await self._client.send_command(\n                                ShowMyAddress(type=\"showMyAddress\")\n                            )\n                            # Extract the contact link - could be in different formats\n                            contact_link = None\n                            if hasattr(address_resp, \"contactLink\"):\n                                if isinstance(address_resp.contactLink, str):\n                                    contact_link = address_resp.contactLink\n                                elif (\n                                    isinstance(address_resp.contactLink, dict)\n                                    and \"connLinkContact\"\n                                    in address_resp.contactLink\n                                ):\n                                    # Extract from nested dictionary\n                                    if (\n                                        \"connFullLink\"\n                                        in address_resp.contactLink.get(\n                                            \"connLinkContact\", {}\n                                        )\n                                    ):\n                                        contact_link = address_resp.contactLink[\n                                            \"connLinkContact\"\n                                        ][\"connFullLink\"]\n                            # Only update if we found a valid link\n                            if contact_link:\n                                user_item.profile[\"contactLink\"] = contact_link\n                                if \"profile\" in user_item.user:\n                                    user_item.user[\"profile\"][\"contactLink\"] = (\n                                        contact_link\n                                    )\n                        except Exception as e:\n                            logger.debug(\n                                f\"Failed to get contact link for active user {user_item.display_name}: {e}\"\n                            )\n                    else:\n                        # For other users, we need to switch to them first\n                        try:\n                            # Switch to this user\n                            await self.set_active(user_item.user_id)\n\n                            # Get their contact link\n                            address_resp = await self._client.send_command(\n                                ShowMyAddress(type=\"showMyAddress\")\n                            )\n                            # Extract the contact link - could be in different formats\n                            contact_link = None\n                            if hasattr(address_resp, \"contactLink\"):\n                                if isinstance(address_resp.contactLink, str):\n                                    contact_link = address_resp.contactLink\n                                elif (\n                                    isinstance(address_resp.contactLink, dict)\n                                    and \"connLinkContact\"\n                                    in address_resp.contactLink\n                                ):\n                                    # Extract from nested dictionary\n                                    if (\n                                        \"connFullLink\"\n                                        in address_resp.contactLink.get(\n                                            \"connLinkContact\", {}\n                                        )\n                                    ):\n                                        contact_link = address_resp.contactLink[\n                                            \"connLinkContact\"\n                                        ][\"connFullLink\"]\n                            # Only update if we found a valid link\n                            if contact_link:\n                                user_item.profile[\"contactLink\"] = contact_link\n                                if \"profile\" in user_item.user:\n                                    user_item.user[\"profile\"][\"contactLink\"] = (\n                                        contact_link\n                                    )\n                        except Exception as e:\n                            logger.debug(\n                                f\"Failed to get contact link for user {user_item.display_name}: {e}\"\n                            )\n\n                # Restore the original active user\n                if current_active_id is not None:\n                    await self.set_active(current_active_id)\n\n            except Exception as e:\n                logger.warning(f\"Failed to include contact links for users: {e}\")\n                # If we switch users but fail, try to restore the original active user\n                if current_active_id is not None:\n                    try:\n                        await self.set_active(current_active_id)\n                    except Exception as restore_error:\n                        logger.error(\n                            f\"Failed to restore original active user: {restore_error}\"\n                        )\n\n        return resp\n\n    # If we received some other type, raise an error\n    error_msg = f\"Failed to list users: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n    logger.error(error_msg)\n    raise SimplexCommandError(error_msg, resp)\n</code></pre>"},{"location":"api/users/#simplex_python.clients.users.UsersClient.set_active","title":"<code>set_active(user_id: int, view_pwd: Optional[str] = None) -&gt; ActiveUserResponse</code>  <code>async</code>","text":"<p>Set the active user.</p> <p>Changes the current active user in the SimpleX Chat system to the user with the specified ID. If the user is hidden, the view password must be provided.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The ID of the user to set as active</p> required <code>view_pwd</code> <code>Optional[str]</code> <p>Optional view password for hidden users</p> <code>None</code> <p>Returns:</p> Type Description <code>ActiveUserResponse</code> <p>ActiveUserResponse containing information about the newly activated user</p> Example <pre><code># Switch to user with ID 2\nactive_user = await client.users.set_active(2)\nprint(f\"Switched to user: {active_user.display_name}\")\n\n# Switch to a hidden user\nactive_user = await client.users.set_active(3, view_pwd=\"password123\")\n</code></pre> <p>Raises:</p> Type Description <code>SimplexCommandError</code> <p>If there was an error executing the command or the user ID is invalid</p> Source code in <code>simplex_python/clients/users.py</code> <pre><code>async def set_active(\n    self, user_id: int, view_pwd: Optional[str] = None\n) -&gt; ActiveUserResponse:\n    \"\"\"\n    Set the active user.\n\n    Changes the current active user in the SimpleX Chat system to the user\n    with the specified ID. If the user is hidden, the view password must be provided.\n\n    Args:\n        user_id: The ID of the user to set as active\n        view_pwd: Optional view password for hidden users\n\n    Returns:\n        ActiveUserResponse containing information about the newly activated user\n\n    Example:\n        ```python\n        # Switch to user with ID 2\n        active_user = await client.users.set_active(2)\n        print(f\"Switched to user: {active_user.display_name}\")\n\n        # Switch to a hidden user\n        active_user = await client.users.set_active(3, view_pwd=\"password123\")\n        ```\n\n    Raises:\n        SimplexCommandError: If there was an error executing the command or the user ID is invalid\n    \"\"\"\n    cmd = APISetActiveUser(\n        type=\"apiSetActiveUser\", userId=user_id, viewPwd=view_pwd\n    )\n    resp = await self._client.send_command(cmd)\n\n    # If we got None back, that's unexpected for this command\n    if resp is None:\n        error_msg = f\"Failed to set active user {user_id}: No response\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    # If we got back a proper ActiveUserResponse, return it\n    if isinstance(resp, ActiveUserResponse):\n        return resp\n\n    # If we received some other type, raise an error\n    error_msg = f\"Failed to set active user {user_id}: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n    logger.error(error_msg)\n    raise SimplexCommandError(error_msg, resp)\n</code></pre>"},{"location":"api/users/#simplex_python.clients.users.UsersClient.set_profile_address","title":"<code>set_profile_address(enabled: bool = True, create_if_missing: bool = True) -&gt; Union[UserProfileUpdatedResponse, UserProfileNoChangeResponse]</code>  <code>async</code>","text":"<p>Enable or disable the contact address in the active user's profile.</p> <p>When enabled, this creates a shareable contact address that others can use to connect with the user. The address will be included in the user's profile and can be shared with others.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable (True) or disable (False) the profile address</p> <code>True</code> <code>create_if_missing</code> <code>bool</code> <p>Whether to create the contact address if it doesn't exist (default: True)</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[UserProfileUpdatedResponse, UserProfileNoChangeResponse]</code> <p>UserProfileUpdatedResponse containing the updated profile information when there's a change,</p> <code>Union[UserProfileUpdatedResponse, UserProfileNoChangeResponse]</code> <p>or UserProfileNoChangeResponse when there's no change to be made.</p> Example <pre><code># Enable profile address\nprofile_update = await client.users.set_profile_address(enabled=True)\nif isinstance(profile_update, UserProfileUpdatedResponse):\n    print(f\"Profile address enabled: {profile_update.toProfile.get('contactLink')}\")\n\n# Disable profile address\nprofile_update = await client.users.set_profile_address(enabled=False)\nif isinstance(profile_update, UserProfileNoChangeResponse):\n    print(\"No change needed to profile address\")\n</code></pre> <p>Raises:</p> Type Description <code>SimplexCommandError</code> <p>If there was an error updating the profile</p> Source code in <code>simplex_python/clients/users.py</code> <pre><code>async def set_profile_address(\n    self, enabled: bool = True, create_if_missing: bool = True\n) -&gt; Union[UserProfileUpdatedResponse, UserProfileNoChangeResponse]:\n    \"\"\"\n    Enable or disable the contact address in the active user's profile.\n\n    When enabled, this creates a shareable contact address that others can\n    use to connect with the user. The address will be included in the user's\n    profile and can be shared with others.\n\n    Args:\n        enabled: Whether to enable (True) or disable (False) the profile address\n        create_if_missing: Whether to create the contact address if it doesn't exist (default: True)\n\n    Returns:\n        UserProfileUpdatedResponse containing the updated profile information when there's a change,\n        or UserProfileNoChangeResponse when there's no change to be made.\n\n    Example:\n        ```python\n        # Enable profile address\n        profile_update = await client.users.set_profile_address(enabled=True)\n        if isinstance(profile_update, UserProfileUpdatedResponse):\n            print(f\"Profile address enabled: {profile_update.toProfile.get('contactLink')}\")\n\n        # Disable profile address\n        profile_update = await client.users.set_profile_address(enabled=False)\n        if isinstance(profile_update, UserProfileNoChangeResponse):\n            print(\"No change needed to profile address\")\n        ```\n\n    Raises:\n        SimplexCommandError: If there was an error updating the profile\n    \"\"\"\n    # Create the command\n    cmd = SetProfileAddress(type=\"setProfileAddress\", includeInProfile=enabled)\n\n    # Send the command\n    resp = await self._client.send_command(cmd)\n\n    # If we got None back, that's unexpected for this command\n    if resp is None:\n        action = \"enable\" if enabled else \"disable\"\n        error_msg = f\"Failed to {action} profile address: No response\"\n        logger.error(error_msg)\n        raise SimplexCommandError(error_msg, resp)\n\n    # If we got back a proper response, return it\n    if isinstance(resp, (UserProfileUpdatedResponse, UserProfileNoChangeResponse)):\n        return resp\n\n    # Special handling for store errors when working with profile addresses\n    if isinstance(resp, StoreErrorType):\n        if enabled:\n            # When enabling: Handle both duplicate and not found cases\n            if resp.is_duplicate_contact_link_error():\n                logger.info(\n                    \"Profile address already exists, returning no change response\"\n                )\n                return UserProfileNoChangeResponse(type=\"userProfileNoChange\")\n\n            # When 'contact link not found' error happens, it means the user doesn't have one\n            # Attempt to create it first if requested\n            if resp.is_contact_link_not_found_error() and create_if_missing:\n                try:\n                    # First, create the contact address\n                    logger.info(\"Profile address not found, creating one\")\n                    create_cmd = CreateMyAddress(type=\"createMyAddress\")\n                    await self._client.send_command(create_cmd)\n\n                    # Then, try to include it in the profile again\n                    logger.info(\"Retrying profile address inclusion\")\n                    return await self.set_profile_address(\n                        enabled=True, create_if_missing=False\n                    )\n                except SimplexCommandError as e:\n                    # If we failed to create the address, include that in the error\n                    error_msg = f\"Failed to create profile address: {e}\"\n                    logger.error(error_msg)\n                    raise SimplexCommandError(error_msg, resp)\n\n            if resp.is_contact_link_not_found_error():\n                error_msg = \"Cannot enable profile address: User doesn't have a contact link\"\n                logger.info(error_msg)\n                # This is a valid error case, but we choose to create a UserProfileNoChangeResponse\n                # to maintain consistency with how we handle other cases\n                return UserProfileNoChangeResponse(type=\"userProfileNoChange\")\n        else:\n            # When disabling: We treat 'contact link not found' as a no-change situation\n            # (can't disable what doesn't exist)\n            if resp.is_contact_link_not_found_error():\n                logger.info(\n                    \"Profile address doesn't exist, returning no change response\"\n                )\n                return UserProfileNoChangeResponse(type=\"userProfileNoChange\")\n\n    # If we received some other type, raise an error\n    action = \"enable\" if enabled else \"disable\"\n    error_msg = f\"Failed to {action} profile address: Unexpected response type {getattr(resp, 'type', 'unknown')}\"\n    logger.error(error_msg)\n    raise SimplexCommandError(error_msg, resp)\n</code></pre>"},{"location":"api/users/#user-commands","title":"User Commands","text":"<p>User management commands are defined in the commands.users module.</p>"},{"location":"api/users/#simplex_python.commands.users","title":"<code>simplex_python.commands.users</code>","text":"<p>User and address-related command classes for the Simplex messaging system.</p> <p>This module defines the commands for managing users and addresses, including: - User management (creating, listing, activating, hiding, muting, etc.) - User profile operations - Address creation and management - Address auto-accept configuration</p> <p>All commands inherit from BaseCommand and provide a consistent interface for user-related operations in the Simplex system.</p>"},{"location":"api/users/#simplex_python.commands.users.APISetActiveUser","title":"<code>APISetActiveUser</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseCommand</code></p> <p>Command to set the active user via API.</p> Source code in <code>simplex_python/commands/users.py</code> <pre><code>@dataclass(kw_only=True)\nclass APISetActiveUser(BaseCommand):\n    \"\"\"Command to set the active user via API.\"\"\"\n\n    type: str = \"apiSetActiveUser\"\n    userId: int\n    viewPwd: Optional[str] = None\n</code></pre>"},{"location":"api/users/#simplex_python.commands.users.APIDeleteUser","title":"<code>APIDeleteUser</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseCommand</code></p> <p>Command to delete a user via API.</p> Source code in <code>simplex_python/commands/users.py</code> <pre><code>@dataclass(kw_only=True)\nclass APIDeleteUser(BaseCommand):\n    \"\"\"Command to delete a user via API.\"\"\"\n\n    type: str = \"apiDeleteUser\"\n    userId: int\n    delSMPQueues: bool\n    viewPwd: Optional[str] = None\n</code></pre>"},{"location":"api/users/#response-types","title":"Response Types","text":"<p>User-specific response types provide strongly typed access to server responses.</p>"},{"location":"api/users/#simplex_python.responses.users","title":"<code>simplex_python.responses.users</code>","text":"<p>User-related response types for the Simplex messaging system.</p> <p>This module defines response types for user-related operations, including: - User management (active users, profiles, settings) - Address management (creation, deletion, display) - Auto-accept configuration - Contact link management</p> <p>All responses follow a consistent pattern with the command classes they correspond to.</p>"},{"location":"api/users/#simplex_python.responses.users.ActiveUserResponse","title":"<code>ActiveUserResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response containing active user information.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass ActiveUserResponse(CommandResponse):\n    \"\"\"Response containing active user information.\"\"\"\n\n    # Store original user dict for backward compatibility\n    user: Dict[str, Any] = field(default_factory=dict)\n\n    # Directly expose common user properties for fluent API\n    user_id: Optional[int] = None\n    agent_user_id: Optional[str] = None\n    local_display_name: Optional[str] = None\n    profile: Dict[str, Any] = field(default_factory=dict)\n    preferences: Dict[str, Any] = field(default_factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"ActiveUserResponse\":\n        user_data = data.get(\"user\", {})\n\n        # Create the response with both the original user dict and extracted properties\n        return cls(\n            type=\"activeUser\",\n            user=user_data,\n            user_id=user_data.get(\"userId\"),\n            agent_user_id=user_data.get(\"agentUserId\"),\n            local_display_name=user_data.get(\"localDisplayName\"),\n            profile=user_data.get(\"profile\", {}),\n            preferences=user_data.get(\"fullPreferences\", {}),\n        )\n\n    @property\n    def display_name(self) -&gt; Optional[str]:\n        \"\"\"Get the user's display name from profile.\"\"\"\n        return self.profile.get(\"displayName\") if self.profile else None\n\n    @property\n    def full_name(self) -&gt; Optional[str]:\n        \"\"\"Get the user's full name from profile.\"\"\"\n        return self.profile.get(\"fullName\") if self.profile else None\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.ActiveUserResponse.display_name","title":"<code>display_name: Optional[str]</code>  <code>property</code>","text":"<p>Get the user's display name from profile.</p>"},{"location":"api/users/#simplex_python.responses.users.ActiveUserResponse.full_name","title":"<code>full_name: Optional[str]</code>  <code>property</code>","text":"<p>Get the user's full name from profile.</p>"},{"location":"api/users/#simplex_python.responses.users.User","title":"<code>User</code>  <code>dataclass</code>","text":"<p>User information returned in responses.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass User:\n    \"\"\"User information returned in responses.\"\"\"\n\n    userId: int\n    agentUserId: str\n    userContactId: int\n    localDisplayName: str\n    profile: Dict[str, Any]\n    activeUser: bool\n    viewPwdHash: str = \"\"\n    showNtfs: bool = True\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"User\":\n        return cls(\n            userId=data.get(\"userId\", 0),\n            agentUserId=data.get(\"agentUserId\", \"\"),\n            userContactId=data.get(\"userContactId\", 0),\n            localDisplayName=data.get(\"localDisplayName\", \"\"),\n            profile=data.get(\"profile\", {}),\n            activeUser=data.get(\"activeUser\", False),\n            viewPwdHash=data.get(\"viewPwdHash\", \"\"),\n            showNtfs=data.get(\"showNtfs\", True),\n        )\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserContactLink","title":"<code>UserContactLink</code>  <code>dataclass</code>","text":"<p>User contact link information.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserContactLink:\n    \"\"\"User contact link information.\"\"\"\n\n    connReqContact: str\n    autoAccept: Optional[Dict[str, Any]] = None\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserContactLink\":\n        return cls(\n            connReqContact=data.get(\"connReqContact\", \"\"),\n            autoAccept=data.get(\"autoAccept\"),\n        )\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkCreatedResponse","title":"<code>UserContactLinkCreatedResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response when a user contact link is created.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserContactLinkCreatedResponse(CommandResponse):\n    \"\"\"Response when a user contact link is created.\"\"\"\n\n    connReqContact: str = \"\"\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserContactLinkCreatedResponse\":\n        return cls(\n            type=\"userContactLinkCreated\",\n            user=data.get(\"user\"),\n            connReqContact=data.get(\"connReqContact\", \"\"),\n        )\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkDeletedResponse","title":"<code>UserContactLinkDeletedResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response when a user contact link is deleted.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserContactLinkDeletedResponse(CommandResponse):\n    \"\"\"Response when a user contact link is deleted.\"\"\"\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserContactLinkDeletedResponse\":\n        return cls(type=\"userContactLinkDeleted\", user=data.get(\"user\"))\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkResponse","title":"<code>UserContactLinkResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response containing a user's contact link (address).</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserContactLinkResponse(CommandResponse):\n    \"\"\"Response containing a user's contact link (address).\"\"\"\n\n    contactLink: Dict[str, Any] = field(default_factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserContactLinkResponse\":\n        return cls(\n            type=\"userContactLink\",\n            user=data.get(\"user\"),\n            contactLink=data.get(\"contactLink\", {}),\n        )\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkSubErrorResponse","title":"<code>UserContactLinkSubErrorResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response when there's an error with a user contact link subscription.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserContactLinkSubErrorResponse(CommandResponse):\n    \"\"\"Response when there's an error with a user contact link subscription.\"\"\"\n\n    chatError: Dict[str, Any] = field(default_factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserContactLinkSubErrorResponse\":\n        return cls(type=\"userContactLinkSubError\", chatError=data.get(\"chatError\", {}))\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkSubscribedResponse","title":"<code>UserContactLinkSubscribedResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response when a user contact link is subscribed to.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserContactLinkSubscribedResponse(CommandResponse):\n    \"\"\"Response when a user contact link is subscribed to.\"\"\"\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserContactLinkSubscribedResponse\":\n        return cls(type=\"userContactLinkSubscribed\")\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserContactLinkUpdatedResponse","title":"<code>UserContactLinkUpdatedResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response when a user's contact link is updated.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserContactLinkUpdatedResponse(CommandResponse):\n    \"\"\"Response when a user's contact link is updated.\"\"\"\n\n    connReqContact: str = \"\"\n    autoAccept: bool = False\n    autoReply: Optional[Dict[str, Any]] = None\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserContactLinkUpdatedResponse\":\n        return cls(\n            type=\"userContactLinkUpdated\",\n            user=data.get(\"user\"),\n            connReqContact=data.get(\"connReqContact\", \"\"),\n            autoAccept=data.get(\"autoAccept\", False),\n            autoReply=data.get(\"autoReply\"),\n        )\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserItem","title":"<code>UserItem</code>  <code>dataclass</code>","text":"<p>Individual user item from a users list response.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserItem:\n    \"\"\"Individual user item from a users list response.\"\"\"\n\n    # Raw user dictionary\n    user: Dict[str, Any] = field(default_factory=dict)\n\n    # Direct access to common properties\n    user_id: Optional[int] = None\n    agent_user_id: Optional[str] = None\n    local_display_name: Optional[str] = None\n    profile: Dict[str, Any] = field(default_factory=dict)\n    preferences: Dict[str, Any] = field(default_factory=dict)\n    active_user: bool = False\n    unread_count: int = 0\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserItem\":\n        \"\"\"Create a UserItem from a dictionary.\"\"\"\n        user_data = data.get(\"user\", {})\n\n        return cls(\n            user=user_data,\n            user_id=user_data.get(\"userId\"),\n            agent_user_id=user_data.get(\"agentUserId\"),\n            local_display_name=user_data.get(\"localDisplayName\"),\n            profile=user_data.get(\"profile\", {}),\n            preferences=user_data.get(\"fullPreferences\", {}),\n            active_user=user_data.get(\"activeUser\", False),\n            unread_count=data.get(\"unreadCount\", 0)\n        )\n\n    @property\n    def display_name(self) -&gt; Optional[str]:\n        \"\"\"Get the user's display name from profile.\"\"\"\n        return self.profile.get(\"displayName\") if self.profile else None\n\n    @property\n    def full_name(self) -&gt; Optional[str]:\n        \"\"\"Get the user's full name from profile.\"\"\"\n        return self.profile.get(\"fullName\") if self.profile else None\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserItem.display_name","title":"<code>display_name: Optional[str]</code>  <code>property</code>","text":"<p>Get the user's display name from profile.</p>"},{"location":"api/users/#simplex_python.responses.users.UserItem.full_name","title":"<code>full_name: Optional[str]</code>  <code>property</code>","text":"<p>Get the user's full name from profile.</p>"},{"location":"api/users/#simplex_python.responses.users.UserItem.from_dict","title":"<code>from_dict(data: Dict[str, Any]) -&gt; UserItem</code>  <code>classmethod</code>","text":"<p>Create a UserItem from a dictionary.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: Dict[str, Any]) -&gt; \"UserItem\":\n    \"\"\"Create a UserItem from a dictionary.\"\"\"\n    user_data = data.get(\"user\", {})\n\n    return cls(\n        user=user_data,\n        user_id=user_data.get(\"userId\"),\n        agent_user_id=user_data.get(\"agentUserId\"),\n        local_display_name=user_data.get(\"localDisplayName\"),\n        profile=user_data.get(\"profile\", {}),\n        preferences=user_data.get(\"fullPreferences\", {}),\n        active_user=user_data.get(\"activeUser\", False),\n        unread_count=data.get(\"unreadCount\", 0)\n    )\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserProfileNoChangeResponse","title":"<code>UserProfileNoChangeResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response when a profile update results in no change.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserProfileNoChangeResponse(CommandResponse):\n    \"\"\"Response when a profile update results in no change.\"\"\"\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserProfileNoChangeResponse\":\n        return cls(type=\"userProfileNoChange\", user=data.get(\"user\"))\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserProfileResponse","title":"<code>UserProfileResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response containing a user's profile.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserProfileResponse(CommandResponse):\n    \"\"\"Response containing a user's profile.\"\"\"\n\n    profile: Dict[str, Any] = field(default_factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserProfileResponse\":\n        return cls(\n            type=\"userProfile\", user=data.get(\"user\"), profile=data.get(\"profile\", {})\n        )\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UserProfileUpdatedResponse","title":"<code>UserProfileUpdatedResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response when a user's profile is updated.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UserProfileUpdatedResponse(CommandResponse):\n    \"\"\"Response when a user's profile is updated.\"\"\"\n\n    fromProfile: Dict[str, Any] = field(default_factory=dict)\n    toProfile: Dict[str, Any] = field(default_factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UserProfileUpdatedResponse\":\n        return cls(\n            type=\"userProfileUpdated\",\n            user=data.get(\"user\"),\n            fromProfile=data.get(\"fromProfile\", {}),\n            toProfile=data.get(\"toProfile\", {}),\n        )\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UsersListResponse","title":"<code>UsersListResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>CommandResponse</code></p> <p>Response containing a list of users.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>@dataclass\nclass UsersListResponse(CommandResponse):\n    \"\"\"Response containing a list of users.\"\"\"\n\n    users: List[Dict[str, Any]] = field(default_factory=list)\n\n    # Internal representation of processed user items\n    _user_items: List[\"UserItem\"] = field(default_factory=list, repr=False)\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"UsersListResponse\":\n        raw_users = data.get(\"users\", [])\n        response = cls(type=\"usersList\", users=raw_users)\n\n        # Process raw users into UserItem objects\n        response._user_items = [UserItem.from_dict(user_data) for user_data in raw_users]\n        return response\n\n    def __len__(self) -&gt; int:\n        \"\"\"Return the number of users in the list.\"\"\"\n        return len(self._user_items)\n\n    def __getitem__(self, index) -&gt; \"UserItem\":\n        \"\"\"Access user items by index.\"\"\"\n        return self._user_items[index]\n\n    def __iter__(self):\n        \"\"\"Allow iteration over user items.\"\"\"\n        return iter(self._user_items)\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UsersListResponse.__getitem__","title":"<code>__getitem__(index) -&gt; UserItem</code>","text":"<p>Access user items by index.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>def __getitem__(self, index) -&gt; \"UserItem\":\n    \"\"\"Access user items by index.\"\"\"\n    return self._user_items[index]\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UsersListResponse.__iter__","title":"<code>__iter__()</code>","text":"<p>Allow iteration over user items.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>def __iter__(self):\n    \"\"\"Allow iteration over user items.\"\"\"\n    return iter(self._user_items)\n</code></pre>"},{"location":"api/users/#simplex_python.responses.users.UsersListResponse.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of users in the list.</p> Source code in <code>simplex_python/responses/users.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Return the number of users in the list.\"\"\"\n    return len(self._user_items)\n</code></pre>"},{"location":"api/users/#examples","title":"Examples","text":""},{"location":"api/users/#creating-a-user","title":"Creating a User","text":"<pre><code># Create a new user and set as active\nnew_user = await client.users.create_active_user(\n    display_name=\"Alice\",\n    full_name=\"Alice Smith\"\n)\n\n# Access typed properties directly\nprint(f\"Created user {new_user.display_name} with ID {new_user.user_id}\")\n</code></pre>"},{"location":"api/users/#managing-users","title":"Managing Users","text":"<pre><code># List all users\nusers = await client.users.list_users()\nprint(f\"Found {len(users)} users\")\n\nfor user in users:\n    print(f\"User {user.user_id}: {user.display_name}\")\n\n# Switch to another user\nawait client.users.set_active(user_id=2)\n\n# Delete a user when no longer needed\nawait client.users.delete_user(user_id=3)\n</code></pre>"},{"location":"api/users/#error-handling","title":"Error Handling","text":"<p>```python try:     # Will raise ValueError if attempting to delete active user     await client.users.delete_user(user_id=active_user_id) except ValueError as e:     print(f\"Cannot delete active user: {e}\")</p>"},{"location":"api/users/#switch-to-another-user-first","title":"Switch to another user first","text":"<p>await client.users.set_active(another_user_id)</p>"},{"location":"api/users/#now-delete-is-allowed","title":"Now delete is allowed","text":"<p>await client.users.delete_user(active_user_id)</p>"}]}